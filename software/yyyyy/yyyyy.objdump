
yyyyy.elf:     file format elf32-littlenios2
yyyyy.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04000248

Program Header:
    LOAD off    0x00001000 vaddr 0x04000000 paddr 0x04000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04000020 paddr 0x04000020 align 2**12
         filesz 0x00007514 memsz 0x00007514 flags r-x
    LOAD off    0x00008534 vaddr 0x04007534 paddr 0x040090ac align 2**12
         filesz 0x00001b78 memsz 0x00001b78 flags rw-
    LOAD off    0x0000ac24 vaddr 0x0400ac24 paddr 0x0400ac24 align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04000000  04000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000228  04000020  04000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000070bc  04000248  04000248  00001248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000230  04007304  04007304  00008304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b78  04007534  040090ac  00008534  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  0400ac24  0400ac24  0000ac24  2**2
                  ALLOC, SMALL_DATA
  6 .ram          00000000  00000000  00000000  0000a0ac  2**0
                  CONTENTS
  7 .sdram        00000000  0400ad78  0400ad78  0000a0ac  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0000a0ac  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000b00  00000000  00000000  0000a0d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00017ecd  00000000  00000000  0000abd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00006623  00000000  00000000  00022a9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00007714  00000000  00000000  000290c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000195c  00000000  00000000  000307d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002cdd  00000000  00000000  00032130  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00004e26  00000000  00000000  00034e0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  00039c34  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000006c0  00000000  00000000  00039c98  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0003cd32  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  0003cd35  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0003cd38  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0003cd39  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000009  00000000  00000000  0003cd3a  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000009  00000000  00000000  0003cd43  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000009  00000000  00000000  0003cd4c  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000004  00000000  00000000  0003cd55  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 0000001e  00000000  00000000  0003cd59  2**0
                  CONTENTS, READONLY
 27 .jdi          00004640  00000000  00000000  0003cd77  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     000b2fc6  00000000  00000000  000413b7  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04000000 l    d  .entry	00000000 .entry
04000020 l    d  .exceptions	00000000 .exceptions
04000248 l    d  .text	00000000 .text
04007304 l    d  .rodata	00000000 .rodata
04007534 l    d  .rwdata	00000000 .rwdata
0400ac24 l    d  .bss	00000000 .bss
00000000 l    d  .ram	00000000 .ram
0400ad78 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../yyyyy_bsp//obj/HAL/src/crt0.o
04000290 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 itoa.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 utoa.c
00000000 l    df *ABS*	00000000 findfp.c
04000b50 l     F .text	00000008 __fp_unlock
04000b64 l     F .text	0000019c __sinit.part.1
04000d00 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
04007534 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_close.c
0400353c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
04003648 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
04003674 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
04003760 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
04003840 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0400392c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
04003b00 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0400909c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
04003d7c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
04003eb0 l     F .text	00000034 alt_dev_reg
04007f08 l     O .rwdata	00001060 jtag_uart
04008f68 l     O .rwdata	0000002c accelerometer_spi_0
04008f94 l     O .rwdata	00000048 charbuff
04008fdc l     O .rwdata	00000054 pixelbuff
04009030 l     O .rwdata	00000044 video_rgb_resampler_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
04004514 l     F .text	00000210 altera_avalon_jtag_uart_irq
04004724 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
04004d5c l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0400627c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
040064e0 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
040067a0 l     F .text	0000003c alt_get_errno
040067dc l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0400ac4c g     O .bss	00000004 alt_instruction_exception_handler
04003334 g     F .text	00000054 _isatty_r
04003a3c g     F .text	0000007c alt_main
04005a00 g     F .text	0000024c alt_up_pixel_buffer_dma_draw_vline
04000888 g     F .text	000000c0 _puts_r
0400ac78 g     O .bss	00000100 alt_irq
0400305c g     F .text	00000060 _lseek_r
040090ac g       *ABS*	00000000 __flash_rwdata_start
0400ad78 g       *ABS*	00000000 __alt_heap_start
04002610 g     F .text	0000005c __sseek
04000ea0 g     F .text	00000010 __sinit
04004fd4 g     F .text	000000fc alt_up_char_buffer_string
04000d08 g     F .text	00000068 __sfmoreglue
04003adc g     F .text	00000024 __malloc_unlock
04004f08 g     F .text	000000cc alt_up_char_buffer_draw
04001e24 g     F .text	0000015c memmove
04000e88 g     F .text	00000018 _cleanup
04005168 g     F .text	00000194 alt_up_pixel_buffer_dma_draw
04006b98 g     F .text	00000024 altera_nios2_gen2_irq_init
0400512c g     F .text	0000003c alt_up_pixel_buffer_dma_open_dev
04000000 g     F .entry	0000001c __reset
04000020 g       *ABS*	00000000 __flash_exceptions_start
040032d8 g     F .text	0000005c _fstat_r
0400ac30 g     O .bss	00000004 errno
0400258c g     F .text	00000008 __seofread
0400ac38 g     O .bss	00000004 alt_argv
04011074 g       *ABS*	00000000 _gp
04003d4c g     F .text	00000030 usleep
040052fc g     F .text	0000005c alt_up_pixel_buffer_dma_change_back_buffer_address
04007d88 g     O .rwdata	00000180 alt_fd_list
0400641c g     F .text	00000090 alt_find_dev
04000618 g     F .text	00000148 memcpy
040050d0 g     F .text	0000005c alt_up_char_buffer_clear
04000b58 g     F .text	0000000c _cleanup_r
040065a4 g     F .text	0000007c alt_io_redirect
04007304 g       *ABS*	00000000 __DTOR_END__
04000948 g     F .text	00000014 puts
04006df8 g     F .text	0000009c alt_exception_cause_generated_bad_addr
040053b8 g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
0400491c g     F .text	0000021c altera_avalon_jtag_uart_read
04003480 g     F .text	00000064 .hidden __udivsi3
0400379c g     F .text	000000a4 isatty
040057f0 g     F .text	00000210 alt_up_pixel_buffer_dma_draw_hline
04006d68 g     F .text	00000090 alt_icache_flush
0400ac2c g     O .bss	00000004 __malloc_top_pad
04000614 g     F .text	00000004 itoa
00000000 g       *ABS*	00000000 __alt_mem_ram
04000ef0 g     F .text	000004bc __sfvwrite_r
040024e4 g     F .text	00000054 _sbrk_r
04005d14 g     F .text	00000084 helper_plot_pixel
04003278 g     F .text	00000060 _read_r
04009094 g     O .rwdata	00000004 alt_max_fd
0400287c g     F .text	000000f0 _fclose_r
04002bf8 g     F .text	00000030 fflush
0400ac28 g     O .bss	00000004 __malloc_max_sbrked_mem
04006620 g     F .text	00000180 alt_irq_register
040053ec g     F .text	00000128 alt_up_pixel_buffer_dma_clear_screen
04003968 g     F .text	000000d4 lseek
04009074 g     O .rwdata	00000004 _global_impure_ptr
04001f80 g     F .text	00000564 _realloc_r
0400ad78 g       *ABS*	00000000 __bss_end
04005514 g     F .text	000002dc alt_up_pixel_buffer_dma_draw_box
04006a90 g     F .text	00000108 alt_tick
04000ec0 g     F .text	00000018 __fp_lock_all
040069f4 g     F .text	0000009c alt_alarm_stop
0400ac40 g     O .bss	00000004 alt_irq_active
040000fc g     F .exceptions	000000d8 alt_irq_handler
04007d60 g     O .rwdata	00000028 alt_dev_null
04006234 g     F .text	00000048 alt_dcache_flush_all
04005c4c g     F .text	000000c8 alt_up_pixel_buffer_dma_draw_rectangle
04000b4c g     F .text	00000004 utoa
040090ac g       *ABS*	00000000 __ram_rwdata_end
0400908c g     O .rwdata	00000008 alt_dev_list
04003db8 g     F .text	000000f8 write
04005d98 g     F .text	00000248 alt_up_pixel_buffer_dma_draw_line
04007534 g       *ABS*	00000000 __ram_rodata_end
040036b0 g     F .text	000000b0 fstat
040034e4 g     F .text	00000058 .hidden __umodsi3
0400ad78 g       *ABS*	00000000 end
04004e4c g     F .text	00000080 alt_up_char_buffer_init
040005ac g     F .text	00000068 __itoa
04004460 g     F .text	000000b4 altera_avalon_jtag_uart_init
040001d4 g     F .exceptions	00000074 alt_instruction_exception_entry
04007304 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
04004dd8 g     F .text	00000074 alt_avalon_timer_sc_init
04004b38 g     F .text	00000224 altera_avalon_jtag_uart_write
04000eb0 g     F .text	00000004 __sfp_lock_acquire
04001d40 g     F .text	000000e4 memchr
04002d4c g     F .text	00000310 _free_r
04007150 g     F .text	00000180 __call_exitprocs
0400907c g     O .rwdata	00000004 __malloc_sbrk_base
04000248 g     F .text	0000004c _start
0400ac44 g     O .bss	00000004 _alt_tick_rate
0400ac48 g     O .bss	00000004 _alt_nticks
04003b3c g     F .text	000000fc read
04003f1c g     F .text	000003e0 alt_sys_init
04007038 g     F .text	00000118 __register_exitproc
040047c4 g     F .text	00000068 altera_avalon_jtag_uart_close
04007534 g       *ABS*	00000000 __ram_rwdata_start
04007304 g       *ABS*	00000000 __ram_rodata_start
0400ac50 g     O .bss	00000028 __malloc_current_mallinfo
040042fc g     F .text	00000060 altera_avalon_jtag_uart_read_fd
04006cc4 g     F .text	000000a4 alt_get_fd
0400610c g     F .text	00000128 alt_busy_sleep
04002828 g     F .text	00000054 _close_r
04006ee0 g     F .text	0000007c memcmp
040043bc g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0400ad78 g       *ABS*	00000000 __alt_stack_base
0400440c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
040026d4 g     F .text	00000154 __swsetup_r
04000d70 g     F .text	00000118 __sfp
04007958 g     O .rwdata	00000408 __malloc_av_
04000ebc g     F .text	00000004 __sinit_lock_release
04002538 g     F .text	00000054 __sread
04006bbc g     F .text	00000108 alt_find_file
040062b8 g     F .text	000000a4 alt_dev_llist_insert
04003ab8 g     F .text	00000024 __malloc_lock
04003c9c g     F .text	000000b0 sbrk
04002b9c g     F .text	0000005c _fflush_r
040009f4 g     F .text	00000158 __utoa
0400ac24 g       *ABS*	00000000 __bss_start
04000760 g     F .text	00000128 memset
04000294 g     F .text	00000318 main
0400ac3c g     O .bss	00000004 alt_envp
0400ac24 g     O .bss	00000004 __malloc_max_total_mem
04005358 g     F .text	00000060 alt_up_pixel_buffer_dma_swap_buffers
04004ecc g     F .text	0000003c alt_up_char_buffer_open_dev
0400435c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0400266c g     F .text	00000008 __sclose
08000000 g       *ABS*	00000000 __alt_heap_limit
0400296c g     F .text	00000014 fclose
04001534 g     F .text	0000080c _malloc_r
04009098 g     O .rwdata	00000004 alt_errno
040013ac g     F .text	000000c4 _fwalk
04003388 g     F .text	00000084 .hidden __divsi3
04002c28 g     F .text	00000124 _malloc_trim_r
04007304 g       *ABS*	00000000 __CTOR_END__
04006f5c g     F .text	000000dc strcmp
04007304 g       *ABS*	00000000 __flash_rodata_start
04007304 g       *ABS*	00000000 __DTOR_LIST__
04003ee4 g     F .text	00000038 alt_irq_init
04003c38 g     F .text	00000064 alt_release_fd
04006e94 g     F .text	00000014 atexit
04002674 g     F .text	00000060 _write_r
04009078 g     O .rwdata	00000004 _impure_ptr
0400ac34 g     O .bss	00000004 alt_argc
04002980 g     F .text	0000021c __sflush_r
040063bc g     F .text	00000060 _do_dtors
04000020 g       .exceptions	00000000 alt_irq_entry
04000ed8 g     F .text	00000018 __fp_unlock_all
04009084 g     O .rwdata	00000008 alt_fs_list
04000020 g       *ABS*	00000000 __ram_exceptions_start
040090ac g       *ABS*	00000000 _edata
0400ad78 g       *ABS*	00000000 _end
04000248 g       *ABS*	00000000 __ram_exceptions_end
0400482c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
04002594 g     F .text	0000007c __swrite
04009080 g     O .rwdata	00000004 __malloc_trim_threshold
04006ea8 g     F .text	00000038 exit
04001470 g     F .text	000000c4 _fwalk_reent
0400340c g     F .text	00000074 .hidden __modsi3
08000000 g       *ABS*	00000000 __alt_data_end
04000020 g     F .exceptions	00000000 alt_exception
04000eb4 g     F .text	00000004 __sfp_lock_release
04000000 g       *ABS*	00000000 __alt_mem_sdram
040072d0 g     F .text	00000034 _exit
04005fe0 g     F .text	0000012c alt_alarm_start
040030bc g     F .text	000001bc __smakebuf_r
0400095c g     F .text	00000098 strlen
040068a0 g     F .text	00000154 open
040064ac g     F .text	00000034 alt_icache_flush_all
040090a0 g     O .rwdata	00000004 alt_priority_mask
040090a4 g     O .rwdata	00000008 alt_alarm_list
0400635c g     F .text	00000060 _do_ctors
04003578 g     F .text	000000d0 close
040038a8 g     F .text	00000084 alt_load
04000eb8 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

04000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 4000000:	00880014 	movui	r2,8192
#endif

0:
    initi r2
 4000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 4000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 400000c:	00bffd16 	blt	zero,r2,4000004 <__alt_data_end+0xfc000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4000010:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 4000014:	08409214 	ori	at,at,584
    jmp r1
 4000018:	0800683a 	jmp	at
 400001c:	00000000 	call	0 <__alt_mem_ram>

Disassembly of section .exceptions:

04000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 400002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 400003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 400004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 400005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 400006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 400007c:	10000326 	beq	r2,zero,400008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4000080:	20000226 	beq	r4,zero,400008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4000084:	40000fc0 	call	40000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4000088:	00000706 	br	40000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 400008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4000098:	40001d40 	call	40001d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 400009c:	1000021e 	bne	r2,zero,40000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 40000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 40000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 40000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 40000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40000f8:	ef80083a 	eret

040000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40000fc:	defff904 	addi	sp,sp,-28
 4000100:	dfc00615 	stw	ra,24(sp)
 4000104:	df000515 	stw	fp,20(sp)
 4000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 400010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000110:	0005313a 	rdctl	r2,ipending
 4000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 4000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 400011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 4000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4000124:	00800044 	movi	r2,1
 4000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 400012c:	e0fffb17 	ldw	r3,-20(fp)
 4000130:	e0bffc17 	ldw	r2,-16(fp)
 4000134:	1884703a 	and	r2,r3,r2
 4000138:	10001526 	beq	r2,zero,4000190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 400013c:	00810074 	movhi	r2,1025
 4000140:	10ab1e04 	addi	r2,r2,-21384
 4000144:	e0fffd17 	ldw	r3,-12(fp)
 4000148:	180690fa 	slli	r3,r3,3
 400014c:	10c5883a 	add	r2,r2,r3
 4000150:	10c00017 	ldw	r3,0(r2)
 4000154:	00810074 	movhi	r2,1025
 4000158:	10ab1e04 	addi	r2,r2,-21384
 400015c:	e13ffd17 	ldw	r4,-12(fp)
 4000160:	200890fa 	slli	r4,r4,3
 4000164:	1105883a 	add	r2,r2,r4
 4000168:	10800104 	addi	r2,r2,4
 400016c:	10800017 	ldw	r2,0(r2)
 4000170:	e17ffd17 	ldw	r5,-12(fp)
 4000174:	1009883a 	mov	r4,r2
 4000178:	183ee83a 	callr	r3
#endif
        break;
 400017c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000180:	0005313a 	rdctl	r2,ipending
 4000184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4000188:	e0bfff17 	ldw	r2,-4(fp)
 400018c:	00000706 	br	40001ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 4000190:	e0bffc17 	ldw	r2,-16(fp)
 4000194:	1085883a 	add	r2,r2,r2
 4000198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 400019c:	e0bffd17 	ldw	r2,-12(fp)
 40001a0:	10800044 	addi	r2,r2,1
 40001a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40001a8:	003fe006 	br	400012c <__alt_data_end+0xfc00012c>

    active = alt_irq_pending ();
 40001ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 40001b0:	e0bffb17 	ldw	r2,-20(fp)
 40001b4:	103fda1e 	bne	r2,zero,4000120 <__alt_data_end+0xfc000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 40001b8:	0001883a 	nop
}
 40001bc:	0001883a 	nop
 40001c0:	e037883a 	mov	sp,fp
 40001c4:	dfc00117 	ldw	ra,4(sp)
 40001c8:	df000017 	ldw	fp,0(sp)
 40001cc:	dec00204 	addi	sp,sp,8
 40001d0:	f800283a 	ret

040001d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 40001d4:	defffb04 	addi	sp,sp,-20
 40001d8:	dfc00415 	stw	ra,16(sp)
 40001dc:	df000315 	stw	fp,12(sp)
 40001e0:	df000304 	addi	fp,sp,12
 40001e4:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 40001e8:	000531fa 	rdctl	r2,exception
 40001ec:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 40001f0:	e0bffd17 	ldw	r2,-12(fp)
 40001f4:	10801f0c 	andi	r2,r2,124
 40001f8:	1004d0ba 	srli	r2,r2,2
 40001fc:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 4000200:	0005333a 	rdctl	r2,badaddr
 4000204:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 4000208:	d0a6f617 	ldw	r2,-25640(gp)
 400020c:	10000726 	beq	r2,zero,400022c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 4000210:	d0a6f617 	ldw	r2,-25640(gp)
 4000214:	e0fffd17 	ldw	r3,-12(fp)
 4000218:	e1bffe17 	ldw	r6,-8(fp)
 400021c:	e17fff17 	ldw	r5,-4(fp)
 4000220:	1809883a 	mov	r4,r3
 4000224:	103ee83a 	callr	r2
 4000228:	00000206 	br	4000234 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 400022c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 4000230:	0005883a 	mov	r2,zero
}
 4000234:	e037883a 	mov	sp,fp
 4000238:	dfc00117 	ldw	ra,4(sp)
 400023c:	df000017 	ldw	fp,0(sp)
 4000240:	dec00204 	addi	sp,sp,8
 4000244:	f800283a 	ret

Disassembly of section .text:

04000248 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 4000248:	00840014 	movui	r2,4096
#endif

0:
    initd 0(r2)
 400024c:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 4000250:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 4000254:	00bffd16 	blt	zero,r2,400024c <__alt_data_end+0xfc00024c>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4000258:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 400025c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 4000260:	06810074 	movhi	gp,1025
    ori gp, gp, %lo(_gp)
 4000264:	d6841d14 	ori	gp,gp,4212
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4000268:	00810034 	movhi	r2,1024
    ori r2, r2, %lo(__bss_start)
 400026c:	10ab0914 	ori	r2,r2,44068

    movhi r3, %hi(__bss_end)
 4000270:	00c10034 	movhi	r3,1024
    ori r3, r3, %lo(__bss_end)
 4000274:	18eb5e14 	ori	r3,r3,44408

    beq r2, r3, 1f
 4000278:	10c00326 	beq	r2,r3,4000288 <_start+0x40>

0:
    stw zero, (r2)
 400027c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 4000280:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 4000284:	10fffd36 	bltu	r2,r3,400027c <__alt_data_end+0xfc00027c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4000288:	40038a80 	call	40038a8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 400028c:	4003a3c0 	call	4003a3c <alt_main>

04000290 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 4000290:	003fff06 	br	4000290 <__alt_data_end+0xfc000290>

04000294 <main>:
#include <system.h>
#include <unistd.h>
#include <stdio.h>

int main()
{
 4000294:	deffe004 	addi	sp,sp,-128
 4000298:	dfc01f15 	stw	ra,124(sp)
 400029c:	df001e15 	stw	fp,120(sp)
 40002a0:	df001e04 	addi	fp,sp,120
	alt_up_pixel_buffer_dma_dev * pixel_buf_dma_dev;
	// open the Character Buffer port
	// name reference is in system.h
	// "/dev/video_character_buffer_with_dma_0_avalon_char_buffer_slave"
	//
	alt_up_char_buffer_init(char_buf_dev);
 40002a4:	e13fe717 	ldw	r4,-100(fp)
 40002a8:	4004e4c0 	call	4004e4c <alt_up_char_buffer_init>
	char_buf_dev = alt_up_char_buffer_open_dev("/dev/charbuff");
 40002ac:	01010034 	movhi	r4,1024
 40002b0:	211cc104 	addi	r4,r4,29444
 40002b4:	4004ecc0 	call	4004ecc <alt_up_char_buffer_open_dev>
 40002b8:	e0bfe715 	stw	r2,-100(fp)

	// Check for error and output to the console
	//
	if ( char_buf_dev == NULL)
 40002bc:	e0bfe717 	ldw	r2,-100(fp)
 40002c0:	1000041e 	bne	r2,zero,40002d4 <main+0x40>
	printf ("Error: could not open character buffer device \n");
 40002c4:	01010034 	movhi	r4,1024
 40002c8:	211cc504 	addi	r4,r4,29460
 40002cc:	40009480 	call	4000948 <puts>
 40002d0:	00000306 	br	40002e0 <main+0x4c>
	else
	printf ("Opened character buffer device \n");
 40002d4:	01010034 	movhi	r4,1024
 40002d8:	211cd104 	addi	r4,r4,29508
 40002dc:	40009480 	call	4000948 <puts>

	unsigned char a = "hello";
 40002e0:	00810034 	movhi	r2,1024
 40002e4:	109cd904 	addi	r2,r2,29540
 40002e8:	e0bfe805 	stb	r2,-96(fp)
    printf("Hello from Nios II!\n");
 40002ec:	01010034 	movhi	r4,1024
 40002f0:	211cdb04 	addi	r4,r4,29548
 40002f4:	40009480 	call	4000948 <puts>
	printf("Hello from Nios II!1\n");
 40002f8:	01010034 	movhi	r4,1024
 40002fc:	211ce004 	addi	r4,r4,29568
 4000300:	40009480 	call	4000948 <puts>
	printf ("Call init \n");
 4000304:	01010034 	movhi	r4,1024
 4000308:	211ce604 	addi	r4,r4,29592
 400030c:	40009480 	call	4000948 <puts>

	pixel_buf_dma_dev = alt_up_pixel_buffer_dma_open_dev ("/dev/pixelbuff");
 4000310:	01010034 	movhi	r4,1024
 4000314:	211ce904 	addi	r4,r4,29604
 4000318:	400512c0 	call	400512c <alt_up_pixel_buffer_dma_open_dev>
 400031c:	e0bfe915 	stw	r2,-92(fp)
	if ( pixel_buf_dma_dev == NULL){
 4000320:	e0bfe917 	ldw	r2,-92(fp)
 4000324:	1000051e 	bne	r2,zero,400033c <main+0xa8>
	printf ("Error: could not open pixel buffer device \n");
 4000328:	01010034 	movhi	r4,1024
 400032c:	211ced04 	addi	r4,r4,29620
 4000330:	40009480 	call	4000948 <puts>
	return 0;
 4000334:	0005883a 	mov	r2,zero
 4000338:	00009706 	br	4000598 <main+0x304>
	}
	else
	printf ("Opened pixel buffer device \n");
 400033c:	01010034 	movhi	r4,1024
 4000340:	211cf804 	addi	r4,r4,29664
 4000344:	40009480 	call	4000948 <puts>



	alt_up_char_buffer_draw(char_buf_dev, a,10, 10);
 4000348:	e0bfe803 	ldbu	r2,-96(fp)
 400034c:	01c00284 	movi	r7,10
 4000350:	01800284 	movi	r6,10
 4000354:	100b883a 	mov	r5,r2
 4000358:	e13fe717 	ldw	r4,-100(fp)
 400035c:	4004f080 	call	4004f08 <alt_up_char_buffer_draw>
	alt_up_char_buffer_draw(char_buf_dev, "hhhhhhhhh",10, 10);
 4000360:	00810034 	movhi	r2,1024
 4000364:	109cff04 	addi	r2,r2,29692
 4000368:	10803fcc 	andi	r2,r2,255
 400036c:	01c00284 	movi	r7,10
 4000370:	01800284 	movi	r6,10
 4000374:	100b883a 	mov	r5,r2
 4000378:	e13fe717 	ldw	r4,-100(fp)
 400037c:	4004f080 	call	4004f08 <alt_up_char_buffer_draw>
	char text = 'p';
 4000380:	00801c04 	movi	r2,112
 4000384:	e0bfea05 	stb	r2,-88(fp)
	char text_top_row[40] = "Altera DE10_lipp\0";
 4000388:	00810034 	movhi	r2,1024
 400038c:	109d0904 	addi	r2,r2,29732
 4000390:	e0ffea44 	addi	r3,fp,-87
 4000394:	1009883a 	mov	r4,r2
 4000398:	00800484 	movi	r2,18
 400039c:	100d883a 	mov	r6,r2
 40003a0:	200b883a 	mov	r5,r4
 40003a4:	1809883a 	mov	r4,r3
 40003a8:	40006180 	call	4000618 <memcpy>
 40003ac:	e0bfeec4 	addi	r2,fp,-69
 40003b0:	00c00584 	movi	r3,22
 40003b4:	180d883a 	mov	r6,r3
 40003b8:	000b883a 	mov	r5,zero
 40003bc:	1009883a 	mov	r4,r2
 40003c0:	40007600 	call	4000760 <memset>
	char text_bottom_row[40] = "Character Buffer\0";
 40003c4:	00810034 	movhi	r2,1024
 40003c8:	109d1304 	addi	r2,r2,29772
 40003cc:	e0fff444 	addi	r3,fp,-47
 40003d0:	1009883a 	mov	r4,r2
 40003d4:	00800484 	movi	r2,18
 40003d8:	100d883a 	mov	r6,r2
 40003dc:	200b883a 	mov	r5,r4
 40003e0:	1809883a 	mov	r4,r3
 40003e4:	40006180 	call	4000618 <memcpy>
 40003e8:	e0bff8c4 	addi	r2,fp,-29
 40003ec:	00c00584 	movi	r3,22
 40003f0:	180d883a 	mov	r6,r3
 40003f4:	000b883a 	mov	r5,zero
 40003f8:	1009883a 	mov	r4,r2
 40003fc:	40007600 	call	4000760 <memset>
	/* output text message near the middle of the VGA monitor */
	alt_up_char_buffer_clear(char_buf_dev);
 4000400:	e13fe717 	ldw	r4,-100(fp)
 4000404:	40050d00 	call	40050d0 <alt_up_char_buffer_clear>
	alt_up_char_buffer_draw(char_buf_dev, text, 0, 0);
 4000408:	e0bfea03 	ldbu	r2,-88(fp)
 400040c:	10803fcc 	andi	r2,r2,255
 4000410:	000f883a 	mov	r7,zero
 4000414:	000d883a 	mov	r6,zero
 4000418:	100b883a 	mov	r5,r2
 400041c:	e13fe717 	ldw	r4,-100(fp)
 4000420:	4004f080 	call	4004f08 <alt_up_char_buffer_draw>
	alt_up_char_buffer_draw(char_buf_dev, text, 0, 59);
 4000424:	e0bfea03 	ldbu	r2,-88(fp)
 4000428:	10803fcc 	andi	r2,r2,255
 400042c:	01c00ec4 	movi	r7,59
 4000430:	000d883a 	mov	r6,zero
 4000434:	100b883a 	mov	r5,r2
 4000438:	e13fe717 	ldw	r4,-100(fp)
 400043c:	4004f080 	call	4004f08 <alt_up_char_buffer_draw>
	alt_up_char_buffer_draw(char_buf_dev, text, 79, 0);
 4000440:	e0bfea03 	ldbu	r2,-88(fp)
 4000444:	10803fcc 	andi	r2,r2,255
 4000448:	000f883a 	mov	r7,zero
 400044c:	018013c4 	movi	r6,79
 4000450:	100b883a 	mov	r5,r2
 4000454:	e13fe717 	ldw	r4,-100(fp)
 4000458:	4004f080 	call	4004f08 <alt_up_char_buffer_draw>
	alt_up_char_buffer_draw(char_buf_dev, text, 79, 59);
 400045c:	e0bfea03 	ldbu	r2,-88(fp)
 4000460:	10803fcc 	andi	r2,r2,255
 4000464:	01c00ec4 	movi	r7,59
 4000468:	018013c4 	movi	r6,79
 400046c:	100b883a 	mov	r5,r2
 4000470:	e13fe717 	ldw	r4,-100(fp)
 4000474:	4004f080 	call	4004f08 <alt_up_char_buffer_draw>
	alt_up_char_buffer_string(char_buf_dev, text_top_row, 20,20);
 4000478:	e0bfea44 	addi	r2,fp,-87
 400047c:	01c00504 	movi	r7,20
 4000480:	01800504 	movi	r6,20
 4000484:	100b883a 	mov	r5,r2
 4000488:	e13fe717 	ldw	r4,-100(fp)
 400048c:	4004fd40 	call	4004fd4 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf_dev, text_bottom_row, 40,40);
 4000490:	e0bff444 	addi	r2,fp,-47
 4000494:	01c00a04 	movi	r7,40
 4000498:	01800a04 	movi	r6,40
 400049c:	100b883a 	mov	r5,r2
 40004a0:	e13fe717 	ldw	r4,-100(fp)
 40004a4:	4004fd40 	call	4004fd4 <alt_up_char_buffer_string>
	// end program message
	printf ("Program complete \n");
 40004a8:	01010034 	movhi	r4,1024
 40004ac:	211d0204 	addi	r4,r4,29704
 40004b0:	40009480 	call	4000948 <puts>

	alt_up_pixel_buffer_dma_clear_screen (pixel_buf_dma_dev, 0);
 40004b4:	000b883a 	mov	r5,zero
 40004b8:	e13fe917 	ldw	r4,-92(fp)
 40004bc:	40053ec0 	call	40053ec <alt_up_pixel_buffer_dma_clear_screen>
	char snum[5];
	while(1){
		for(int x =0; x< 320; x=x+5){
 40004c0:	e03fe515 	stw	zero,-108(fp)
 40004c4:	00002b06 	br	4000574 <main+0x2e0>
			for(int y =0; y< 240;y=y+5){
 40004c8:	e03fe615 	stw	zero,-104(fp)
 40004cc:	00002306 	br	400055c <main+0x2c8>
				alt_up_char_buffer_clear(char_buf_dev);
 40004d0:	e13fe717 	ldw	r4,-100(fp)
 40004d4:	40050d00 	call	40050d0 <alt_up_char_buffer_clear>

				itoa(y, snum, 10);
 40004d8:	e0bffe44 	addi	r2,fp,-7
 40004dc:	01800284 	movi	r6,10
 40004e0:	100b883a 	mov	r5,r2
 40004e4:	e13fe617 	ldw	r4,-104(fp)
 40004e8:	40006140 	call	4000614 <itoa>
				alt_up_char_buffer_string(char_buf_dev, snum, 10, 10);
 40004ec:	e0bffe44 	addi	r2,fp,-7
 40004f0:	01c00284 	movi	r7,10
 40004f4:	01800284 	movi	r6,10
 40004f8:	100b883a 	mov	r5,r2
 40004fc:	e13fe717 	ldw	r4,-100(fp)
 4000500:	4004fd40 	call	4004fd4 <alt_up_char_buffer_string>
			alt_up_pixel_buffer_dma_clear_screen (pixel_buf_dma_dev, 0);
 4000504:	000b883a 	mov	r5,zero
 4000508:	e13fe917 	ldw	r4,-92(fp)
 400050c:	40053ec0 	call	40053ec <alt_up_pixel_buffer_dma_clear_screen>
			alt_up_pixel_buffer_dma_draw_box(pixel_buf_dma_dev, x, y, 30 + x, y + 30, 0x62, 0);
 4000510:	e0bfe517 	ldw	r2,-108(fp)
 4000514:	11000784 	addi	r4,r2,30
 4000518:	e0bfe617 	ldw	r2,-104(fp)
 400051c:	10800784 	addi	r2,r2,30
 4000520:	d8000215 	stw	zero,8(sp)
 4000524:	00c01884 	movi	r3,98
 4000528:	d8c00115 	stw	r3,4(sp)
 400052c:	d8800015 	stw	r2,0(sp)
 4000530:	200f883a 	mov	r7,r4
 4000534:	e1bfe617 	ldw	r6,-104(fp)
 4000538:	e17fe517 	ldw	r5,-108(fp)
 400053c:	e13fe917 	ldw	r4,-92(fp)
 4000540:	40055140 	call	4005514 <alt_up_pixel_buffer_dma_draw_box>
			usleep(100000);
 4000544:	010000b4 	movhi	r4,2
 4000548:	2121a804 	addi	r4,r4,-31072
 400054c:	4003d4c0 	call	4003d4c <usleep>

	alt_up_pixel_buffer_dma_clear_screen (pixel_buf_dma_dev, 0);
	char snum[5];
	while(1){
		for(int x =0; x< 320; x=x+5){
			for(int y =0; y< 240;y=y+5){
 4000550:	e0bfe617 	ldw	r2,-104(fp)
 4000554:	10800144 	addi	r2,r2,5
 4000558:	e0bfe615 	stw	r2,-104(fp)
 400055c:	e0bfe617 	ldw	r2,-104(fp)
 4000560:	10803c10 	cmplti	r2,r2,240
 4000564:	103fda1e 	bne	r2,zero,40004d0 <__alt_data_end+0xfc0004d0>
	printf ("Program complete \n");

	alt_up_pixel_buffer_dma_clear_screen (pixel_buf_dma_dev, 0);
	char snum[5];
	while(1){
		for(int x =0; x< 320; x=x+5){
 4000568:	e0bfe517 	ldw	r2,-108(fp)
 400056c:	10800144 	addi	r2,r2,5
 4000570:	e0bfe515 	stw	r2,-108(fp)
 4000574:	e0bfe517 	ldw	r2,-108(fp)
 4000578:	10805010 	cmplti	r2,r2,320
 400057c:	103fd21e 	bne	r2,zero,40004c8 <__alt_data_end+0xfc0004c8>
			alt_up_pixel_buffer_dma_clear_screen (pixel_buf_dma_dev, 0);
			alt_up_pixel_buffer_dma_draw_box(pixel_buf_dma_dev, x, y, 30 + x, y + 30, 0x62, 0);
			usleep(100000);
			}
		}
		printf("Render\n");
 4000580:	01010034 	movhi	r4,1024
 4000584:	211d0704 	addi	r4,r4,29724
 4000588:	40009480 	call	4000948 <puts>


		usleep(10000);
 400058c:	0109c404 	movi	r4,10000
 4000590:	4003d4c0 	call	4003d4c <usleep>

	}
 4000594:	003fca06 	br	40004c0 <__alt_data_end+0xfc0004c0>
  return 0;
}
 4000598:	e037883a 	mov	sp,fp
 400059c:	dfc00117 	ldw	ra,4(sp)
 40005a0:	df000017 	ldw	fp,0(sp)
 40005a4:	dec00204 	addi	sp,sp,8
 40005a8:	f800283a 	ret

040005ac <__itoa>:
 40005ac:	30bfff84 	addi	r2,r6,-2
 40005b0:	00c00884 	movi	r3,34
 40005b4:	18801436 	bltu	r3,r2,4000608 <__itoa+0x5c>
 40005b8:	defffe04 	addi	sp,sp,-8
 40005bc:	dfc00115 	stw	ra,4(sp)
 40005c0:	dc000015 	stw	r16,0(sp)
 40005c4:	00800284 	movi	r2,10
 40005c8:	30800926 	beq	r6,r2,40005f0 <__itoa+0x44>
 40005cc:	0005883a 	mov	r2,zero
 40005d0:	2821883a 	mov	r16,r5
 40005d4:	288b883a 	add	r5,r5,r2
 40005d8:	40009f40 	call	40009f4 <__utoa>
 40005dc:	8005883a 	mov	r2,r16
 40005e0:	dfc00117 	ldw	ra,4(sp)
 40005e4:	dc000017 	ldw	r16,0(sp)
 40005e8:	dec00204 	addi	sp,sp,8
 40005ec:	f800283a 	ret
 40005f0:	203ff60e 	bge	r4,zero,40005cc <__alt_data_end+0xfc0005cc>
 40005f4:	00800b44 	movi	r2,45
 40005f8:	28800005 	stb	r2,0(r5)
 40005fc:	0109c83a 	sub	r4,zero,r4
 4000600:	00800044 	movi	r2,1
 4000604:	003ff206 	br	40005d0 <__alt_data_end+0xfc0005d0>
 4000608:	28000005 	stb	zero,0(r5)
 400060c:	0005883a 	mov	r2,zero
 4000610:	f800283a 	ret

04000614 <itoa>:
 4000614:	40005ac1 	jmpi	40005ac <__itoa>

04000618 <memcpy>:
 4000618:	defffd04 	addi	sp,sp,-12
 400061c:	dfc00215 	stw	ra,8(sp)
 4000620:	dc400115 	stw	r17,4(sp)
 4000624:	dc000015 	stw	r16,0(sp)
 4000628:	00c003c4 	movi	r3,15
 400062c:	2005883a 	mov	r2,r4
 4000630:	1980452e 	bgeu	r3,r6,4000748 <memcpy+0x130>
 4000634:	2906b03a 	or	r3,r5,r4
 4000638:	18c000cc 	andi	r3,r3,3
 400063c:	1800441e 	bne	r3,zero,4000750 <memcpy+0x138>
 4000640:	347ffc04 	addi	r17,r6,-16
 4000644:	8822d13a 	srli	r17,r17,4
 4000648:	28c00104 	addi	r3,r5,4
 400064c:	23400104 	addi	r13,r4,4
 4000650:	8820913a 	slli	r16,r17,4
 4000654:	2b000204 	addi	r12,r5,8
 4000658:	22c00204 	addi	r11,r4,8
 400065c:	84000504 	addi	r16,r16,20
 4000660:	2a800304 	addi	r10,r5,12
 4000664:	22400304 	addi	r9,r4,12
 4000668:	2c21883a 	add	r16,r5,r16
 400066c:	2811883a 	mov	r8,r5
 4000670:	200f883a 	mov	r7,r4
 4000674:	41000017 	ldw	r4,0(r8)
 4000678:	1fc00017 	ldw	ra,0(r3)
 400067c:	63c00017 	ldw	r15,0(r12)
 4000680:	39000015 	stw	r4,0(r7)
 4000684:	53800017 	ldw	r14,0(r10)
 4000688:	6fc00015 	stw	ra,0(r13)
 400068c:	5bc00015 	stw	r15,0(r11)
 4000690:	4b800015 	stw	r14,0(r9)
 4000694:	18c00404 	addi	r3,r3,16
 4000698:	39c00404 	addi	r7,r7,16
 400069c:	42000404 	addi	r8,r8,16
 40006a0:	6b400404 	addi	r13,r13,16
 40006a4:	63000404 	addi	r12,r12,16
 40006a8:	5ac00404 	addi	r11,r11,16
 40006ac:	52800404 	addi	r10,r10,16
 40006b0:	4a400404 	addi	r9,r9,16
 40006b4:	1c3fef1e 	bne	r3,r16,4000674 <__alt_data_end+0xfc000674>
 40006b8:	89c00044 	addi	r7,r17,1
 40006bc:	380e913a 	slli	r7,r7,4
 40006c0:	310003cc 	andi	r4,r6,15
 40006c4:	02c000c4 	movi	r11,3
 40006c8:	11c7883a 	add	r3,r2,r7
 40006cc:	29cb883a 	add	r5,r5,r7
 40006d0:	5900212e 	bgeu	r11,r4,4000758 <memcpy+0x140>
 40006d4:	1813883a 	mov	r9,r3
 40006d8:	2811883a 	mov	r8,r5
 40006dc:	200f883a 	mov	r7,r4
 40006e0:	42800017 	ldw	r10,0(r8)
 40006e4:	4a400104 	addi	r9,r9,4
 40006e8:	39ffff04 	addi	r7,r7,-4
 40006ec:	4abfff15 	stw	r10,-4(r9)
 40006f0:	42000104 	addi	r8,r8,4
 40006f4:	59fffa36 	bltu	r11,r7,40006e0 <__alt_data_end+0xfc0006e0>
 40006f8:	213fff04 	addi	r4,r4,-4
 40006fc:	2008d0ba 	srli	r4,r4,2
 4000700:	318000cc 	andi	r6,r6,3
 4000704:	21000044 	addi	r4,r4,1
 4000708:	2109883a 	add	r4,r4,r4
 400070c:	2109883a 	add	r4,r4,r4
 4000710:	1907883a 	add	r3,r3,r4
 4000714:	290b883a 	add	r5,r5,r4
 4000718:	30000626 	beq	r6,zero,4000734 <memcpy+0x11c>
 400071c:	198d883a 	add	r6,r3,r6
 4000720:	29c00003 	ldbu	r7,0(r5)
 4000724:	18c00044 	addi	r3,r3,1
 4000728:	29400044 	addi	r5,r5,1
 400072c:	19ffffc5 	stb	r7,-1(r3)
 4000730:	19bffb1e 	bne	r3,r6,4000720 <__alt_data_end+0xfc000720>
 4000734:	dfc00217 	ldw	ra,8(sp)
 4000738:	dc400117 	ldw	r17,4(sp)
 400073c:	dc000017 	ldw	r16,0(sp)
 4000740:	dec00304 	addi	sp,sp,12
 4000744:	f800283a 	ret
 4000748:	2007883a 	mov	r3,r4
 400074c:	003ff206 	br	4000718 <__alt_data_end+0xfc000718>
 4000750:	2007883a 	mov	r3,r4
 4000754:	003ff106 	br	400071c <__alt_data_end+0xfc00071c>
 4000758:	200d883a 	mov	r6,r4
 400075c:	003fee06 	br	4000718 <__alt_data_end+0xfc000718>

04000760 <memset>:
 4000760:	20c000cc 	andi	r3,r4,3
 4000764:	2005883a 	mov	r2,r4
 4000768:	18004426 	beq	r3,zero,400087c <memset+0x11c>
 400076c:	31ffffc4 	addi	r7,r6,-1
 4000770:	30004026 	beq	r6,zero,4000874 <memset+0x114>
 4000774:	2813883a 	mov	r9,r5
 4000778:	200d883a 	mov	r6,r4
 400077c:	2007883a 	mov	r3,r4
 4000780:	00000406 	br	4000794 <memset+0x34>
 4000784:	3a3fffc4 	addi	r8,r7,-1
 4000788:	31800044 	addi	r6,r6,1
 400078c:	38003926 	beq	r7,zero,4000874 <memset+0x114>
 4000790:	400f883a 	mov	r7,r8
 4000794:	18c00044 	addi	r3,r3,1
 4000798:	32400005 	stb	r9,0(r6)
 400079c:	1a0000cc 	andi	r8,r3,3
 40007a0:	403ff81e 	bne	r8,zero,4000784 <__alt_data_end+0xfc000784>
 40007a4:	010000c4 	movi	r4,3
 40007a8:	21c02d2e 	bgeu	r4,r7,4000860 <memset+0x100>
 40007ac:	29003fcc 	andi	r4,r5,255
 40007b0:	200c923a 	slli	r6,r4,8
 40007b4:	3108b03a 	or	r4,r6,r4
 40007b8:	200c943a 	slli	r6,r4,16
 40007bc:	218cb03a 	or	r6,r4,r6
 40007c0:	010003c4 	movi	r4,15
 40007c4:	21c0182e 	bgeu	r4,r7,4000828 <memset+0xc8>
 40007c8:	3b3ffc04 	addi	r12,r7,-16
 40007cc:	6018d13a 	srli	r12,r12,4
 40007d0:	1a000104 	addi	r8,r3,4
 40007d4:	1ac00204 	addi	r11,r3,8
 40007d8:	6008913a 	slli	r4,r12,4
 40007dc:	1a800304 	addi	r10,r3,12
 40007e0:	1813883a 	mov	r9,r3
 40007e4:	21000504 	addi	r4,r4,20
 40007e8:	1909883a 	add	r4,r3,r4
 40007ec:	49800015 	stw	r6,0(r9)
 40007f0:	41800015 	stw	r6,0(r8)
 40007f4:	59800015 	stw	r6,0(r11)
 40007f8:	51800015 	stw	r6,0(r10)
 40007fc:	42000404 	addi	r8,r8,16
 4000800:	4a400404 	addi	r9,r9,16
 4000804:	5ac00404 	addi	r11,r11,16
 4000808:	52800404 	addi	r10,r10,16
 400080c:	413ff71e 	bne	r8,r4,40007ec <__alt_data_end+0xfc0007ec>
 4000810:	63000044 	addi	r12,r12,1
 4000814:	6018913a 	slli	r12,r12,4
 4000818:	39c003cc 	andi	r7,r7,15
 400081c:	010000c4 	movi	r4,3
 4000820:	1b07883a 	add	r3,r3,r12
 4000824:	21c00e2e 	bgeu	r4,r7,4000860 <memset+0x100>
 4000828:	1813883a 	mov	r9,r3
 400082c:	3811883a 	mov	r8,r7
 4000830:	010000c4 	movi	r4,3
 4000834:	49800015 	stw	r6,0(r9)
 4000838:	423fff04 	addi	r8,r8,-4
 400083c:	4a400104 	addi	r9,r9,4
 4000840:	223ffc36 	bltu	r4,r8,4000834 <__alt_data_end+0xfc000834>
 4000844:	393fff04 	addi	r4,r7,-4
 4000848:	2008d0ba 	srli	r4,r4,2
 400084c:	39c000cc 	andi	r7,r7,3
 4000850:	21000044 	addi	r4,r4,1
 4000854:	2109883a 	add	r4,r4,r4
 4000858:	2109883a 	add	r4,r4,r4
 400085c:	1907883a 	add	r3,r3,r4
 4000860:	38000526 	beq	r7,zero,4000878 <memset+0x118>
 4000864:	19cf883a 	add	r7,r3,r7
 4000868:	19400005 	stb	r5,0(r3)
 400086c:	18c00044 	addi	r3,r3,1
 4000870:	38fffd1e 	bne	r7,r3,4000868 <__alt_data_end+0xfc000868>
 4000874:	f800283a 	ret
 4000878:	f800283a 	ret
 400087c:	2007883a 	mov	r3,r4
 4000880:	300f883a 	mov	r7,r6
 4000884:	003fc706 	br	40007a4 <__alt_data_end+0xfc0007a4>

04000888 <_puts_r>:
 4000888:	defff604 	addi	sp,sp,-40
 400088c:	dc000715 	stw	r16,28(sp)
 4000890:	2021883a 	mov	r16,r4
 4000894:	2809883a 	mov	r4,r5
 4000898:	dc400815 	stw	r17,32(sp)
 400089c:	dfc00915 	stw	ra,36(sp)
 40008a0:	2823883a 	mov	r17,r5
 40008a4:	400095c0 	call	400095c <strlen>
 40008a8:	10c00044 	addi	r3,r2,1
 40008ac:	d8800115 	stw	r2,4(sp)
 40008b0:	00810034 	movhi	r2,1024
 40008b4:	109d1d04 	addi	r2,r2,29812
 40008b8:	d8800215 	stw	r2,8(sp)
 40008bc:	00800044 	movi	r2,1
 40008c0:	d8800315 	stw	r2,12(sp)
 40008c4:	00800084 	movi	r2,2
 40008c8:	dc400015 	stw	r17,0(sp)
 40008cc:	d8c00615 	stw	r3,24(sp)
 40008d0:	dec00415 	stw	sp,16(sp)
 40008d4:	d8800515 	stw	r2,20(sp)
 40008d8:	80000226 	beq	r16,zero,40008e4 <_puts_r+0x5c>
 40008dc:	80800e17 	ldw	r2,56(r16)
 40008e0:	10001426 	beq	r2,zero,4000934 <_puts_r+0xac>
 40008e4:	81400217 	ldw	r5,8(r16)
 40008e8:	2880030b 	ldhu	r2,12(r5)
 40008ec:	10c8000c 	andi	r3,r2,8192
 40008f0:	1800061e 	bne	r3,zero,400090c <_puts_r+0x84>
 40008f4:	29001917 	ldw	r4,100(r5)
 40008f8:	00f7ffc4 	movi	r3,-8193
 40008fc:	10880014 	ori	r2,r2,8192
 4000900:	20c6703a 	and	r3,r4,r3
 4000904:	2880030d 	sth	r2,12(r5)
 4000908:	28c01915 	stw	r3,100(r5)
 400090c:	d9800404 	addi	r6,sp,16
 4000910:	8009883a 	mov	r4,r16
 4000914:	4000ef00 	call	4000ef0 <__sfvwrite_r>
 4000918:	1000091e 	bne	r2,zero,4000940 <_puts_r+0xb8>
 400091c:	00800284 	movi	r2,10
 4000920:	dfc00917 	ldw	ra,36(sp)
 4000924:	dc400817 	ldw	r17,32(sp)
 4000928:	dc000717 	ldw	r16,28(sp)
 400092c:	dec00a04 	addi	sp,sp,40
 4000930:	f800283a 	ret
 4000934:	8009883a 	mov	r4,r16
 4000938:	4000ea00 	call	4000ea0 <__sinit>
 400093c:	003fe906 	br	40008e4 <__alt_data_end+0xfc0008e4>
 4000940:	00bfffc4 	movi	r2,-1
 4000944:	003ff606 	br	4000920 <__alt_data_end+0xfc000920>

04000948 <puts>:
 4000948:	00810074 	movhi	r2,1025
 400094c:	10a41e04 	addi	r2,r2,-28552
 4000950:	200b883a 	mov	r5,r4
 4000954:	11000017 	ldw	r4,0(r2)
 4000958:	40008881 	jmpi	4000888 <_puts_r>

0400095c <strlen>:
 400095c:	208000cc 	andi	r2,r4,3
 4000960:	10002026 	beq	r2,zero,40009e4 <strlen+0x88>
 4000964:	20800007 	ldb	r2,0(r4)
 4000968:	10002026 	beq	r2,zero,40009ec <strlen+0x90>
 400096c:	2005883a 	mov	r2,r4
 4000970:	00000206 	br	400097c <strlen+0x20>
 4000974:	10c00007 	ldb	r3,0(r2)
 4000978:	18001826 	beq	r3,zero,40009dc <strlen+0x80>
 400097c:	10800044 	addi	r2,r2,1
 4000980:	10c000cc 	andi	r3,r2,3
 4000984:	183ffb1e 	bne	r3,zero,4000974 <__alt_data_end+0xfc000974>
 4000988:	10c00017 	ldw	r3,0(r2)
 400098c:	01ffbff4 	movhi	r7,65279
 4000990:	39ffbfc4 	addi	r7,r7,-257
 4000994:	00ca303a 	nor	r5,zero,r3
 4000998:	01a02074 	movhi	r6,32897
 400099c:	19c7883a 	add	r3,r3,r7
 40009a0:	31a02004 	addi	r6,r6,-32640
 40009a4:	1946703a 	and	r3,r3,r5
 40009a8:	1986703a 	and	r3,r3,r6
 40009ac:	1800091e 	bne	r3,zero,40009d4 <strlen+0x78>
 40009b0:	10800104 	addi	r2,r2,4
 40009b4:	10c00017 	ldw	r3,0(r2)
 40009b8:	19cb883a 	add	r5,r3,r7
 40009bc:	00c6303a 	nor	r3,zero,r3
 40009c0:	28c6703a 	and	r3,r5,r3
 40009c4:	1986703a 	and	r3,r3,r6
 40009c8:	183ff926 	beq	r3,zero,40009b0 <__alt_data_end+0xfc0009b0>
 40009cc:	00000106 	br	40009d4 <strlen+0x78>
 40009d0:	10800044 	addi	r2,r2,1
 40009d4:	10c00007 	ldb	r3,0(r2)
 40009d8:	183ffd1e 	bne	r3,zero,40009d0 <__alt_data_end+0xfc0009d0>
 40009dc:	1105c83a 	sub	r2,r2,r4
 40009e0:	f800283a 	ret
 40009e4:	2005883a 	mov	r2,r4
 40009e8:	003fe706 	br	4000988 <__alt_data_end+0xfc000988>
 40009ec:	0005883a 	mov	r2,zero
 40009f0:	f800283a 	ret

040009f4 <__utoa>:
 40009f4:	008cccb4 	movhi	r2,13106
 40009f8:	defff004 	addi	sp,sp,-64
 40009fc:	108c4c04 	addi	r2,r2,12592
 4000a00:	d8800015 	stw	r2,0(sp)
 4000a04:	008dcdb4 	movhi	r2,14134
 4000a08:	108d4d04 	addi	r2,r2,13620
 4000a0c:	d8800115 	stw	r2,4(sp)
 4000a10:	00989874 	movhi	r2,25185
 4000a14:	108e4e04 	addi	r2,r2,14648
 4000a18:	d8800215 	stw	r2,8(sp)
 4000a1c:	00999974 	movhi	r2,26213
 4000a20:	109918c4 	addi	r2,r2,25699
 4000a24:	d8800315 	stw	r2,12(sp)
 4000a28:	009a9a74 	movhi	r2,27241
 4000a2c:	109a19c4 	addi	r2,r2,26727
 4000a30:	d8800415 	stw	r2,16(sp)
 4000a34:	009b9b74 	movhi	r2,28269
 4000a38:	109b1ac4 	addi	r2,r2,27755
 4000a3c:	d8800515 	stw	r2,20(sp)
 4000a40:	009c9c74 	movhi	r2,29297
 4000a44:	109c1bc4 	addi	r2,r2,28783
 4000a48:	d8800615 	stw	r2,24(sp)
 4000a4c:	009d9d74 	movhi	r2,30325
 4000a50:	109d1cc4 	addi	r2,r2,29811
 4000a54:	d8800715 	stw	r2,28(sp)
 4000a58:	009e9e74 	movhi	r2,31353
 4000a5c:	109e1dc4 	addi	r2,r2,30839
 4000a60:	dd000e15 	stw	r20,56(sp)
 4000a64:	d8800815 	stw	r2,32(sp)
 4000a68:	dfc00f15 	stw	ra,60(sp)
 4000a6c:	dcc00d15 	stw	r19,52(sp)
 4000a70:	dc800c15 	stw	r18,48(sp)
 4000a74:	dc400b15 	stw	r17,44(sp)
 4000a78:	dc000a15 	stw	r16,40(sp)
 4000a7c:	d8000905 	stb	zero,36(sp)
 4000a80:	30bfff84 	addi	r2,r6,-2
 4000a84:	00c00884 	movi	r3,34
 4000a88:	2829883a 	mov	r20,r5
 4000a8c:	18802c36 	bltu	r3,r2,4000b40 <__utoa+0x14c>
 4000a90:	3027883a 	mov	r19,r6
 4000a94:	2023883a 	mov	r17,r4
 4000a98:	2825883a 	mov	r18,r5
 4000a9c:	0021883a 	mov	r16,zero
 4000aa0:	00000106 	br	4000aa8 <__utoa+0xb4>
 4000aa4:	1821883a 	mov	r16,r3
 4000aa8:	8809883a 	mov	r4,r17
 4000aac:	980b883a 	mov	r5,r19
 4000ab0:	40034e40 	call	40034e4 <__umodsi3>
 4000ab4:	d885883a 	add	r2,sp,r2
 4000ab8:	10800003 	ldbu	r2,0(r2)
 4000abc:	8809883a 	mov	r4,r17
 4000ac0:	980b883a 	mov	r5,r19
 4000ac4:	90800005 	stb	r2,0(r18)
 4000ac8:	40034800 	call	4003480 <__udivsi3>
 4000acc:	1023883a 	mov	r17,r2
 4000ad0:	80c00044 	addi	r3,r16,1
 4000ad4:	94800044 	addi	r18,r18,1
 4000ad8:	103ff21e 	bne	r2,zero,4000aa4 <__alt_data_end+0xfc000aa4>
 4000adc:	a0c7883a 	add	r3,r20,r3
 4000ae0:	18000005 	stb	zero,0(r3)
 4000ae4:	80000d26 	beq	r16,zero,4000b1c <__utoa+0x128>
 4000ae8:	01c00044 	movi	r7,1
 4000aec:	a409883a 	add	r4,r20,r16
 4000af0:	a007883a 	mov	r3,r20
 4000af4:	3d0fc83a 	sub	r7,r7,r20
 4000af8:	21800003 	ldbu	r6,0(r4)
 4000afc:	19400003 	ldbu	r5,0(r3)
 4000b00:	38c5883a 	add	r2,r7,r3
 4000b04:	19800005 	stb	r6,0(r3)
 4000b08:	21400005 	stb	r5,0(r4)
 4000b0c:	843fffc4 	addi	r16,r16,-1
 4000b10:	18c00044 	addi	r3,r3,1
 4000b14:	213fffc4 	addi	r4,r4,-1
 4000b18:	143ff716 	blt	r2,r16,4000af8 <__alt_data_end+0xfc000af8>
 4000b1c:	a005883a 	mov	r2,r20
 4000b20:	dfc00f17 	ldw	ra,60(sp)
 4000b24:	dd000e17 	ldw	r20,56(sp)
 4000b28:	dcc00d17 	ldw	r19,52(sp)
 4000b2c:	dc800c17 	ldw	r18,48(sp)
 4000b30:	dc400b17 	ldw	r17,44(sp)
 4000b34:	dc000a17 	ldw	r16,40(sp)
 4000b38:	dec01004 	addi	sp,sp,64
 4000b3c:	f800283a 	ret
 4000b40:	28000005 	stb	zero,0(r5)
 4000b44:	0005883a 	mov	r2,zero
 4000b48:	003ff506 	br	4000b20 <__alt_data_end+0xfc000b20>

04000b4c <utoa>:
 4000b4c:	40009f41 	jmpi	40009f4 <__utoa>

04000b50 <__fp_unlock>:
 4000b50:	0005883a 	mov	r2,zero
 4000b54:	f800283a 	ret

04000b58 <_cleanup_r>:
 4000b58:	01410034 	movhi	r5,1024
 4000b5c:	294a1f04 	addi	r5,r5,10364
 4000b60:	40014701 	jmpi	4001470 <_fwalk_reent>

04000b64 <__sinit.part.1>:
 4000b64:	defff704 	addi	sp,sp,-36
 4000b68:	00c10034 	movhi	r3,1024
 4000b6c:	dfc00815 	stw	ra,32(sp)
 4000b70:	ddc00715 	stw	r23,28(sp)
 4000b74:	dd800615 	stw	r22,24(sp)
 4000b78:	dd400515 	stw	r21,20(sp)
 4000b7c:	dd000415 	stw	r20,16(sp)
 4000b80:	dcc00315 	stw	r19,12(sp)
 4000b84:	dc800215 	stw	r18,8(sp)
 4000b88:	dc400115 	stw	r17,4(sp)
 4000b8c:	dc000015 	stw	r16,0(sp)
 4000b90:	18c2d604 	addi	r3,r3,2904
 4000b94:	24000117 	ldw	r16,4(r4)
 4000b98:	20c00f15 	stw	r3,60(r4)
 4000b9c:	2080bb04 	addi	r2,r4,748
 4000ba0:	00c000c4 	movi	r3,3
 4000ba4:	20c0b915 	stw	r3,740(r4)
 4000ba8:	2080ba15 	stw	r2,744(r4)
 4000bac:	2000b815 	stw	zero,736(r4)
 4000bb0:	05c00204 	movi	r23,8
 4000bb4:	00800104 	movi	r2,4
 4000bb8:	2025883a 	mov	r18,r4
 4000bbc:	b80d883a 	mov	r6,r23
 4000bc0:	81001704 	addi	r4,r16,92
 4000bc4:	000b883a 	mov	r5,zero
 4000bc8:	80000015 	stw	zero,0(r16)
 4000bcc:	80000115 	stw	zero,4(r16)
 4000bd0:	80000215 	stw	zero,8(r16)
 4000bd4:	8080030d 	sth	r2,12(r16)
 4000bd8:	80001915 	stw	zero,100(r16)
 4000bdc:	8000038d 	sth	zero,14(r16)
 4000be0:	80000415 	stw	zero,16(r16)
 4000be4:	80000515 	stw	zero,20(r16)
 4000be8:	80000615 	stw	zero,24(r16)
 4000bec:	40007600 	call	4000760 <memset>
 4000bf0:	05810034 	movhi	r22,1024
 4000bf4:	94400217 	ldw	r17,8(r18)
 4000bf8:	05410034 	movhi	r21,1024
 4000bfc:	05010034 	movhi	r20,1024
 4000c00:	04c10034 	movhi	r19,1024
 4000c04:	b5894e04 	addi	r22,r22,9528
 4000c08:	ad496504 	addi	r21,r21,9620
 4000c0c:	a5098404 	addi	r20,r20,9744
 4000c10:	9cc99b04 	addi	r19,r19,9836
 4000c14:	85800815 	stw	r22,32(r16)
 4000c18:	85400915 	stw	r21,36(r16)
 4000c1c:	85000a15 	stw	r20,40(r16)
 4000c20:	84c00b15 	stw	r19,44(r16)
 4000c24:	84000715 	stw	r16,28(r16)
 4000c28:	00800284 	movi	r2,10
 4000c2c:	8880030d 	sth	r2,12(r17)
 4000c30:	00800044 	movi	r2,1
 4000c34:	b80d883a 	mov	r6,r23
 4000c38:	89001704 	addi	r4,r17,92
 4000c3c:	000b883a 	mov	r5,zero
 4000c40:	88000015 	stw	zero,0(r17)
 4000c44:	88000115 	stw	zero,4(r17)
 4000c48:	88000215 	stw	zero,8(r17)
 4000c4c:	88001915 	stw	zero,100(r17)
 4000c50:	8880038d 	sth	r2,14(r17)
 4000c54:	88000415 	stw	zero,16(r17)
 4000c58:	88000515 	stw	zero,20(r17)
 4000c5c:	88000615 	stw	zero,24(r17)
 4000c60:	40007600 	call	4000760 <memset>
 4000c64:	94000317 	ldw	r16,12(r18)
 4000c68:	00800484 	movi	r2,18
 4000c6c:	8c400715 	stw	r17,28(r17)
 4000c70:	8d800815 	stw	r22,32(r17)
 4000c74:	8d400915 	stw	r21,36(r17)
 4000c78:	8d000a15 	stw	r20,40(r17)
 4000c7c:	8cc00b15 	stw	r19,44(r17)
 4000c80:	8080030d 	sth	r2,12(r16)
 4000c84:	00800084 	movi	r2,2
 4000c88:	80000015 	stw	zero,0(r16)
 4000c8c:	80000115 	stw	zero,4(r16)
 4000c90:	80000215 	stw	zero,8(r16)
 4000c94:	80001915 	stw	zero,100(r16)
 4000c98:	8080038d 	sth	r2,14(r16)
 4000c9c:	80000415 	stw	zero,16(r16)
 4000ca0:	80000515 	stw	zero,20(r16)
 4000ca4:	80000615 	stw	zero,24(r16)
 4000ca8:	b80d883a 	mov	r6,r23
 4000cac:	000b883a 	mov	r5,zero
 4000cb0:	81001704 	addi	r4,r16,92
 4000cb4:	40007600 	call	4000760 <memset>
 4000cb8:	00800044 	movi	r2,1
 4000cbc:	84000715 	stw	r16,28(r16)
 4000cc0:	85800815 	stw	r22,32(r16)
 4000cc4:	85400915 	stw	r21,36(r16)
 4000cc8:	85000a15 	stw	r20,40(r16)
 4000ccc:	84c00b15 	stw	r19,44(r16)
 4000cd0:	90800e15 	stw	r2,56(r18)
 4000cd4:	dfc00817 	ldw	ra,32(sp)
 4000cd8:	ddc00717 	ldw	r23,28(sp)
 4000cdc:	dd800617 	ldw	r22,24(sp)
 4000ce0:	dd400517 	ldw	r21,20(sp)
 4000ce4:	dd000417 	ldw	r20,16(sp)
 4000ce8:	dcc00317 	ldw	r19,12(sp)
 4000cec:	dc800217 	ldw	r18,8(sp)
 4000cf0:	dc400117 	ldw	r17,4(sp)
 4000cf4:	dc000017 	ldw	r16,0(sp)
 4000cf8:	dec00904 	addi	sp,sp,36
 4000cfc:	f800283a 	ret

04000d00 <__fp_lock>:
 4000d00:	0005883a 	mov	r2,zero
 4000d04:	f800283a 	ret

04000d08 <__sfmoreglue>:
 4000d08:	defffc04 	addi	sp,sp,-16
 4000d0c:	dc400115 	stw	r17,4(sp)
 4000d10:	2c7fffc4 	addi	r17,r5,-1
 4000d14:	8c401a24 	muli	r17,r17,104
 4000d18:	dc800215 	stw	r18,8(sp)
 4000d1c:	2825883a 	mov	r18,r5
 4000d20:	89401d04 	addi	r5,r17,116
 4000d24:	dc000015 	stw	r16,0(sp)
 4000d28:	dfc00315 	stw	ra,12(sp)
 4000d2c:	40015340 	call	4001534 <_malloc_r>
 4000d30:	1021883a 	mov	r16,r2
 4000d34:	10000726 	beq	r2,zero,4000d54 <__sfmoreglue+0x4c>
 4000d38:	11000304 	addi	r4,r2,12
 4000d3c:	10000015 	stw	zero,0(r2)
 4000d40:	14800115 	stw	r18,4(r2)
 4000d44:	11000215 	stw	r4,8(r2)
 4000d48:	89801a04 	addi	r6,r17,104
 4000d4c:	000b883a 	mov	r5,zero
 4000d50:	40007600 	call	4000760 <memset>
 4000d54:	8005883a 	mov	r2,r16
 4000d58:	dfc00317 	ldw	ra,12(sp)
 4000d5c:	dc800217 	ldw	r18,8(sp)
 4000d60:	dc400117 	ldw	r17,4(sp)
 4000d64:	dc000017 	ldw	r16,0(sp)
 4000d68:	dec00404 	addi	sp,sp,16
 4000d6c:	f800283a 	ret

04000d70 <__sfp>:
 4000d70:	defffb04 	addi	sp,sp,-20
 4000d74:	dc000015 	stw	r16,0(sp)
 4000d78:	04010074 	movhi	r16,1025
 4000d7c:	84241d04 	addi	r16,r16,-28556
 4000d80:	dcc00315 	stw	r19,12(sp)
 4000d84:	2027883a 	mov	r19,r4
 4000d88:	81000017 	ldw	r4,0(r16)
 4000d8c:	dfc00415 	stw	ra,16(sp)
 4000d90:	dc800215 	stw	r18,8(sp)
 4000d94:	20800e17 	ldw	r2,56(r4)
 4000d98:	dc400115 	stw	r17,4(sp)
 4000d9c:	1000021e 	bne	r2,zero,4000da8 <__sfp+0x38>
 4000da0:	4000b640 	call	4000b64 <__sinit.part.1>
 4000da4:	81000017 	ldw	r4,0(r16)
 4000da8:	2480b804 	addi	r18,r4,736
 4000dac:	047fffc4 	movi	r17,-1
 4000db0:	91000117 	ldw	r4,4(r18)
 4000db4:	94000217 	ldw	r16,8(r18)
 4000db8:	213fffc4 	addi	r4,r4,-1
 4000dbc:	20000a16 	blt	r4,zero,4000de8 <__sfp+0x78>
 4000dc0:	8080030f 	ldh	r2,12(r16)
 4000dc4:	10000c26 	beq	r2,zero,4000df8 <__sfp+0x88>
 4000dc8:	80c01d04 	addi	r3,r16,116
 4000dcc:	00000206 	br	4000dd8 <__sfp+0x68>
 4000dd0:	18bfe60f 	ldh	r2,-104(r3)
 4000dd4:	10000826 	beq	r2,zero,4000df8 <__sfp+0x88>
 4000dd8:	213fffc4 	addi	r4,r4,-1
 4000ddc:	1c3ffd04 	addi	r16,r3,-12
 4000de0:	18c01a04 	addi	r3,r3,104
 4000de4:	247ffa1e 	bne	r4,r17,4000dd0 <__alt_data_end+0xfc000dd0>
 4000de8:	90800017 	ldw	r2,0(r18)
 4000dec:	10001d26 	beq	r2,zero,4000e64 <__sfp+0xf4>
 4000df0:	1025883a 	mov	r18,r2
 4000df4:	003fee06 	br	4000db0 <__alt_data_end+0xfc000db0>
 4000df8:	00bfffc4 	movi	r2,-1
 4000dfc:	8080038d 	sth	r2,14(r16)
 4000e00:	00800044 	movi	r2,1
 4000e04:	8080030d 	sth	r2,12(r16)
 4000e08:	80001915 	stw	zero,100(r16)
 4000e0c:	80000015 	stw	zero,0(r16)
 4000e10:	80000215 	stw	zero,8(r16)
 4000e14:	80000115 	stw	zero,4(r16)
 4000e18:	80000415 	stw	zero,16(r16)
 4000e1c:	80000515 	stw	zero,20(r16)
 4000e20:	80000615 	stw	zero,24(r16)
 4000e24:	01800204 	movi	r6,8
 4000e28:	000b883a 	mov	r5,zero
 4000e2c:	81001704 	addi	r4,r16,92
 4000e30:	40007600 	call	4000760 <memset>
 4000e34:	8005883a 	mov	r2,r16
 4000e38:	80000c15 	stw	zero,48(r16)
 4000e3c:	80000d15 	stw	zero,52(r16)
 4000e40:	80001115 	stw	zero,68(r16)
 4000e44:	80001215 	stw	zero,72(r16)
 4000e48:	dfc00417 	ldw	ra,16(sp)
 4000e4c:	dcc00317 	ldw	r19,12(sp)
 4000e50:	dc800217 	ldw	r18,8(sp)
 4000e54:	dc400117 	ldw	r17,4(sp)
 4000e58:	dc000017 	ldw	r16,0(sp)
 4000e5c:	dec00504 	addi	sp,sp,20
 4000e60:	f800283a 	ret
 4000e64:	01400104 	movi	r5,4
 4000e68:	9809883a 	mov	r4,r19
 4000e6c:	4000d080 	call	4000d08 <__sfmoreglue>
 4000e70:	90800015 	stw	r2,0(r18)
 4000e74:	103fde1e 	bne	r2,zero,4000df0 <__alt_data_end+0xfc000df0>
 4000e78:	00800304 	movi	r2,12
 4000e7c:	98800015 	stw	r2,0(r19)
 4000e80:	0005883a 	mov	r2,zero
 4000e84:	003ff006 	br	4000e48 <__alt_data_end+0xfc000e48>

04000e88 <_cleanup>:
 4000e88:	00810074 	movhi	r2,1025
 4000e8c:	10a41d04 	addi	r2,r2,-28556
 4000e90:	11000017 	ldw	r4,0(r2)
 4000e94:	01410034 	movhi	r5,1024
 4000e98:	294a1f04 	addi	r5,r5,10364
 4000e9c:	40014701 	jmpi	4001470 <_fwalk_reent>

04000ea0 <__sinit>:
 4000ea0:	20800e17 	ldw	r2,56(r4)
 4000ea4:	10000126 	beq	r2,zero,4000eac <__sinit+0xc>
 4000ea8:	f800283a 	ret
 4000eac:	4000b641 	jmpi	4000b64 <__sinit.part.1>

04000eb0 <__sfp_lock_acquire>:
 4000eb0:	f800283a 	ret

04000eb4 <__sfp_lock_release>:
 4000eb4:	f800283a 	ret

04000eb8 <__sinit_lock_acquire>:
 4000eb8:	f800283a 	ret

04000ebc <__sinit_lock_release>:
 4000ebc:	f800283a 	ret

04000ec0 <__fp_lock_all>:
 4000ec0:	00810074 	movhi	r2,1025
 4000ec4:	10a41e04 	addi	r2,r2,-28552
 4000ec8:	11000017 	ldw	r4,0(r2)
 4000ecc:	01410034 	movhi	r5,1024
 4000ed0:	29434004 	addi	r5,r5,3328
 4000ed4:	40013ac1 	jmpi	40013ac <_fwalk>

04000ed8 <__fp_unlock_all>:
 4000ed8:	00810074 	movhi	r2,1025
 4000edc:	10a41e04 	addi	r2,r2,-28552
 4000ee0:	11000017 	ldw	r4,0(r2)
 4000ee4:	01410034 	movhi	r5,1024
 4000ee8:	2942d404 	addi	r5,r5,2896
 4000eec:	40013ac1 	jmpi	40013ac <_fwalk>

04000ef0 <__sfvwrite_r>:
 4000ef0:	30800217 	ldw	r2,8(r6)
 4000ef4:	10006726 	beq	r2,zero,4001094 <__sfvwrite_r+0x1a4>
 4000ef8:	28c0030b 	ldhu	r3,12(r5)
 4000efc:	defff404 	addi	sp,sp,-48
 4000f00:	dd400715 	stw	r21,28(sp)
 4000f04:	dd000615 	stw	r20,24(sp)
 4000f08:	dc000215 	stw	r16,8(sp)
 4000f0c:	dfc00b15 	stw	ra,44(sp)
 4000f10:	df000a15 	stw	fp,40(sp)
 4000f14:	ddc00915 	stw	r23,36(sp)
 4000f18:	dd800815 	stw	r22,32(sp)
 4000f1c:	dcc00515 	stw	r19,20(sp)
 4000f20:	dc800415 	stw	r18,16(sp)
 4000f24:	dc400315 	stw	r17,12(sp)
 4000f28:	1880020c 	andi	r2,r3,8
 4000f2c:	2821883a 	mov	r16,r5
 4000f30:	202b883a 	mov	r21,r4
 4000f34:	3029883a 	mov	r20,r6
 4000f38:	10002726 	beq	r2,zero,4000fd8 <__sfvwrite_r+0xe8>
 4000f3c:	28800417 	ldw	r2,16(r5)
 4000f40:	10002526 	beq	r2,zero,4000fd8 <__sfvwrite_r+0xe8>
 4000f44:	1880008c 	andi	r2,r3,2
 4000f48:	a4400017 	ldw	r17,0(r20)
 4000f4c:	10002a26 	beq	r2,zero,4000ff8 <__sfvwrite_r+0x108>
 4000f50:	05a00034 	movhi	r22,32768
 4000f54:	0027883a 	mov	r19,zero
 4000f58:	0025883a 	mov	r18,zero
 4000f5c:	b5bf0004 	addi	r22,r22,-1024
 4000f60:	980d883a 	mov	r6,r19
 4000f64:	a809883a 	mov	r4,r21
 4000f68:	90004626 	beq	r18,zero,4001084 <__sfvwrite_r+0x194>
 4000f6c:	900f883a 	mov	r7,r18
 4000f70:	b480022e 	bgeu	r22,r18,4000f7c <__sfvwrite_r+0x8c>
 4000f74:	01e00034 	movhi	r7,32768
 4000f78:	39ff0004 	addi	r7,r7,-1024
 4000f7c:	80800917 	ldw	r2,36(r16)
 4000f80:	81400717 	ldw	r5,28(r16)
 4000f84:	103ee83a 	callr	r2
 4000f88:	0080570e 	bge	zero,r2,40010e8 <__sfvwrite_r+0x1f8>
 4000f8c:	a0c00217 	ldw	r3,8(r20)
 4000f90:	98a7883a 	add	r19,r19,r2
 4000f94:	90a5c83a 	sub	r18,r18,r2
 4000f98:	1885c83a 	sub	r2,r3,r2
 4000f9c:	a0800215 	stw	r2,8(r20)
 4000fa0:	103fef1e 	bne	r2,zero,4000f60 <__alt_data_end+0xfc000f60>
 4000fa4:	0005883a 	mov	r2,zero
 4000fa8:	dfc00b17 	ldw	ra,44(sp)
 4000fac:	df000a17 	ldw	fp,40(sp)
 4000fb0:	ddc00917 	ldw	r23,36(sp)
 4000fb4:	dd800817 	ldw	r22,32(sp)
 4000fb8:	dd400717 	ldw	r21,28(sp)
 4000fbc:	dd000617 	ldw	r20,24(sp)
 4000fc0:	dcc00517 	ldw	r19,20(sp)
 4000fc4:	dc800417 	ldw	r18,16(sp)
 4000fc8:	dc400317 	ldw	r17,12(sp)
 4000fcc:	dc000217 	ldw	r16,8(sp)
 4000fd0:	dec00c04 	addi	sp,sp,48
 4000fd4:	f800283a 	ret
 4000fd8:	800b883a 	mov	r5,r16
 4000fdc:	a809883a 	mov	r4,r21
 4000fe0:	40026d40 	call	40026d4 <__swsetup_r>
 4000fe4:	1000eb1e 	bne	r2,zero,4001394 <__sfvwrite_r+0x4a4>
 4000fe8:	80c0030b 	ldhu	r3,12(r16)
 4000fec:	a4400017 	ldw	r17,0(r20)
 4000ff0:	1880008c 	andi	r2,r3,2
 4000ff4:	103fd61e 	bne	r2,zero,4000f50 <__alt_data_end+0xfc000f50>
 4000ff8:	1880004c 	andi	r2,r3,1
 4000ffc:	10003f1e 	bne	r2,zero,40010fc <__sfvwrite_r+0x20c>
 4001000:	0039883a 	mov	fp,zero
 4001004:	0025883a 	mov	r18,zero
 4001008:	90001a26 	beq	r18,zero,4001074 <__sfvwrite_r+0x184>
 400100c:	1880800c 	andi	r2,r3,512
 4001010:	84c00217 	ldw	r19,8(r16)
 4001014:	10002126 	beq	r2,zero,400109c <__sfvwrite_r+0x1ac>
 4001018:	982f883a 	mov	r23,r19
 400101c:	94c09336 	bltu	r18,r19,400126c <__sfvwrite_r+0x37c>
 4001020:	1881200c 	andi	r2,r3,1152
 4001024:	10009e1e 	bne	r2,zero,40012a0 <__sfvwrite_r+0x3b0>
 4001028:	81000017 	ldw	r4,0(r16)
 400102c:	b80d883a 	mov	r6,r23
 4001030:	e00b883a 	mov	r5,fp
 4001034:	4001e240 	call	4001e24 <memmove>
 4001038:	80c00217 	ldw	r3,8(r16)
 400103c:	81000017 	ldw	r4,0(r16)
 4001040:	9005883a 	mov	r2,r18
 4001044:	1ce7c83a 	sub	r19,r3,r19
 4001048:	25cf883a 	add	r7,r4,r23
 400104c:	84c00215 	stw	r19,8(r16)
 4001050:	81c00015 	stw	r7,0(r16)
 4001054:	a0c00217 	ldw	r3,8(r20)
 4001058:	e0b9883a 	add	fp,fp,r2
 400105c:	90a5c83a 	sub	r18,r18,r2
 4001060:	18a7c83a 	sub	r19,r3,r2
 4001064:	a4c00215 	stw	r19,8(r20)
 4001068:	983fce26 	beq	r19,zero,4000fa4 <__alt_data_end+0xfc000fa4>
 400106c:	80c0030b 	ldhu	r3,12(r16)
 4001070:	903fe61e 	bne	r18,zero,400100c <__alt_data_end+0xfc00100c>
 4001074:	8f000017 	ldw	fp,0(r17)
 4001078:	8c800117 	ldw	r18,4(r17)
 400107c:	8c400204 	addi	r17,r17,8
 4001080:	003fe106 	br	4001008 <__alt_data_end+0xfc001008>
 4001084:	8cc00017 	ldw	r19,0(r17)
 4001088:	8c800117 	ldw	r18,4(r17)
 400108c:	8c400204 	addi	r17,r17,8
 4001090:	003fb306 	br	4000f60 <__alt_data_end+0xfc000f60>
 4001094:	0005883a 	mov	r2,zero
 4001098:	f800283a 	ret
 400109c:	81000017 	ldw	r4,0(r16)
 40010a0:	80800417 	ldw	r2,16(r16)
 40010a4:	11005736 	bltu	r2,r4,4001204 <__sfvwrite_r+0x314>
 40010a8:	85c00517 	ldw	r23,20(r16)
 40010ac:	95c05536 	bltu	r18,r23,4001204 <__sfvwrite_r+0x314>
 40010b0:	00a00034 	movhi	r2,32768
 40010b4:	10bfffc4 	addi	r2,r2,-1
 40010b8:	9009883a 	mov	r4,r18
 40010bc:	1480012e 	bgeu	r2,r18,40010c4 <__sfvwrite_r+0x1d4>
 40010c0:	1009883a 	mov	r4,r2
 40010c4:	b80b883a 	mov	r5,r23
 40010c8:	40033880 	call	4003388 <__divsi3>
 40010cc:	15cf383a 	mul	r7,r2,r23
 40010d0:	81400717 	ldw	r5,28(r16)
 40010d4:	80800917 	ldw	r2,36(r16)
 40010d8:	e00d883a 	mov	r6,fp
 40010dc:	a809883a 	mov	r4,r21
 40010e0:	103ee83a 	callr	r2
 40010e4:	00bfdb16 	blt	zero,r2,4001054 <__alt_data_end+0xfc001054>
 40010e8:	8080030b 	ldhu	r2,12(r16)
 40010ec:	10801014 	ori	r2,r2,64
 40010f0:	8080030d 	sth	r2,12(r16)
 40010f4:	00bfffc4 	movi	r2,-1
 40010f8:	003fab06 	br	4000fa8 <__alt_data_end+0xfc000fa8>
 40010fc:	0027883a 	mov	r19,zero
 4001100:	0011883a 	mov	r8,zero
 4001104:	0039883a 	mov	fp,zero
 4001108:	0025883a 	mov	r18,zero
 400110c:	90001f26 	beq	r18,zero,400118c <__sfvwrite_r+0x29c>
 4001110:	40005a26 	beq	r8,zero,400127c <__sfvwrite_r+0x38c>
 4001114:	982d883a 	mov	r22,r19
 4001118:	94c0012e 	bgeu	r18,r19,4001120 <__sfvwrite_r+0x230>
 400111c:	902d883a 	mov	r22,r18
 4001120:	81000017 	ldw	r4,0(r16)
 4001124:	80800417 	ldw	r2,16(r16)
 4001128:	b02f883a 	mov	r23,r22
 400112c:	81c00517 	ldw	r7,20(r16)
 4001130:	1100032e 	bgeu	r2,r4,4001140 <__sfvwrite_r+0x250>
 4001134:	80c00217 	ldw	r3,8(r16)
 4001138:	38c7883a 	add	r3,r7,r3
 400113c:	1d801816 	blt	r3,r22,40011a0 <__sfvwrite_r+0x2b0>
 4001140:	b1c03e16 	blt	r22,r7,400123c <__sfvwrite_r+0x34c>
 4001144:	80800917 	ldw	r2,36(r16)
 4001148:	81400717 	ldw	r5,28(r16)
 400114c:	e00d883a 	mov	r6,fp
 4001150:	da000115 	stw	r8,4(sp)
 4001154:	a809883a 	mov	r4,r21
 4001158:	103ee83a 	callr	r2
 400115c:	102f883a 	mov	r23,r2
 4001160:	da000117 	ldw	r8,4(sp)
 4001164:	00bfe00e 	bge	zero,r2,40010e8 <__alt_data_end+0xfc0010e8>
 4001168:	9de7c83a 	sub	r19,r19,r23
 400116c:	98001f26 	beq	r19,zero,40011ec <__sfvwrite_r+0x2fc>
 4001170:	a0800217 	ldw	r2,8(r20)
 4001174:	e5f9883a 	add	fp,fp,r23
 4001178:	95e5c83a 	sub	r18,r18,r23
 400117c:	15efc83a 	sub	r23,r2,r23
 4001180:	a5c00215 	stw	r23,8(r20)
 4001184:	b83f8726 	beq	r23,zero,4000fa4 <__alt_data_end+0xfc000fa4>
 4001188:	903fe11e 	bne	r18,zero,4001110 <__alt_data_end+0xfc001110>
 400118c:	8f000017 	ldw	fp,0(r17)
 4001190:	8c800117 	ldw	r18,4(r17)
 4001194:	0011883a 	mov	r8,zero
 4001198:	8c400204 	addi	r17,r17,8
 400119c:	003fdb06 	br	400110c <__alt_data_end+0xfc00110c>
 40011a0:	180d883a 	mov	r6,r3
 40011a4:	e00b883a 	mov	r5,fp
 40011a8:	da000115 	stw	r8,4(sp)
 40011ac:	d8c00015 	stw	r3,0(sp)
 40011b0:	4001e240 	call	4001e24 <memmove>
 40011b4:	d8c00017 	ldw	r3,0(sp)
 40011b8:	80800017 	ldw	r2,0(r16)
 40011bc:	800b883a 	mov	r5,r16
 40011c0:	a809883a 	mov	r4,r21
 40011c4:	10c5883a 	add	r2,r2,r3
 40011c8:	80800015 	stw	r2,0(r16)
 40011cc:	d8c00015 	stw	r3,0(sp)
 40011d0:	4002b9c0 	call	4002b9c <_fflush_r>
 40011d4:	d8c00017 	ldw	r3,0(sp)
 40011d8:	da000117 	ldw	r8,4(sp)
 40011dc:	103fc21e 	bne	r2,zero,40010e8 <__alt_data_end+0xfc0010e8>
 40011e0:	182f883a 	mov	r23,r3
 40011e4:	9de7c83a 	sub	r19,r19,r23
 40011e8:	983fe11e 	bne	r19,zero,4001170 <__alt_data_end+0xfc001170>
 40011ec:	800b883a 	mov	r5,r16
 40011f0:	a809883a 	mov	r4,r21
 40011f4:	4002b9c0 	call	4002b9c <_fflush_r>
 40011f8:	103fbb1e 	bne	r2,zero,40010e8 <__alt_data_end+0xfc0010e8>
 40011fc:	0011883a 	mov	r8,zero
 4001200:	003fdb06 	br	4001170 <__alt_data_end+0xfc001170>
 4001204:	94c0012e 	bgeu	r18,r19,400120c <__sfvwrite_r+0x31c>
 4001208:	9027883a 	mov	r19,r18
 400120c:	980d883a 	mov	r6,r19
 4001210:	e00b883a 	mov	r5,fp
 4001214:	4001e240 	call	4001e24 <memmove>
 4001218:	80800217 	ldw	r2,8(r16)
 400121c:	80c00017 	ldw	r3,0(r16)
 4001220:	14c5c83a 	sub	r2,r2,r19
 4001224:	1cc7883a 	add	r3,r3,r19
 4001228:	80800215 	stw	r2,8(r16)
 400122c:	80c00015 	stw	r3,0(r16)
 4001230:	10004326 	beq	r2,zero,4001340 <__sfvwrite_r+0x450>
 4001234:	9805883a 	mov	r2,r19
 4001238:	003f8606 	br	4001054 <__alt_data_end+0xfc001054>
 400123c:	b00d883a 	mov	r6,r22
 4001240:	e00b883a 	mov	r5,fp
 4001244:	da000115 	stw	r8,4(sp)
 4001248:	4001e240 	call	4001e24 <memmove>
 400124c:	80800217 	ldw	r2,8(r16)
 4001250:	80c00017 	ldw	r3,0(r16)
 4001254:	da000117 	ldw	r8,4(sp)
 4001258:	1585c83a 	sub	r2,r2,r22
 400125c:	1dad883a 	add	r22,r3,r22
 4001260:	80800215 	stw	r2,8(r16)
 4001264:	85800015 	stw	r22,0(r16)
 4001268:	003fbf06 	br	4001168 <__alt_data_end+0xfc001168>
 400126c:	81000017 	ldw	r4,0(r16)
 4001270:	9027883a 	mov	r19,r18
 4001274:	902f883a 	mov	r23,r18
 4001278:	003f6c06 	br	400102c <__alt_data_end+0xfc00102c>
 400127c:	900d883a 	mov	r6,r18
 4001280:	01400284 	movi	r5,10
 4001284:	e009883a 	mov	r4,fp
 4001288:	4001d400 	call	4001d40 <memchr>
 400128c:	10003e26 	beq	r2,zero,4001388 <__sfvwrite_r+0x498>
 4001290:	10800044 	addi	r2,r2,1
 4001294:	1727c83a 	sub	r19,r2,fp
 4001298:	02000044 	movi	r8,1
 400129c:	003f9d06 	br	4001114 <__alt_data_end+0xfc001114>
 40012a0:	80800517 	ldw	r2,20(r16)
 40012a4:	81400417 	ldw	r5,16(r16)
 40012a8:	81c00017 	ldw	r7,0(r16)
 40012ac:	10a7883a 	add	r19,r2,r2
 40012b0:	9885883a 	add	r2,r19,r2
 40012b4:	1026d7fa 	srli	r19,r2,31
 40012b8:	396dc83a 	sub	r22,r7,r5
 40012bc:	b1000044 	addi	r4,r22,1
 40012c0:	9885883a 	add	r2,r19,r2
 40012c4:	1027d07a 	srai	r19,r2,1
 40012c8:	2485883a 	add	r2,r4,r18
 40012cc:	980d883a 	mov	r6,r19
 40012d0:	9880022e 	bgeu	r19,r2,40012dc <__sfvwrite_r+0x3ec>
 40012d4:	1027883a 	mov	r19,r2
 40012d8:	100d883a 	mov	r6,r2
 40012dc:	18c1000c 	andi	r3,r3,1024
 40012e0:	18001c26 	beq	r3,zero,4001354 <__sfvwrite_r+0x464>
 40012e4:	300b883a 	mov	r5,r6
 40012e8:	a809883a 	mov	r4,r21
 40012ec:	40015340 	call	4001534 <_malloc_r>
 40012f0:	102f883a 	mov	r23,r2
 40012f4:	10002926 	beq	r2,zero,400139c <__sfvwrite_r+0x4ac>
 40012f8:	81400417 	ldw	r5,16(r16)
 40012fc:	b00d883a 	mov	r6,r22
 4001300:	1009883a 	mov	r4,r2
 4001304:	40006180 	call	4000618 <memcpy>
 4001308:	8080030b 	ldhu	r2,12(r16)
 400130c:	00fedfc4 	movi	r3,-1153
 4001310:	10c4703a 	and	r2,r2,r3
 4001314:	10802014 	ori	r2,r2,128
 4001318:	8080030d 	sth	r2,12(r16)
 400131c:	bd89883a 	add	r4,r23,r22
 4001320:	9d8fc83a 	sub	r7,r19,r22
 4001324:	85c00415 	stw	r23,16(r16)
 4001328:	84c00515 	stw	r19,20(r16)
 400132c:	81000015 	stw	r4,0(r16)
 4001330:	9027883a 	mov	r19,r18
 4001334:	81c00215 	stw	r7,8(r16)
 4001338:	902f883a 	mov	r23,r18
 400133c:	003f3b06 	br	400102c <__alt_data_end+0xfc00102c>
 4001340:	800b883a 	mov	r5,r16
 4001344:	a809883a 	mov	r4,r21
 4001348:	4002b9c0 	call	4002b9c <_fflush_r>
 400134c:	103fb926 	beq	r2,zero,4001234 <__alt_data_end+0xfc001234>
 4001350:	003f6506 	br	40010e8 <__alt_data_end+0xfc0010e8>
 4001354:	a809883a 	mov	r4,r21
 4001358:	4001f800 	call	4001f80 <_realloc_r>
 400135c:	102f883a 	mov	r23,r2
 4001360:	103fee1e 	bne	r2,zero,400131c <__alt_data_end+0xfc00131c>
 4001364:	81400417 	ldw	r5,16(r16)
 4001368:	a809883a 	mov	r4,r21
 400136c:	4002d4c0 	call	4002d4c <_free_r>
 4001370:	8080030b 	ldhu	r2,12(r16)
 4001374:	00ffdfc4 	movi	r3,-129
 4001378:	1884703a 	and	r2,r3,r2
 400137c:	00c00304 	movi	r3,12
 4001380:	a8c00015 	stw	r3,0(r21)
 4001384:	003f5906 	br	40010ec <__alt_data_end+0xfc0010ec>
 4001388:	94c00044 	addi	r19,r18,1
 400138c:	02000044 	movi	r8,1
 4001390:	003f6006 	br	4001114 <__alt_data_end+0xfc001114>
 4001394:	00bfffc4 	movi	r2,-1
 4001398:	003f0306 	br	4000fa8 <__alt_data_end+0xfc000fa8>
 400139c:	00800304 	movi	r2,12
 40013a0:	a8800015 	stw	r2,0(r21)
 40013a4:	8080030b 	ldhu	r2,12(r16)
 40013a8:	003f5006 	br	40010ec <__alt_data_end+0xfc0010ec>

040013ac <_fwalk>:
 40013ac:	defff704 	addi	sp,sp,-36
 40013b0:	dd000415 	stw	r20,16(sp)
 40013b4:	dfc00815 	stw	ra,32(sp)
 40013b8:	ddc00715 	stw	r23,28(sp)
 40013bc:	dd800615 	stw	r22,24(sp)
 40013c0:	dd400515 	stw	r21,20(sp)
 40013c4:	dcc00315 	stw	r19,12(sp)
 40013c8:	dc800215 	stw	r18,8(sp)
 40013cc:	dc400115 	stw	r17,4(sp)
 40013d0:	dc000015 	stw	r16,0(sp)
 40013d4:	2500b804 	addi	r20,r4,736
 40013d8:	a0002326 	beq	r20,zero,4001468 <_fwalk+0xbc>
 40013dc:	282b883a 	mov	r21,r5
 40013e0:	002f883a 	mov	r23,zero
 40013e4:	05800044 	movi	r22,1
 40013e8:	04ffffc4 	movi	r19,-1
 40013ec:	a4400117 	ldw	r17,4(r20)
 40013f0:	a4800217 	ldw	r18,8(r20)
 40013f4:	8c7fffc4 	addi	r17,r17,-1
 40013f8:	88000d16 	blt	r17,zero,4001430 <_fwalk+0x84>
 40013fc:	94000304 	addi	r16,r18,12
 4001400:	94800384 	addi	r18,r18,14
 4001404:	8080000b 	ldhu	r2,0(r16)
 4001408:	8c7fffc4 	addi	r17,r17,-1
 400140c:	813ffd04 	addi	r4,r16,-12
 4001410:	b080042e 	bgeu	r22,r2,4001424 <_fwalk+0x78>
 4001414:	9080000f 	ldh	r2,0(r18)
 4001418:	14c00226 	beq	r2,r19,4001424 <_fwalk+0x78>
 400141c:	a83ee83a 	callr	r21
 4001420:	b8aeb03a 	or	r23,r23,r2
 4001424:	84001a04 	addi	r16,r16,104
 4001428:	94801a04 	addi	r18,r18,104
 400142c:	8cfff51e 	bne	r17,r19,4001404 <__alt_data_end+0xfc001404>
 4001430:	a5000017 	ldw	r20,0(r20)
 4001434:	a03fed1e 	bne	r20,zero,40013ec <__alt_data_end+0xfc0013ec>
 4001438:	b805883a 	mov	r2,r23
 400143c:	dfc00817 	ldw	ra,32(sp)
 4001440:	ddc00717 	ldw	r23,28(sp)
 4001444:	dd800617 	ldw	r22,24(sp)
 4001448:	dd400517 	ldw	r21,20(sp)
 400144c:	dd000417 	ldw	r20,16(sp)
 4001450:	dcc00317 	ldw	r19,12(sp)
 4001454:	dc800217 	ldw	r18,8(sp)
 4001458:	dc400117 	ldw	r17,4(sp)
 400145c:	dc000017 	ldw	r16,0(sp)
 4001460:	dec00904 	addi	sp,sp,36
 4001464:	f800283a 	ret
 4001468:	002f883a 	mov	r23,zero
 400146c:	003ff206 	br	4001438 <__alt_data_end+0xfc001438>

04001470 <_fwalk_reent>:
 4001470:	defff704 	addi	sp,sp,-36
 4001474:	dd000415 	stw	r20,16(sp)
 4001478:	dfc00815 	stw	ra,32(sp)
 400147c:	ddc00715 	stw	r23,28(sp)
 4001480:	dd800615 	stw	r22,24(sp)
 4001484:	dd400515 	stw	r21,20(sp)
 4001488:	dcc00315 	stw	r19,12(sp)
 400148c:	dc800215 	stw	r18,8(sp)
 4001490:	dc400115 	stw	r17,4(sp)
 4001494:	dc000015 	stw	r16,0(sp)
 4001498:	2500b804 	addi	r20,r4,736
 400149c:	a0002326 	beq	r20,zero,400152c <_fwalk_reent+0xbc>
 40014a0:	282b883a 	mov	r21,r5
 40014a4:	2027883a 	mov	r19,r4
 40014a8:	002f883a 	mov	r23,zero
 40014ac:	05800044 	movi	r22,1
 40014b0:	04bfffc4 	movi	r18,-1
 40014b4:	a4400117 	ldw	r17,4(r20)
 40014b8:	a4000217 	ldw	r16,8(r20)
 40014bc:	8c7fffc4 	addi	r17,r17,-1
 40014c0:	88000c16 	blt	r17,zero,40014f4 <_fwalk_reent+0x84>
 40014c4:	84000304 	addi	r16,r16,12
 40014c8:	8080000b 	ldhu	r2,0(r16)
 40014cc:	8c7fffc4 	addi	r17,r17,-1
 40014d0:	817ffd04 	addi	r5,r16,-12
 40014d4:	b080052e 	bgeu	r22,r2,40014ec <_fwalk_reent+0x7c>
 40014d8:	8080008f 	ldh	r2,2(r16)
 40014dc:	9809883a 	mov	r4,r19
 40014e0:	14800226 	beq	r2,r18,40014ec <_fwalk_reent+0x7c>
 40014e4:	a83ee83a 	callr	r21
 40014e8:	b8aeb03a 	or	r23,r23,r2
 40014ec:	84001a04 	addi	r16,r16,104
 40014f0:	8cbff51e 	bne	r17,r18,40014c8 <__alt_data_end+0xfc0014c8>
 40014f4:	a5000017 	ldw	r20,0(r20)
 40014f8:	a03fee1e 	bne	r20,zero,40014b4 <__alt_data_end+0xfc0014b4>
 40014fc:	b805883a 	mov	r2,r23
 4001500:	dfc00817 	ldw	ra,32(sp)
 4001504:	ddc00717 	ldw	r23,28(sp)
 4001508:	dd800617 	ldw	r22,24(sp)
 400150c:	dd400517 	ldw	r21,20(sp)
 4001510:	dd000417 	ldw	r20,16(sp)
 4001514:	dcc00317 	ldw	r19,12(sp)
 4001518:	dc800217 	ldw	r18,8(sp)
 400151c:	dc400117 	ldw	r17,4(sp)
 4001520:	dc000017 	ldw	r16,0(sp)
 4001524:	dec00904 	addi	sp,sp,36
 4001528:	f800283a 	ret
 400152c:	002f883a 	mov	r23,zero
 4001530:	003ff206 	br	40014fc <__alt_data_end+0xfc0014fc>

04001534 <_malloc_r>:
 4001534:	defff504 	addi	sp,sp,-44
 4001538:	dc800315 	stw	r18,12(sp)
 400153c:	dfc00a15 	stw	ra,40(sp)
 4001540:	df000915 	stw	fp,36(sp)
 4001544:	ddc00815 	stw	r23,32(sp)
 4001548:	dd800715 	stw	r22,28(sp)
 400154c:	dd400615 	stw	r21,24(sp)
 4001550:	dd000515 	stw	r20,20(sp)
 4001554:	dcc00415 	stw	r19,16(sp)
 4001558:	dc400215 	stw	r17,8(sp)
 400155c:	dc000115 	stw	r16,4(sp)
 4001560:	288002c4 	addi	r2,r5,11
 4001564:	00c00584 	movi	r3,22
 4001568:	2025883a 	mov	r18,r4
 400156c:	18807f2e 	bgeu	r3,r2,400176c <_malloc_r+0x238>
 4001570:	047ffe04 	movi	r17,-8
 4001574:	1462703a 	and	r17,r2,r17
 4001578:	8800a316 	blt	r17,zero,4001808 <_malloc_r+0x2d4>
 400157c:	8940a236 	bltu	r17,r5,4001808 <_malloc_r+0x2d4>
 4001580:	4003ab80 	call	4003ab8 <__malloc_lock>
 4001584:	00807dc4 	movi	r2,503
 4001588:	1441e92e 	bgeu	r2,r17,4001d30 <_malloc_r+0x7fc>
 400158c:	8804d27a 	srli	r2,r17,9
 4001590:	1000a126 	beq	r2,zero,4001818 <_malloc_r+0x2e4>
 4001594:	00c00104 	movi	r3,4
 4001598:	18811e36 	bltu	r3,r2,4001a14 <_malloc_r+0x4e0>
 400159c:	8804d1ba 	srli	r2,r17,6
 40015a0:	12000e44 	addi	r8,r2,57
 40015a4:	11c00e04 	addi	r7,r2,56
 40015a8:	4209883a 	add	r4,r8,r8
 40015ac:	04c10034 	movhi	r19,1024
 40015b0:	2109883a 	add	r4,r4,r4
 40015b4:	9cde5604 	addi	r19,r19,31064
 40015b8:	2109883a 	add	r4,r4,r4
 40015bc:	9909883a 	add	r4,r19,r4
 40015c0:	24000117 	ldw	r16,4(r4)
 40015c4:	213ffe04 	addi	r4,r4,-8
 40015c8:	24009726 	beq	r4,r16,4001828 <_malloc_r+0x2f4>
 40015cc:	80800117 	ldw	r2,4(r16)
 40015d0:	01bfff04 	movi	r6,-4
 40015d4:	014003c4 	movi	r5,15
 40015d8:	1184703a 	and	r2,r2,r6
 40015dc:	1447c83a 	sub	r3,r2,r17
 40015e0:	28c00716 	blt	r5,r3,4001600 <_malloc_r+0xcc>
 40015e4:	1800920e 	bge	r3,zero,4001830 <_malloc_r+0x2fc>
 40015e8:	84000317 	ldw	r16,12(r16)
 40015ec:	24008e26 	beq	r4,r16,4001828 <_malloc_r+0x2f4>
 40015f0:	80800117 	ldw	r2,4(r16)
 40015f4:	1184703a 	and	r2,r2,r6
 40015f8:	1447c83a 	sub	r3,r2,r17
 40015fc:	28fff90e 	bge	r5,r3,40015e4 <__alt_data_end+0xfc0015e4>
 4001600:	3809883a 	mov	r4,r7
 4001604:	01810034 	movhi	r6,1024
 4001608:	9c000417 	ldw	r16,16(r19)
 400160c:	319e5604 	addi	r6,r6,31064
 4001610:	32000204 	addi	r8,r6,8
 4001614:	82013426 	beq	r16,r8,4001ae8 <_malloc_r+0x5b4>
 4001618:	80c00117 	ldw	r3,4(r16)
 400161c:	00bfff04 	movi	r2,-4
 4001620:	188e703a 	and	r7,r3,r2
 4001624:	3c45c83a 	sub	r2,r7,r17
 4001628:	00c003c4 	movi	r3,15
 400162c:	18811f16 	blt	r3,r2,4001aac <_malloc_r+0x578>
 4001630:	32000515 	stw	r8,20(r6)
 4001634:	32000415 	stw	r8,16(r6)
 4001638:	10007f0e 	bge	r2,zero,4001838 <_malloc_r+0x304>
 400163c:	00807fc4 	movi	r2,511
 4001640:	11c0fd36 	bltu	r2,r7,4001a38 <_malloc_r+0x504>
 4001644:	3806d0fa 	srli	r3,r7,3
 4001648:	01c00044 	movi	r7,1
 400164c:	30800117 	ldw	r2,4(r6)
 4001650:	19400044 	addi	r5,r3,1
 4001654:	294b883a 	add	r5,r5,r5
 4001658:	1807d0ba 	srai	r3,r3,2
 400165c:	294b883a 	add	r5,r5,r5
 4001660:	294b883a 	add	r5,r5,r5
 4001664:	298b883a 	add	r5,r5,r6
 4001668:	38c6983a 	sll	r3,r7,r3
 400166c:	29c00017 	ldw	r7,0(r5)
 4001670:	2a7ffe04 	addi	r9,r5,-8
 4001674:	1886b03a 	or	r3,r3,r2
 4001678:	82400315 	stw	r9,12(r16)
 400167c:	81c00215 	stw	r7,8(r16)
 4001680:	30c00115 	stw	r3,4(r6)
 4001684:	2c000015 	stw	r16,0(r5)
 4001688:	3c000315 	stw	r16,12(r7)
 400168c:	2005d0ba 	srai	r2,r4,2
 4001690:	01400044 	movi	r5,1
 4001694:	288a983a 	sll	r5,r5,r2
 4001698:	19406f36 	bltu	r3,r5,4001858 <_malloc_r+0x324>
 400169c:	28c4703a 	and	r2,r5,r3
 40016a0:	10000a1e 	bne	r2,zero,40016cc <_malloc_r+0x198>
 40016a4:	00bfff04 	movi	r2,-4
 40016a8:	294b883a 	add	r5,r5,r5
 40016ac:	2088703a 	and	r4,r4,r2
 40016b0:	28c4703a 	and	r2,r5,r3
 40016b4:	21000104 	addi	r4,r4,4
 40016b8:	1000041e 	bne	r2,zero,40016cc <_malloc_r+0x198>
 40016bc:	294b883a 	add	r5,r5,r5
 40016c0:	28c4703a 	and	r2,r5,r3
 40016c4:	21000104 	addi	r4,r4,4
 40016c8:	103ffc26 	beq	r2,zero,40016bc <__alt_data_end+0xfc0016bc>
 40016cc:	02bfff04 	movi	r10,-4
 40016d0:	024003c4 	movi	r9,15
 40016d4:	21800044 	addi	r6,r4,1
 40016d8:	318d883a 	add	r6,r6,r6
 40016dc:	318d883a 	add	r6,r6,r6
 40016e0:	318d883a 	add	r6,r6,r6
 40016e4:	998d883a 	add	r6,r19,r6
 40016e8:	333ffe04 	addi	r12,r6,-8
 40016ec:	2017883a 	mov	r11,r4
 40016f0:	31800104 	addi	r6,r6,4
 40016f4:	34000017 	ldw	r16,0(r6)
 40016f8:	31fffd04 	addi	r7,r6,-12
 40016fc:	81c0041e 	bne	r16,r7,4001710 <_malloc_r+0x1dc>
 4001700:	0000fb06 	br	4001af0 <_malloc_r+0x5bc>
 4001704:	1801030e 	bge	r3,zero,4001b14 <_malloc_r+0x5e0>
 4001708:	84000317 	ldw	r16,12(r16)
 400170c:	81c0f826 	beq	r16,r7,4001af0 <_malloc_r+0x5bc>
 4001710:	80800117 	ldw	r2,4(r16)
 4001714:	1284703a 	and	r2,r2,r10
 4001718:	1447c83a 	sub	r3,r2,r17
 400171c:	48fff90e 	bge	r9,r3,4001704 <__alt_data_end+0xfc001704>
 4001720:	80800317 	ldw	r2,12(r16)
 4001724:	81000217 	ldw	r4,8(r16)
 4001728:	89400054 	ori	r5,r17,1
 400172c:	81400115 	stw	r5,4(r16)
 4001730:	20800315 	stw	r2,12(r4)
 4001734:	11000215 	stw	r4,8(r2)
 4001738:	8463883a 	add	r17,r16,r17
 400173c:	9c400515 	stw	r17,20(r19)
 4001740:	9c400415 	stw	r17,16(r19)
 4001744:	18800054 	ori	r2,r3,1
 4001748:	88800115 	stw	r2,4(r17)
 400174c:	8a000315 	stw	r8,12(r17)
 4001750:	8a000215 	stw	r8,8(r17)
 4001754:	88e3883a 	add	r17,r17,r3
 4001758:	88c00015 	stw	r3,0(r17)
 400175c:	9009883a 	mov	r4,r18
 4001760:	4003adc0 	call	4003adc <__malloc_unlock>
 4001764:	80800204 	addi	r2,r16,8
 4001768:	00001b06 	br	40017d8 <_malloc_r+0x2a4>
 400176c:	04400404 	movi	r17,16
 4001770:	89402536 	bltu	r17,r5,4001808 <_malloc_r+0x2d4>
 4001774:	4003ab80 	call	4003ab8 <__malloc_lock>
 4001778:	00800184 	movi	r2,6
 400177c:	01000084 	movi	r4,2
 4001780:	04c10034 	movhi	r19,1024
 4001784:	1085883a 	add	r2,r2,r2
 4001788:	9cde5604 	addi	r19,r19,31064
 400178c:	1085883a 	add	r2,r2,r2
 4001790:	9885883a 	add	r2,r19,r2
 4001794:	14000117 	ldw	r16,4(r2)
 4001798:	10fffe04 	addi	r3,r2,-8
 400179c:	80c0d926 	beq	r16,r3,4001b04 <_malloc_r+0x5d0>
 40017a0:	80c00117 	ldw	r3,4(r16)
 40017a4:	81000317 	ldw	r4,12(r16)
 40017a8:	00bfff04 	movi	r2,-4
 40017ac:	1884703a 	and	r2,r3,r2
 40017b0:	81400217 	ldw	r5,8(r16)
 40017b4:	8085883a 	add	r2,r16,r2
 40017b8:	10c00117 	ldw	r3,4(r2)
 40017bc:	29000315 	stw	r4,12(r5)
 40017c0:	21400215 	stw	r5,8(r4)
 40017c4:	18c00054 	ori	r3,r3,1
 40017c8:	10c00115 	stw	r3,4(r2)
 40017cc:	9009883a 	mov	r4,r18
 40017d0:	4003adc0 	call	4003adc <__malloc_unlock>
 40017d4:	80800204 	addi	r2,r16,8
 40017d8:	dfc00a17 	ldw	ra,40(sp)
 40017dc:	df000917 	ldw	fp,36(sp)
 40017e0:	ddc00817 	ldw	r23,32(sp)
 40017e4:	dd800717 	ldw	r22,28(sp)
 40017e8:	dd400617 	ldw	r21,24(sp)
 40017ec:	dd000517 	ldw	r20,20(sp)
 40017f0:	dcc00417 	ldw	r19,16(sp)
 40017f4:	dc800317 	ldw	r18,12(sp)
 40017f8:	dc400217 	ldw	r17,8(sp)
 40017fc:	dc000117 	ldw	r16,4(sp)
 4001800:	dec00b04 	addi	sp,sp,44
 4001804:	f800283a 	ret
 4001808:	00800304 	movi	r2,12
 400180c:	90800015 	stw	r2,0(r18)
 4001810:	0005883a 	mov	r2,zero
 4001814:	003ff006 	br	40017d8 <__alt_data_end+0xfc0017d8>
 4001818:	01002004 	movi	r4,128
 400181c:	02001004 	movi	r8,64
 4001820:	01c00fc4 	movi	r7,63
 4001824:	003f6106 	br	40015ac <__alt_data_end+0xfc0015ac>
 4001828:	4009883a 	mov	r4,r8
 400182c:	003f7506 	br	4001604 <__alt_data_end+0xfc001604>
 4001830:	81000317 	ldw	r4,12(r16)
 4001834:	003fde06 	br	40017b0 <__alt_data_end+0xfc0017b0>
 4001838:	81c5883a 	add	r2,r16,r7
 400183c:	11400117 	ldw	r5,4(r2)
 4001840:	9009883a 	mov	r4,r18
 4001844:	29400054 	ori	r5,r5,1
 4001848:	11400115 	stw	r5,4(r2)
 400184c:	4003adc0 	call	4003adc <__malloc_unlock>
 4001850:	80800204 	addi	r2,r16,8
 4001854:	003fe006 	br	40017d8 <__alt_data_end+0xfc0017d8>
 4001858:	9c000217 	ldw	r16,8(r19)
 400185c:	00bfff04 	movi	r2,-4
 4001860:	85800117 	ldw	r22,4(r16)
 4001864:	b0ac703a 	and	r22,r22,r2
 4001868:	b4400336 	bltu	r22,r17,4001878 <_malloc_r+0x344>
 400186c:	b445c83a 	sub	r2,r22,r17
 4001870:	00c003c4 	movi	r3,15
 4001874:	18805d16 	blt	r3,r2,40019ec <_malloc_r+0x4b8>
 4001878:	05c10074 	movhi	r23,1025
 400187c:	00810074 	movhi	r2,1025
 4001880:	10ab0b04 	addi	r2,r2,-21460
 4001884:	bde41f04 	addi	r23,r23,-28548
 4001888:	15400017 	ldw	r21,0(r2)
 400188c:	b8c00017 	ldw	r3,0(r23)
 4001890:	00bfffc4 	movi	r2,-1
 4001894:	858d883a 	add	r6,r16,r22
 4001898:	8d6b883a 	add	r21,r17,r21
 400189c:	1880ea26 	beq	r3,r2,4001c48 <_malloc_r+0x714>
 40018a0:	ad4403c4 	addi	r21,r21,4111
 40018a4:	00bc0004 	movi	r2,-4096
 40018a8:	a8aa703a 	and	r21,r21,r2
 40018ac:	a80b883a 	mov	r5,r21
 40018b0:	9009883a 	mov	r4,r18
 40018b4:	d9800015 	stw	r6,0(sp)
 40018b8:	40024e40 	call	40024e4 <_sbrk_r>
 40018bc:	1029883a 	mov	r20,r2
 40018c0:	00bfffc4 	movi	r2,-1
 40018c4:	d9800017 	ldw	r6,0(sp)
 40018c8:	a080e826 	beq	r20,r2,4001c6c <_malloc_r+0x738>
 40018cc:	a180a636 	bltu	r20,r6,4001b68 <_malloc_r+0x634>
 40018d0:	07010074 	movhi	fp,1025
 40018d4:	e72b1404 	addi	fp,fp,-21424
 40018d8:	e0800017 	ldw	r2,0(fp)
 40018dc:	a887883a 	add	r3,r21,r2
 40018e0:	e0c00015 	stw	r3,0(fp)
 40018e4:	3500e626 	beq	r6,r20,4001c80 <_malloc_r+0x74c>
 40018e8:	b9000017 	ldw	r4,0(r23)
 40018ec:	00bfffc4 	movi	r2,-1
 40018f0:	2080ee26 	beq	r4,r2,4001cac <_malloc_r+0x778>
 40018f4:	a185c83a 	sub	r2,r20,r6
 40018f8:	10c5883a 	add	r2,r2,r3
 40018fc:	e0800015 	stw	r2,0(fp)
 4001900:	a0c001cc 	andi	r3,r20,7
 4001904:	1800bc26 	beq	r3,zero,4001bf8 <_malloc_r+0x6c4>
 4001908:	a0e9c83a 	sub	r20,r20,r3
 400190c:	00840204 	movi	r2,4104
 4001910:	a5000204 	addi	r20,r20,8
 4001914:	10c7c83a 	sub	r3,r2,r3
 4001918:	a545883a 	add	r2,r20,r21
 400191c:	1083ffcc 	andi	r2,r2,4095
 4001920:	18abc83a 	sub	r21,r3,r2
 4001924:	a80b883a 	mov	r5,r21
 4001928:	9009883a 	mov	r4,r18
 400192c:	40024e40 	call	40024e4 <_sbrk_r>
 4001930:	00ffffc4 	movi	r3,-1
 4001934:	10c0e126 	beq	r2,r3,4001cbc <_malloc_r+0x788>
 4001938:	1505c83a 	sub	r2,r2,r20
 400193c:	1545883a 	add	r2,r2,r21
 4001940:	10800054 	ori	r2,r2,1
 4001944:	e0c00017 	ldw	r3,0(fp)
 4001948:	9d000215 	stw	r20,8(r19)
 400194c:	a0800115 	stw	r2,4(r20)
 4001950:	a8c7883a 	add	r3,r21,r3
 4001954:	e0c00015 	stw	r3,0(fp)
 4001958:	84c00e26 	beq	r16,r19,4001994 <_malloc_r+0x460>
 400195c:	018003c4 	movi	r6,15
 4001960:	3580a72e 	bgeu	r6,r22,4001c00 <_malloc_r+0x6cc>
 4001964:	81400117 	ldw	r5,4(r16)
 4001968:	013ffe04 	movi	r4,-8
 400196c:	b0bffd04 	addi	r2,r22,-12
 4001970:	1104703a 	and	r2,r2,r4
 4001974:	2900004c 	andi	r4,r5,1
 4001978:	2088b03a 	or	r4,r4,r2
 400197c:	81000115 	stw	r4,4(r16)
 4001980:	01400144 	movi	r5,5
 4001984:	8089883a 	add	r4,r16,r2
 4001988:	21400115 	stw	r5,4(r4)
 400198c:	21400215 	stw	r5,8(r4)
 4001990:	3080cd36 	bltu	r6,r2,4001cc8 <_malloc_r+0x794>
 4001994:	00810074 	movhi	r2,1025
 4001998:	10ab0a04 	addi	r2,r2,-21464
 400199c:	11000017 	ldw	r4,0(r2)
 40019a0:	20c0012e 	bgeu	r4,r3,40019a8 <_malloc_r+0x474>
 40019a4:	10c00015 	stw	r3,0(r2)
 40019a8:	00810074 	movhi	r2,1025
 40019ac:	10ab0904 	addi	r2,r2,-21468
 40019b0:	11000017 	ldw	r4,0(r2)
 40019b4:	9c000217 	ldw	r16,8(r19)
 40019b8:	20c0012e 	bgeu	r4,r3,40019c0 <_malloc_r+0x48c>
 40019bc:	10c00015 	stw	r3,0(r2)
 40019c0:	80c00117 	ldw	r3,4(r16)
 40019c4:	00bfff04 	movi	r2,-4
 40019c8:	1886703a 	and	r3,r3,r2
 40019cc:	1c45c83a 	sub	r2,r3,r17
 40019d0:	1c400236 	bltu	r3,r17,40019dc <_malloc_r+0x4a8>
 40019d4:	00c003c4 	movi	r3,15
 40019d8:	18800416 	blt	r3,r2,40019ec <_malloc_r+0x4b8>
 40019dc:	9009883a 	mov	r4,r18
 40019e0:	4003adc0 	call	4003adc <__malloc_unlock>
 40019e4:	0005883a 	mov	r2,zero
 40019e8:	003f7b06 	br	40017d8 <__alt_data_end+0xfc0017d8>
 40019ec:	88c00054 	ori	r3,r17,1
 40019f0:	80c00115 	stw	r3,4(r16)
 40019f4:	8463883a 	add	r17,r16,r17
 40019f8:	10800054 	ori	r2,r2,1
 40019fc:	9c400215 	stw	r17,8(r19)
 4001a00:	88800115 	stw	r2,4(r17)
 4001a04:	9009883a 	mov	r4,r18
 4001a08:	4003adc0 	call	4003adc <__malloc_unlock>
 4001a0c:	80800204 	addi	r2,r16,8
 4001a10:	003f7106 	br	40017d8 <__alt_data_end+0xfc0017d8>
 4001a14:	00c00504 	movi	r3,20
 4001a18:	18804a2e 	bgeu	r3,r2,4001b44 <_malloc_r+0x610>
 4001a1c:	00c01504 	movi	r3,84
 4001a20:	18806e36 	bltu	r3,r2,4001bdc <_malloc_r+0x6a8>
 4001a24:	8804d33a 	srli	r2,r17,12
 4001a28:	12001bc4 	addi	r8,r2,111
 4001a2c:	11c01b84 	addi	r7,r2,110
 4001a30:	4209883a 	add	r4,r8,r8
 4001a34:	003edd06 	br	40015ac <__alt_data_end+0xfc0015ac>
 4001a38:	3804d27a 	srli	r2,r7,9
 4001a3c:	00c00104 	movi	r3,4
 4001a40:	1880442e 	bgeu	r3,r2,4001b54 <_malloc_r+0x620>
 4001a44:	00c00504 	movi	r3,20
 4001a48:	18808136 	bltu	r3,r2,4001c50 <_malloc_r+0x71c>
 4001a4c:	11401704 	addi	r5,r2,92
 4001a50:	10c016c4 	addi	r3,r2,91
 4001a54:	294b883a 	add	r5,r5,r5
 4001a58:	294b883a 	add	r5,r5,r5
 4001a5c:	294b883a 	add	r5,r5,r5
 4001a60:	994b883a 	add	r5,r19,r5
 4001a64:	28800017 	ldw	r2,0(r5)
 4001a68:	01810034 	movhi	r6,1024
 4001a6c:	297ffe04 	addi	r5,r5,-8
 4001a70:	319e5604 	addi	r6,r6,31064
 4001a74:	28806526 	beq	r5,r2,4001c0c <_malloc_r+0x6d8>
 4001a78:	01bfff04 	movi	r6,-4
 4001a7c:	10c00117 	ldw	r3,4(r2)
 4001a80:	1986703a 	and	r3,r3,r6
 4001a84:	38c0022e 	bgeu	r7,r3,4001a90 <_malloc_r+0x55c>
 4001a88:	10800217 	ldw	r2,8(r2)
 4001a8c:	28bffb1e 	bne	r5,r2,4001a7c <__alt_data_end+0xfc001a7c>
 4001a90:	11400317 	ldw	r5,12(r2)
 4001a94:	98c00117 	ldw	r3,4(r19)
 4001a98:	81400315 	stw	r5,12(r16)
 4001a9c:	80800215 	stw	r2,8(r16)
 4001aa0:	2c000215 	stw	r16,8(r5)
 4001aa4:	14000315 	stw	r16,12(r2)
 4001aa8:	003ef806 	br	400168c <__alt_data_end+0xfc00168c>
 4001aac:	88c00054 	ori	r3,r17,1
 4001ab0:	80c00115 	stw	r3,4(r16)
 4001ab4:	8463883a 	add	r17,r16,r17
 4001ab8:	34400515 	stw	r17,20(r6)
 4001abc:	34400415 	stw	r17,16(r6)
 4001ac0:	10c00054 	ori	r3,r2,1
 4001ac4:	8a000315 	stw	r8,12(r17)
 4001ac8:	8a000215 	stw	r8,8(r17)
 4001acc:	88c00115 	stw	r3,4(r17)
 4001ad0:	88a3883a 	add	r17,r17,r2
 4001ad4:	88800015 	stw	r2,0(r17)
 4001ad8:	9009883a 	mov	r4,r18
 4001adc:	4003adc0 	call	4003adc <__malloc_unlock>
 4001ae0:	80800204 	addi	r2,r16,8
 4001ae4:	003f3c06 	br	40017d8 <__alt_data_end+0xfc0017d8>
 4001ae8:	30c00117 	ldw	r3,4(r6)
 4001aec:	003ee706 	br	400168c <__alt_data_end+0xfc00168c>
 4001af0:	5ac00044 	addi	r11,r11,1
 4001af4:	588000cc 	andi	r2,r11,3
 4001af8:	31800204 	addi	r6,r6,8
 4001afc:	103efd1e 	bne	r2,zero,40016f4 <__alt_data_end+0xfc0016f4>
 4001b00:	00002406 	br	4001b94 <_malloc_r+0x660>
 4001b04:	14000317 	ldw	r16,12(r2)
 4001b08:	143f251e 	bne	r2,r16,40017a0 <__alt_data_end+0xfc0017a0>
 4001b0c:	21000084 	addi	r4,r4,2
 4001b10:	003ebc06 	br	4001604 <__alt_data_end+0xfc001604>
 4001b14:	8085883a 	add	r2,r16,r2
 4001b18:	10c00117 	ldw	r3,4(r2)
 4001b1c:	81000317 	ldw	r4,12(r16)
 4001b20:	81400217 	ldw	r5,8(r16)
 4001b24:	18c00054 	ori	r3,r3,1
 4001b28:	10c00115 	stw	r3,4(r2)
 4001b2c:	29000315 	stw	r4,12(r5)
 4001b30:	21400215 	stw	r5,8(r4)
 4001b34:	9009883a 	mov	r4,r18
 4001b38:	4003adc0 	call	4003adc <__malloc_unlock>
 4001b3c:	80800204 	addi	r2,r16,8
 4001b40:	003f2506 	br	40017d8 <__alt_data_end+0xfc0017d8>
 4001b44:	12001704 	addi	r8,r2,92
 4001b48:	11c016c4 	addi	r7,r2,91
 4001b4c:	4209883a 	add	r4,r8,r8
 4001b50:	003e9606 	br	40015ac <__alt_data_end+0xfc0015ac>
 4001b54:	3804d1ba 	srli	r2,r7,6
 4001b58:	11400e44 	addi	r5,r2,57
 4001b5c:	10c00e04 	addi	r3,r2,56
 4001b60:	294b883a 	add	r5,r5,r5
 4001b64:	003fbc06 	br	4001a58 <__alt_data_end+0xfc001a58>
 4001b68:	84ff5926 	beq	r16,r19,40018d0 <__alt_data_end+0xfc0018d0>
 4001b6c:	00810034 	movhi	r2,1024
 4001b70:	109e5604 	addi	r2,r2,31064
 4001b74:	14000217 	ldw	r16,8(r2)
 4001b78:	00bfff04 	movi	r2,-4
 4001b7c:	80c00117 	ldw	r3,4(r16)
 4001b80:	1886703a 	and	r3,r3,r2
 4001b84:	003f9106 	br	40019cc <__alt_data_end+0xfc0019cc>
 4001b88:	60800217 	ldw	r2,8(r12)
 4001b8c:	213fffc4 	addi	r4,r4,-1
 4001b90:	1300651e 	bne	r2,r12,4001d28 <_malloc_r+0x7f4>
 4001b94:	208000cc 	andi	r2,r4,3
 4001b98:	633ffe04 	addi	r12,r12,-8
 4001b9c:	103ffa1e 	bne	r2,zero,4001b88 <__alt_data_end+0xfc001b88>
 4001ba0:	98800117 	ldw	r2,4(r19)
 4001ba4:	0146303a 	nor	r3,zero,r5
 4001ba8:	1884703a 	and	r2,r3,r2
 4001bac:	98800115 	stw	r2,4(r19)
 4001bb0:	294b883a 	add	r5,r5,r5
 4001bb4:	117f2836 	bltu	r2,r5,4001858 <__alt_data_end+0xfc001858>
 4001bb8:	283f2726 	beq	r5,zero,4001858 <__alt_data_end+0xfc001858>
 4001bbc:	2886703a 	and	r3,r5,r2
 4001bc0:	5809883a 	mov	r4,r11
 4001bc4:	183ec31e 	bne	r3,zero,40016d4 <__alt_data_end+0xfc0016d4>
 4001bc8:	294b883a 	add	r5,r5,r5
 4001bcc:	2886703a 	and	r3,r5,r2
 4001bd0:	21000104 	addi	r4,r4,4
 4001bd4:	183ffc26 	beq	r3,zero,4001bc8 <__alt_data_end+0xfc001bc8>
 4001bd8:	003ebe06 	br	40016d4 <__alt_data_end+0xfc0016d4>
 4001bdc:	00c05504 	movi	r3,340
 4001be0:	18801236 	bltu	r3,r2,4001c2c <_malloc_r+0x6f8>
 4001be4:	8804d3fa 	srli	r2,r17,15
 4001be8:	12001e04 	addi	r8,r2,120
 4001bec:	11c01dc4 	addi	r7,r2,119
 4001bf0:	4209883a 	add	r4,r8,r8
 4001bf4:	003e6d06 	br	40015ac <__alt_data_end+0xfc0015ac>
 4001bf8:	00c40004 	movi	r3,4096
 4001bfc:	003f4606 	br	4001918 <__alt_data_end+0xfc001918>
 4001c00:	00800044 	movi	r2,1
 4001c04:	a0800115 	stw	r2,4(r20)
 4001c08:	003f7406 	br	40019dc <__alt_data_end+0xfc0019dc>
 4001c0c:	1805d0ba 	srai	r2,r3,2
 4001c10:	01c00044 	movi	r7,1
 4001c14:	30c00117 	ldw	r3,4(r6)
 4001c18:	388e983a 	sll	r7,r7,r2
 4001c1c:	2805883a 	mov	r2,r5
 4001c20:	38c6b03a 	or	r3,r7,r3
 4001c24:	30c00115 	stw	r3,4(r6)
 4001c28:	003f9b06 	br	4001a98 <__alt_data_end+0xfc001a98>
 4001c2c:	00c15504 	movi	r3,1364
 4001c30:	18801a36 	bltu	r3,r2,4001c9c <_malloc_r+0x768>
 4001c34:	8804d4ba 	srli	r2,r17,18
 4001c38:	12001f44 	addi	r8,r2,125
 4001c3c:	11c01f04 	addi	r7,r2,124
 4001c40:	4209883a 	add	r4,r8,r8
 4001c44:	003e5906 	br	40015ac <__alt_data_end+0xfc0015ac>
 4001c48:	ad400404 	addi	r21,r21,16
 4001c4c:	003f1706 	br	40018ac <__alt_data_end+0xfc0018ac>
 4001c50:	00c01504 	movi	r3,84
 4001c54:	18802336 	bltu	r3,r2,4001ce4 <_malloc_r+0x7b0>
 4001c58:	3804d33a 	srli	r2,r7,12
 4001c5c:	11401bc4 	addi	r5,r2,111
 4001c60:	10c01b84 	addi	r3,r2,110
 4001c64:	294b883a 	add	r5,r5,r5
 4001c68:	003f7b06 	br	4001a58 <__alt_data_end+0xfc001a58>
 4001c6c:	9c000217 	ldw	r16,8(r19)
 4001c70:	00bfff04 	movi	r2,-4
 4001c74:	80c00117 	ldw	r3,4(r16)
 4001c78:	1886703a 	and	r3,r3,r2
 4001c7c:	003f5306 	br	40019cc <__alt_data_end+0xfc0019cc>
 4001c80:	3083ffcc 	andi	r2,r6,4095
 4001c84:	103f181e 	bne	r2,zero,40018e8 <__alt_data_end+0xfc0018e8>
 4001c88:	99000217 	ldw	r4,8(r19)
 4001c8c:	b545883a 	add	r2,r22,r21
 4001c90:	10800054 	ori	r2,r2,1
 4001c94:	20800115 	stw	r2,4(r4)
 4001c98:	003f3e06 	br	4001994 <__alt_data_end+0xfc001994>
 4001c9c:	01003f84 	movi	r4,254
 4001ca0:	02001fc4 	movi	r8,127
 4001ca4:	01c01f84 	movi	r7,126
 4001ca8:	003e4006 	br	40015ac <__alt_data_end+0xfc0015ac>
 4001cac:	00810074 	movhi	r2,1025
 4001cb0:	10a41f04 	addi	r2,r2,-28548
 4001cb4:	15000015 	stw	r20,0(r2)
 4001cb8:	003f1106 	br	4001900 <__alt_data_end+0xfc001900>
 4001cbc:	00800044 	movi	r2,1
 4001cc0:	002b883a 	mov	r21,zero
 4001cc4:	003f1f06 	br	4001944 <__alt_data_end+0xfc001944>
 4001cc8:	81400204 	addi	r5,r16,8
 4001ccc:	9009883a 	mov	r4,r18
 4001cd0:	4002d4c0 	call	4002d4c <_free_r>
 4001cd4:	00810074 	movhi	r2,1025
 4001cd8:	10ab1404 	addi	r2,r2,-21424
 4001cdc:	10c00017 	ldw	r3,0(r2)
 4001ce0:	003f2c06 	br	4001994 <__alt_data_end+0xfc001994>
 4001ce4:	00c05504 	movi	r3,340
 4001ce8:	18800536 	bltu	r3,r2,4001d00 <_malloc_r+0x7cc>
 4001cec:	3804d3fa 	srli	r2,r7,15
 4001cf0:	11401e04 	addi	r5,r2,120
 4001cf4:	10c01dc4 	addi	r3,r2,119
 4001cf8:	294b883a 	add	r5,r5,r5
 4001cfc:	003f5606 	br	4001a58 <__alt_data_end+0xfc001a58>
 4001d00:	00c15504 	movi	r3,1364
 4001d04:	18800536 	bltu	r3,r2,4001d1c <_malloc_r+0x7e8>
 4001d08:	3804d4ba 	srli	r2,r7,18
 4001d0c:	11401f44 	addi	r5,r2,125
 4001d10:	10c01f04 	addi	r3,r2,124
 4001d14:	294b883a 	add	r5,r5,r5
 4001d18:	003f4f06 	br	4001a58 <__alt_data_end+0xfc001a58>
 4001d1c:	01403f84 	movi	r5,254
 4001d20:	00c01f84 	movi	r3,126
 4001d24:	003f4c06 	br	4001a58 <__alt_data_end+0xfc001a58>
 4001d28:	98800117 	ldw	r2,4(r19)
 4001d2c:	003fa006 	br	4001bb0 <__alt_data_end+0xfc001bb0>
 4001d30:	8808d0fa 	srli	r4,r17,3
 4001d34:	20800044 	addi	r2,r4,1
 4001d38:	1085883a 	add	r2,r2,r2
 4001d3c:	003e9006 	br	4001780 <__alt_data_end+0xfc001780>

04001d40 <memchr>:
 4001d40:	208000cc 	andi	r2,r4,3
 4001d44:	280f883a 	mov	r7,r5
 4001d48:	10003426 	beq	r2,zero,4001e1c <memchr+0xdc>
 4001d4c:	30bfffc4 	addi	r2,r6,-1
 4001d50:	30001a26 	beq	r6,zero,4001dbc <memchr+0x7c>
 4001d54:	20c00003 	ldbu	r3,0(r4)
 4001d58:	29803fcc 	andi	r6,r5,255
 4001d5c:	30c0051e 	bne	r6,r3,4001d74 <memchr+0x34>
 4001d60:	00001806 	br	4001dc4 <memchr+0x84>
 4001d64:	10001526 	beq	r2,zero,4001dbc <memchr+0x7c>
 4001d68:	20c00003 	ldbu	r3,0(r4)
 4001d6c:	10bfffc4 	addi	r2,r2,-1
 4001d70:	30c01426 	beq	r6,r3,4001dc4 <memchr+0x84>
 4001d74:	21000044 	addi	r4,r4,1
 4001d78:	20c000cc 	andi	r3,r4,3
 4001d7c:	183ff91e 	bne	r3,zero,4001d64 <__alt_data_end+0xfc001d64>
 4001d80:	020000c4 	movi	r8,3
 4001d84:	40801136 	bltu	r8,r2,4001dcc <memchr+0x8c>
 4001d88:	10000c26 	beq	r2,zero,4001dbc <memchr+0x7c>
 4001d8c:	20c00003 	ldbu	r3,0(r4)
 4001d90:	29403fcc 	andi	r5,r5,255
 4001d94:	28c00b26 	beq	r5,r3,4001dc4 <memchr+0x84>
 4001d98:	20c00044 	addi	r3,r4,1
 4001d9c:	39803fcc 	andi	r6,r7,255
 4001da0:	2089883a 	add	r4,r4,r2
 4001da4:	00000306 	br	4001db4 <memchr+0x74>
 4001da8:	18c00044 	addi	r3,r3,1
 4001dac:	197fffc3 	ldbu	r5,-1(r3)
 4001db0:	31400526 	beq	r6,r5,4001dc8 <memchr+0x88>
 4001db4:	1805883a 	mov	r2,r3
 4001db8:	20fffb1e 	bne	r4,r3,4001da8 <__alt_data_end+0xfc001da8>
 4001dbc:	0005883a 	mov	r2,zero
 4001dc0:	f800283a 	ret
 4001dc4:	2005883a 	mov	r2,r4
 4001dc8:	f800283a 	ret
 4001dcc:	28c03fcc 	andi	r3,r5,255
 4001dd0:	1812923a 	slli	r9,r3,8
 4001dd4:	02ffbff4 	movhi	r11,65279
 4001dd8:	02a02074 	movhi	r10,32897
 4001ddc:	48d2b03a 	or	r9,r9,r3
 4001de0:	4806943a 	slli	r3,r9,16
 4001de4:	5affbfc4 	addi	r11,r11,-257
 4001de8:	52a02004 	addi	r10,r10,-32640
 4001dec:	48d2b03a 	or	r9,r9,r3
 4001df0:	20c00017 	ldw	r3,0(r4)
 4001df4:	48c6f03a 	xor	r3,r9,r3
 4001df8:	1acd883a 	add	r6,r3,r11
 4001dfc:	00c6303a 	nor	r3,zero,r3
 4001e00:	30c6703a 	and	r3,r6,r3
 4001e04:	1a86703a 	and	r3,r3,r10
 4001e08:	183fe01e 	bne	r3,zero,4001d8c <__alt_data_end+0xfc001d8c>
 4001e0c:	10bfff04 	addi	r2,r2,-4
 4001e10:	21000104 	addi	r4,r4,4
 4001e14:	40bff636 	bltu	r8,r2,4001df0 <__alt_data_end+0xfc001df0>
 4001e18:	003fdb06 	br	4001d88 <__alt_data_end+0xfc001d88>
 4001e1c:	3005883a 	mov	r2,r6
 4001e20:	003fd706 	br	4001d80 <__alt_data_end+0xfc001d80>

04001e24 <memmove>:
 4001e24:	2005883a 	mov	r2,r4
 4001e28:	29000b2e 	bgeu	r5,r4,4001e58 <memmove+0x34>
 4001e2c:	298f883a 	add	r7,r5,r6
 4001e30:	21c0092e 	bgeu	r4,r7,4001e58 <memmove+0x34>
 4001e34:	2187883a 	add	r3,r4,r6
 4001e38:	198bc83a 	sub	r5,r3,r6
 4001e3c:	30004826 	beq	r6,zero,4001f60 <memmove+0x13c>
 4001e40:	39ffffc4 	addi	r7,r7,-1
 4001e44:	39000003 	ldbu	r4,0(r7)
 4001e48:	18ffffc4 	addi	r3,r3,-1
 4001e4c:	19000005 	stb	r4,0(r3)
 4001e50:	28fffb1e 	bne	r5,r3,4001e40 <__alt_data_end+0xfc001e40>
 4001e54:	f800283a 	ret
 4001e58:	00c003c4 	movi	r3,15
 4001e5c:	1980412e 	bgeu	r3,r6,4001f64 <memmove+0x140>
 4001e60:	2886b03a 	or	r3,r5,r2
 4001e64:	18c000cc 	andi	r3,r3,3
 4001e68:	1800401e 	bne	r3,zero,4001f6c <memmove+0x148>
 4001e6c:	33fffc04 	addi	r15,r6,-16
 4001e70:	781ed13a 	srli	r15,r15,4
 4001e74:	28c00104 	addi	r3,r5,4
 4001e78:	13400104 	addi	r13,r2,4
 4001e7c:	781c913a 	slli	r14,r15,4
 4001e80:	2b000204 	addi	r12,r5,8
 4001e84:	12c00204 	addi	r11,r2,8
 4001e88:	73800504 	addi	r14,r14,20
 4001e8c:	2a800304 	addi	r10,r5,12
 4001e90:	12400304 	addi	r9,r2,12
 4001e94:	2b9d883a 	add	r14,r5,r14
 4001e98:	2811883a 	mov	r8,r5
 4001e9c:	100f883a 	mov	r7,r2
 4001ea0:	41000017 	ldw	r4,0(r8)
 4001ea4:	39c00404 	addi	r7,r7,16
 4001ea8:	18c00404 	addi	r3,r3,16
 4001eac:	393ffc15 	stw	r4,-16(r7)
 4001eb0:	193ffc17 	ldw	r4,-16(r3)
 4001eb4:	6b400404 	addi	r13,r13,16
 4001eb8:	5ac00404 	addi	r11,r11,16
 4001ebc:	693ffc15 	stw	r4,-16(r13)
 4001ec0:	61000017 	ldw	r4,0(r12)
 4001ec4:	4a400404 	addi	r9,r9,16
 4001ec8:	42000404 	addi	r8,r8,16
 4001ecc:	593ffc15 	stw	r4,-16(r11)
 4001ed0:	51000017 	ldw	r4,0(r10)
 4001ed4:	63000404 	addi	r12,r12,16
 4001ed8:	52800404 	addi	r10,r10,16
 4001edc:	493ffc15 	stw	r4,-16(r9)
 4001ee0:	1bbfef1e 	bne	r3,r14,4001ea0 <__alt_data_end+0xfc001ea0>
 4001ee4:	79000044 	addi	r4,r15,1
 4001ee8:	2008913a 	slli	r4,r4,4
 4001eec:	328003cc 	andi	r10,r6,15
 4001ef0:	02c000c4 	movi	r11,3
 4001ef4:	1107883a 	add	r3,r2,r4
 4001ef8:	290b883a 	add	r5,r5,r4
 4001efc:	5a801e2e 	bgeu	r11,r10,4001f78 <memmove+0x154>
 4001f00:	1813883a 	mov	r9,r3
 4001f04:	2811883a 	mov	r8,r5
 4001f08:	500f883a 	mov	r7,r10
 4001f0c:	41000017 	ldw	r4,0(r8)
 4001f10:	4a400104 	addi	r9,r9,4
 4001f14:	39ffff04 	addi	r7,r7,-4
 4001f18:	493fff15 	stw	r4,-4(r9)
 4001f1c:	42000104 	addi	r8,r8,4
 4001f20:	59fffa36 	bltu	r11,r7,4001f0c <__alt_data_end+0xfc001f0c>
 4001f24:	513fff04 	addi	r4,r10,-4
 4001f28:	2008d0ba 	srli	r4,r4,2
 4001f2c:	318000cc 	andi	r6,r6,3
 4001f30:	21000044 	addi	r4,r4,1
 4001f34:	2109883a 	add	r4,r4,r4
 4001f38:	2109883a 	add	r4,r4,r4
 4001f3c:	1907883a 	add	r3,r3,r4
 4001f40:	290b883a 	add	r5,r5,r4
 4001f44:	30000b26 	beq	r6,zero,4001f74 <memmove+0x150>
 4001f48:	198d883a 	add	r6,r3,r6
 4001f4c:	29c00003 	ldbu	r7,0(r5)
 4001f50:	18c00044 	addi	r3,r3,1
 4001f54:	29400044 	addi	r5,r5,1
 4001f58:	19ffffc5 	stb	r7,-1(r3)
 4001f5c:	19bffb1e 	bne	r3,r6,4001f4c <__alt_data_end+0xfc001f4c>
 4001f60:	f800283a 	ret
 4001f64:	1007883a 	mov	r3,r2
 4001f68:	003ff606 	br	4001f44 <__alt_data_end+0xfc001f44>
 4001f6c:	1007883a 	mov	r3,r2
 4001f70:	003ff506 	br	4001f48 <__alt_data_end+0xfc001f48>
 4001f74:	f800283a 	ret
 4001f78:	500d883a 	mov	r6,r10
 4001f7c:	003ff106 	br	4001f44 <__alt_data_end+0xfc001f44>

04001f80 <_realloc_r>:
 4001f80:	defff604 	addi	sp,sp,-40
 4001f84:	dc800215 	stw	r18,8(sp)
 4001f88:	dfc00915 	stw	ra,36(sp)
 4001f8c:	df000815 	stw	fp,32(sp)
 4001f90:	ddc00715 	stw	r23,28(sp)
 4001f94:	dd800615 	stw	r22,24(sp)
 4001f98:	dd400515 	stw	r21,20(sp)
 4001f9c:	dd000415 	stw	r20,16(sp)
 4001fa0:	dcc00315 	stw	r19,12(sp)
 4001fa4:	dc400115 	stw	r17,4(sp)
 4001fa8:	dc000015 	stw	r16,0(sp)
 4001fac:	3025883a 	mov	r18,r6
 4001fb0:	2800b726 	beq	r5,zero,4002290 <_realloc_r+0x310>
 4001fb4:	282b883a 	mov	r21,r5
 4001fb8:	2029883a 	mov	r20,r4
 4001fbc:	4003ab80 	call	4003ab8 <__malloc_lock>
 4001fc0:	a8bfff17 	ldw	r2,-4(r21)
 4001fc4:	043fff04 	movi	r16,-4
 4001fc8:	90c002c4 	addi	r3,r18,11
 4001fcc:	01000584 	movi	r4,22
 4001fd0:	acfffe04 	addi	r19,r21,-8
 4001fd4:	1420703a 	and	r16,r2,r16
 4001fd8:	20c0332e 	bgeu	r4,r3,40020a8 <_realloc_r+0x128>
 4001fdc:	047ffe04 	movi	r17,-8
 4001fe0:	1c62703a 	and	r17,r3,r17
 4001fe4:	8807883a 	mov	r3,r17
 4001fe8:	88005816 	blt	r17,zero,400214c <_realloc_r+0x1cc>
 4001fec:	8c805736 	bltu	r17,r18,400214c <_realloc_r+0x1cc>
 4001ff0:	80c0300e 	bge	r16,r3,40020b4 <_realloc_r+0x134>
 4001ff4:	07010034 	movhi	fp,1024
 4001ff8:	e71e5604 	addi	fp,fp,31064
 4001ffc:	e1c00217 	ldw	r7,8(fp)
 4002000:	9c09883a 	add	r4,r19,r16
 4002004:	22000117 	ldw	r8,4(r4)
 4002008:	21c06326 	beq	r4,r7,4002198 <_realloc_r+0x218>
 400200c:	017fff84 	movi	r5,-2
 4002010:	414a703a 	and	r5,r8,r5
 4002014:	214b883a 	add	r5,r4,r5
 4002018:	29800117 	ldw	r6,4(r5)
 400201c:	3180004c 	andi	r6,r6,1
 4002020:	30003f26 	beq	r6,zero,4002120 <_realloc_r+0x1a0>
 4002024:	1080004c 	andi	r2,r2,1
 4002028:	10008326 	beq	r2,zero,4002238 <_realloc_r+0x2b8>
 400202c:	900b883a 	mov	r5,r18
 4002030:	a009883a 	mov	r4,r20
 4002034:	40015340 	call	4001534 <_malloc_r>
 4002038:	1025883a 	mov	r18,r2
 400203c:	10011e26 	beq	r2,zero,40024b8 <_realloc_r+0x538>
 4002040:	a93fff17 	ldw	r4,-4(r21)
 4002044:	10fffe04 	addi	r3,r2,-8
 4002048:	00bfff84 	movi	r2,-2
 400204c:	2084703a 	and	r2,r4,r2
 4002050:	9885883a 	add	r2,r19,r2
 4002054:	1880ee26 	beq	r3,r2,4002410 <_realloc_r+0x490>
 4002058:	81bfff04 	addi	r6,r16,-4
 400205c:	00800904 	movi	r2,36
 4002060:	1180b836 	bltu	r2,r6,4002344 <_realloc_r+0x3c4>
 4002064:	00c004c4 	movi	r3,19
 4002068:	19809636 	bltu	r3,r6,40022c4 <_realloc_r+0x344>
 400206c:	9005883a 	mov	r2,r18
 4002070:	a807883a 	mov	r3,r21
 4002074:	19000017 	ldw	r4,0(r3)
 4002078:	11000015 	stw	r4,0(r2)
 400207c:	19000117 	ldw	r4,4(r3)
 4002080:	11000115 	stw	r4,4(r2)
 4002084:	18c00217 	ldw	r3,8(r3)
 4002088:	10c00215 	stw	r3,8(r2)
 400208c:	a80b883a 	mov	r5,r21
 4002090:	a009883a 	mov	r4,r20
 4002094:	4002d4c0 	call	4002d4c <_free_r>
 4002098:	a009883a 	mov	r4,r20
 400209c:	4003adc0 	call	4003adc <__malloc_unlock>
 40020a0:	9005883a 	mov	r2,r18
 40020a4:	00001206 	br	40020f0 <_realloc_r+0x170>
 40020a8:	00c00404 	movi	r3,16
 40020ac:	1823883a 	mov	r17,r3
 40020b0:	003fce06 	br	4001fec <__alt_data_end+0xfc001fec>
 40020b4:	a825883a 	mov	r18,r21
 40020b8:	8445c83a 	sub	r2,r16,r17
 40020bc:	00c003c4 	movi	r3,15
 40020c0:	18802636 	bltu	r3,r2,400215c <_realloc_r+0x1dc>
 40020c4:	99800117 	ldw	r6,4(r19)
 40020c8:	9c07883a 	add	r3,r19,r16
 40020cc:	3180004c 	andi	r6,r6,1
 40020d0:	3420b03a 	or	r16,r6,r16
 40020d4:	9c000115 	stw	r16,4(r19)
 40020d8:	18800117 	ldw	r2,4(r3)
 40020dc:	10800054 	ori	r2,r2,1
 40020e0:	18800115 	stw	r2,4(r3)
 40020e4:	a009883a 	mov	r4,r20
 40020e8:	4003adc0 	call	4003adc <__malloc_unlock>
 40020ec:	9005883a 	mov	r2,r18
 40020f0:	dfc00917 	ldw	ra,36(sp)
 40020f4:	df000817 	ldw	fp,32(sp)
 40020f8:	ddc00717 	ldw	r23,28(sp)
 40020fc:	dd800617 	ldw	r22,24(sp)
 4002100:	dd400517 	ldw	r21,20(sp)
 4002104:	dd000417 	ldw	r20,16(sp)
 4002108:	dcc00317 	ldw	r19,12(sp)
 400210c:	dc800217 	ldw	r18,8(sp)
 4002110:	dc400117 	ldw	r17,4(sp)
 4002114:	dc000017 	ldw	r16,0(sp)
 4002118:	dec00a04 	addi	sp,sp,40
 400211c:	f800283a 	ret
 4002120:	017fff04 	movi	r5,-4
 4002124:	414a703a 	and	r5,r8,r5
 4002128:	814d883a 	add	r6,r16,r5
 400212c:	30c01f16 	blt	r6,r3,40021ac <_realloc_r+0x22c>
 4002130:	20800317 	ldw	r2,12(r4)
 4002134:	20c00217 	ldw	r3,8(r4)
 4002138:	a825883a 	mov	r18,r21
 400213c:	3021883a 	mov	r16,r6
 4002140:	18800315 	stw	r2,12(r3)
 4002144:	10c00215 	stw	r3,8(r2)
 4002148:	003fdb06 	br	40020b8 <__alt_data_end+0xfc0020b8>
 400214c:	00800304 	movi	r2,12
 4002150:	a0800015 	stw	r2,0(r20)
 4002154:	0005883a 	mov	r2,zero
 4002158:	003fe506 	br	40020f0 <__alt_data_end+0xfc0020f0>
 400215c:	98c00117 	ldw	r3,4(r19)
 4002160:	9c4b883a 	add	r5,r19,r17
 4002164:	11000054 	ori	r4,r2,1
 4002168:	18c0004c 	andi	r3,r3,1
 400216c:	1c62b03a 	or	r17,r3,r17
 4002170:	9c400115 	stw	r17,4(r19)
 4002174:	29000115 	stw	r4,4(r5)
 4002178:	2885883a 	add	r2,r5,r2
 400217c:	10c00117 	ldw	r3,4(r2)
 4002180:	29400204 	addi	r5,r5,8
 4002184:	a009883a 	mov	r4,r20
 4002188:	18c00054 	ori	r3,r3,1
 400218c:	10c00115 	stw	r3,4(r2)
 4002190:	4002d4c0 	call	4002d4c <_free_r>
 4002194:	003fd306 	br	40020e4 <__alt_data_end+0xfc0020e4>
 4002198:	017fff04 	movi	r5,-4
 400219c:	414a703a 	and	r5,r8,r5
 40021a0:	89800404 	addi	r6,r17,16
 40021a4:	8151883a 	add	r8,r16,r5
 40021a8:	4180590e 	bge	r8,r6,4002310 <_realloc_r+0x390>
 40021ac:	1080004c 	andi	r2,r2,1
 40021b0:	103f9e1e 	bne	r2,zero,400202c <__alt_data_end+0xfc00202c>
 40021b4:	adbffe17 	ldw	r22,-8(r21)
 40021b8:	00bfff04 	movi	r2,-4
 40021bc:	9dadc83a 	sub	r22,r19,r22
 40021c0:	b1800117 	ldw	r6,4(r22)
 40021c4:	3084703a 	and	r2,r6,r2
 40021c8:	20002026 	beq	r4,zero,400224c <_realloc_r+0x2cc>
 40021cc:	80af883a 	add	r23,r16,r2
 40021d0:	b96f883a 	add	r23,r23,r5
 40021d4:	21c05f26 	beq	r4,r7,4002354 <_realloc_r+0x3d4>
 40021d8:	b8c01c16 	blt	r23,r3,400224c <_realloc_r+0x2cc>
 40021dc:	20800317 	ldw	r2,12(r4)
 40021e0:	20c00217 	ldw	r3,8(r4)
 40021e4:	81bfff04 	addi	r6,r16,-4
 40021e8:	01000904 	movi	r4,36
 40021ec:	18800315 	stw	r2,12(r3)
 40021f0:	10c00215 	stw	r3,8(r2)
 40021f4:	b0c00217 	ldw	r3,8(r22)
 40021f8:	b0800317 	ldw	r2,12(r22)
 40021fc:	b4800204 	addi	r18,r22,8
 4002200:	18800315 	stw	r2,12(r3)
 4002204:	10c00215 	stw	r3,8(r2)
 4002208:	21801b36 	bltu	r4,r6,4002278 <_realloc_r+0x2f8>
 400220c:	008004c4 	movi	r2,19
 4002210:	1180352e 	bgeu	r2,r6,40022e8 <_realloc_r+0x368>
 4002214:	a8800017 	ldw	r2,0(r21)
 4002218:	b0800215 	stw	r2,8(r22)
 400221c:	a8800117 	ldw	r2,4(r21)
 4002220:	b0800315 	stw	r2,12(r22)
 4002224:	008006c4 	movi	r2,27
 4002228:	11807f36 	bltu	r2,r6,4002428 <_realloc_r+0x4a8>
 400222c:	b0800404 	addi	r2,r22,16
 4002230:	ad400204 	addi	r21,r21,8
 4002234:	00002d06 	br	40022ec <_realloc_r+0x36c>
 4002238:	adbffe17 	ldw	r22,-8(r21)
 400223c:	00bfff04 	movi	r2,-4
 4002240:	9dadc83a 	sub	r22,r19,r22
 4002244:	b1000117 	ldw	r4,4(r22)
 4002248:	2084703a 	and	r2,r4,r2
 400224c:	b03f7726 	beq	r22,zero,400202c <__alt_data_end+0xfc00202c>
 4002250:	80af883a 	add	r23,r16,r2
 4002254:	b8ff7516 	blt	r23,r3,400202c <__alt_data_end+0xfc00202c>
 4002258:	b0800317 	ldw	r2,12(r22)
 400225c:	b0c00217 	ldw	r3,8(r22)
 4002260:	81bfff04 	addi	r6,r16,-4
 4002264:	01000904 	movi	r4,36
 4002268:	18800315 	stw	r2,12(r3)
 400226c:	10c00215 	stw	r3,8(r2)
 4002270:	b4800204 	addi	r18,r22,8
 4002274:	21bfe52e 	bgeu	r4,r6,400220c <__alt_data_end+0xfc00220c>
 4002278:	a80b883a 	mov	r5,r21
 400227c:	9009883a 	mov	r4,r18
 4002280:	4001e240 	call	4001e24 <memmove>
 4002284:	b821883a 	mov	r16,r23
 4002288:	b027883a 	mov	r19,r22
 400228c:	003f8a06 	br	40020b8 <__alt_data_end+0xfc0020b8>
 4002290:	300b883a 	mov	r5,r6
 4002294:	dfc00917 	ldw	ra,36(sp)
 4002298:	df000817 	ldw	fp,32(sp)
 400229c:	ddc00717 	ldw	r23,28(sp)
 40022a0:	dd800617 	ldw	r22,24(sp)
 40022a4:	dd400517 	ldw	r21,20(sp)
 40022a8:	dd000417 	ldw	r20,16(sp)
 40022ac:	dcc00317 	ldw	r19,12(sp)
 40022b0:	dc800217 	ldw	r18,8(sp)
 40022b4:	dc400117 	ldw	r17,4(sp)
 40022b8:	dc000017 	ldw	r16,0(sp)
 40022bc:	dec00a04 	addi	sp,sp,40
 40022c0:	40015341 	jmpi	4001534 <_malloc_r>
 40022c4:	a8c00017 	ldw	r3,0(r21)
 40022c8:	90c00015 	stw	r3,0(r18)
 40022cc:	a8c00117 	ldw	r3,4(r21)
 40022d0:	90c00115 	stw	r3,4(r18)
 40022d4:	00c006c4 	movi	r3,27
 40022d8:	19804536 	bltu	r3,r6,40023f0 <_realloc_r+0x470>
 40022dc:	90800204 	addi	r2,r18,8
 40022e0:	a8c00204 	addi	r3,r21,8
 40022e4:	003f6306 	br	4002074 <__alt_data_end+0xfc002074>
 40022e8:	9005883a 	mov	r2,r18
 40022ec:	a8c00017 	ldw	r3,0(r21)
 40022f0:	b821883a 	mov	r16,r23
 40022f4:	b027883a 	mov	r19,r22
 40022f8:	10c00015 	stw	r3,0(r2)
 40022fc:	a8c00117 	ldw	r3,4(r21)
 4002300:	10c00115 	stw	r3,4(r2)
 4002304:	a8c00217 	ldw	r3,8(r21)
 4002308:	10c00215 	stw	r3,8(r2)
 400230c:	003f6a06 	br	40020b8 <__alt_data_end+0xfc0020b8>
 4002310:	9c67883a 	add	r19,r19,r17
 4002314:	4445c83a 	sub	r2,r8,r17
 4002318:	e4c00215 	stw	r19,8(fp)
 400231c:	10800054 	ori	r2,r2,1
 4002320:	98800115 	stw	r2,4(r19)
 4002324:	a8bfff17 	ldw	r2,-4(r21)
 4002328:	a009883a 	mov	r4,r20
 400232c:	1080004c 	andi	r2,r2,1
 4002330:	1462b03a 	or	r17,r2,r17
 4002334:	ac7fff15 	stw	r17,-4(r21)
 4002338:	4003adc0 	call	4003adc <__malloc_unlock>
 400233c:	a805883a 	mov	r2,r21
 4002340:	003f6b06 	br	40020f0 <__alt_data_end+0xfc0020f0>
 4002344:	a80b883a 	mov	r5,r21
 4002348:	9009883a 	mov	r4,r18
 400234c:	4001e240 	call	4001e24 <memmove>
 4002350:	003f4e06 	br	400208c <__alt_data_end+0xfc00208c>
 4002354:	89000404 	addi	r4,r17,16
 4002358:	b93fbc16 	blt	r23,r4,400224c <__alt_data_end+0xfc00224c>
 400235c:	b0800317 	ldw	r2,12(r22)
 4002360:	b0c00217 	ldw	r3,8(r22)
 4002364:	81bfff04 	addi	r6,r16,-4
 4002368:	01000904 	movi	r4,36
 400236c:	18800315 	stw	r2,12(r3)
 4002370:	10c00215 	stw	r3,8(r2)
 4002374:	b4800204 	addi	r18,r22,8
 4002378:	21804336 	bltu	r4,r6,4002488 <_realloc_r+0x508>
 400237c:	008004c4 	movi	r2,19
 4002380:	11803f2e 	bgeu	r2,r6,4002480 <_realloc_r+0x500>
 4002384:	a8800017 	ldw	r2,0(r21)
 4002388:	b0800215 	stw	r2,8(r22)
 400238c:	a8800117 	ldw	r2,4(r21)
 4002390:	b0800315 	stw	r2,12(r22)
 4002394:	008006c4 	movi	r2,27
 4002398:	11803f36 	bltu	r2,r6,4002498 <_realloc_r+0x518>
 400239c:	b0800404 	addi	r2,r22,16
 40023a0:	ad400204 	addi	r21,r21,8
 40023a4:	a8c00017 	ldw	r3,0(r21)
 40023a8:	10c00015 	stw	r3,0(r2)
 40023ac:	a8c00117 	ldw	r3,4(r21)
 40023b0:	10c00115 	stw	r3,4(r2)
 40023b4:	a8c00217 	ldw	r3,8(r21)
 40023b8:	10c00215 	stw	r3,8(r2)
 40023bc:	b447883a 	add	r3,r22,r17
 40023c0:	bc45c83a 	sub	r2,r23,r17
 40023c4:	e0c00215 	stw	r3,8(fp)
 40023c8:	10800054 	ori	r2,r2,1
 40023cc:	18800115 	stw	r2,4(r3)
 40023d0:	b0800117 	ldw	r2,4(r22)
 40023d4:	a009883a 	mov	r4,r20
 40023d8:	1080004c 	andi	r2,r2,1
 40023dc:	1462b03a 	or	r17,r2,r17
 40023e0:	b4400115 	stw	r17,4(r22)
 40023e4:	4003adc0 	call	4003adc <__malloc_unlock>
 40023e8:	9005883a 	mov	r2,r18
 40023ec:	003f4006 	br	40020f0 <__alt_data_end+0xfc0020f0>
 40023f0:	a8c00217 	ldw	r3,8(r21)
 40023f4:	90c00215 	stw	r3,8(r18)
 40023f8:	a8c00317 	ldw	r3,12(r21)
 40023fc:	90c00315 	stw	r3,12(r18)
 4002400:	30801126 	beq	r6,r2,4002448 <_realloc_r+0x4c8>
 4002404:	90800404 	addi	r2,r18,16
 4002408:	a8c00404 	addi	r3,r21,16
 400240c:	003f1906 	br	4002074 <__alt_data_end+0xfc002074>
 4002410:	90ffff17 	ldw	r3,-4(r18)
 4002414:	00bfff04 	movi	r2,-4
 4002418:	a825883a 	mov	r18,r21
 400241c:	1884703a 	and	r2,r3,r2
 4002420:	80a1883a 	add	r16,r16,r2
 4002424:	003f2406 	br	40020b8 <__alt_data_end+0xfc0020b8>
 4002428:	a8800217 	ldw	r2,8(r21)
 400242c:	b0800415 	stw	r2,16(r22)
 4002430:	a8800317 	ldw	r2,12(r21)
 4002434:	b0800515 	stw	r2,20(r22)
 4002438:	31000a26 	beq	r6,r4,4002464 <_realloc_r+0x4e4>
 400243c:	b0800604 	addi	r2,r22,24
 4002440:	ad400404 	addi	r21,r21,16
 4002444:	003fa906 	br	40022ec <__alt_data_end+0xfc0022ec>
 4002448:	a9000417 	ldw	r4,16(r21)
 400244c:	90800604 	addi	r2,r18,24
 4002450:	a8c00604 	addi	r3,r21,24
 4002454:	91000415 	stw	r4,16(r18)
 4002458:	a9000517 	ldw	r4,20(r21)
 400245c:	91000515 	stw	r4,20(r18)
 4002460:	003f0406 	br	4002074 <__alt_data_end+0xfc002074>
 4002464:	a8c00417 	ldw	r3,16(r21)
 4002468:	ad400604 	addi	r21,r21,24
 400246c:	b0800804 	addi	r2,r22,32
 4002470:	b0c00615 	stw	r3,24(r22)
 4002474:	a8ffff17 	ldw	r3,-4(r21)
 4002478:	b0c00715 	stw	r3,28(r22)
 400247c:	003f9b06 	br	40022ec <__alt_data_end+0xfc0022ec>
 4002480:	9005883a 	mov	r2,r18
 4002484:	003fc706 	br	40023a4 <__alt_data_end+0xfc0023a4>
 4002488:	a80b883a 	mov	r5,r21
 400248c:	9009883a 	mov	r4,r18
 4002490:	4001e240 	call	4001e24 <memmove>
 4002494:	003fc906 	br	40023bc <__alt_data_end+0xfc0023bc>
 4002498:	a8800217 	ldw	r2,8(r21)
 400249c:	b0800415 	stw	r2,16(r22)
 40024a0:	a8800317 	ldw	r2,12(r21)
 40024a4:	b0800515 	stw	r2,20(r22)
 40024a8:	31000726 	beq	r6,r4,40024c8 <_realloc_r+0x548>
 40024ac:	b0800604 	addi	r2,r22,24
 40024b0:	ad400404 	addi	r21,r21,16
 40024b4:	003fbb06 	br	40023a4 <__alt_data_end+0xfc0023a4>
 40024b8:	a009883a 	mov	r4,r20
 40024bc:	4003adc0 	call	4003adc <__malloc_unlock>
 40024c0:	0005883a 	mov	r2,zero
 40024c4:	003f0a06 	br	40020f0 <__alt_data_end+0xfc0020f0>
 40024c8:	a8c00417 	ldw	r3,16(r21)
 40024cc:	ad400604 	addi	r21,r21,24
 40024d0:	b0800804 	addi	r2,r22,32
 40024d4:	b0c00615 	stw	r3,24(r22)
 40024d8:	a8ffff17 	ldw	r3,-4(r21)
 40024dc:	b0c00715 	stw	r3,28(r22)
 40024e0:	003fb006 	br	40023a4 <__alt_data_end+0xfc0023a4>

040024e4 <_sbrk_r>:
 40024e4:	defffd04 	addi	sp,sp,-12
 40024e8:	dc000015 	stw	r16,0(sp)
 40024ec:	04010074 	movhi	r16,1025
 40024f0:	dc400115 	stw	r17,4(sp)
 40024f4:	842b0c04 	addi	r16,r16,-21456
 40024f8:	2023883a 	mov	r17,r4
 40024fc:	2809883a 	mov	r4,r5
 4002500:	dfc00215 	stw	ra,8(sp)
 4002504:	80000015 	stw	zero,0(r16)
 4002508:	4003c9c0 	call	4003c9c <sbrk>
 400250c:	00ffffc4 	movi	r3,-1
 4002510:	10c00526 	beq	r2,r3,4002528 <_sbrk_r+0x44>
 4002514:	dfc00217 	ldw	ra,8(sp)
 4002518:	dc400117 	ldw	r17,4(sp)
 400251c:	dc000017 	ldw	r16,0(sp)
 4002520:	dec00304 	addi	sp,sp,12
 4002524:	f800283a 	ret
 4002528:	80c00017 	ldw	r3,0(r16)
 400252c:	183ff926 	beq	r3,zero,4002514 <__alt_data_end+0xfc002514>
 4002530:	88c00015 	stw	r3,0(r17)
 4002534:	003ff706 	br	4002514 <__alt_data_end+0xfc002514>

04002538 <__sread>:
 4002538:	defffe04 	addi	sp,sp,-8
 400253c:	dc000015 	stw	r16,0(sp)
 4002540:	2821883a 	mov	r16,r5
 4002544:	2940038f 	ldh	r5,14(r5)
 4002548:	dfc00115 	stw	ra,4(sp)
 400254c:	40032780 	call	4003278 <_read_r>
 4002550:	10000716 	blt	r2,zero,4002570 <__sread+0x38>
 4002554:	80c01417 	ldw	r3,80(r16)
 4002558:	1887883a 	add	r3,r3,r2
 400255c:	80c01415 	stw	r3,80(r16)
 4002560:	dfc00117 	ldw	ra,4(sp)
 4002564:	dc000017 	ldw	r16,0(sp)
 4002568:	dec00204 	addi	sp,sp,8
 400256c:	f800283a 	ret
 4002570:	80c0030b 	ldhu	r3,12(r16)
 4002574:	18fbffcc 	andi	r3,r3,61439
 4002578:	80c0030d 	sth	r3,12(r16)
 400257c:	dfc00117 	ldw	ra,4(sp)
 4002580:	dc000017 	ldw	r16,0(sp)
 4002584:	dec00204 	addi	sp,sp,8
 4002588:	f800283a 	ret

0400258c <__seofread>:
 400258c:	0005883a 	mov	r2,zero
 4002590:	f800283a 	ret

04002594 <__swrite>:
 4002594:	2880030b 	ldhu	r2,12(r5)
 4002598:	defffb04 	addi	sp,sp,-20
 400259c:	dcc00315 	stw	r19,12(sp)
 40025a0:	dc800215 	stw	r18,8(sp)
 40025a4:	dc400115 	stw	r17,4(sp)
 40025a8:	dc000015 	stw	r16,0(sp)
 40025ac:	dfc00415 	stw	ra,16(sp)
 40025b0:	10c0400c 	andi	r3,r2,256
 40025b4:	2821883a 	mov	r16,r5
 40025b8:	2023883a 	mov	r17,r4
 40025bc:	3025883a 	mov	r18,r6
 40025c0:	3827883a 	mov	r19,r7
 40025c4:	18000526 	beq	r3,zero,40025dc <__swrite+0x48>
 40025c8:	2940038f 	ldh	r5,14(r5)
 40025cc:	01c00084 	movi	r7,2
 40025d0:	000d883a 	mov	r6,zero
 40025d4:	400305c0 	call	400305c <_lseek_r>
 40025d8:	8080030b 	ldhu	r2,12(r16)
 40025dc:	8140038f 	ldh	r5,14(r16)
 40025e0:	10bbffcc 	andi	r2,r2,61439
 40025e4:	980f883a 	mov	r7,r19
 40025e8:	900d883a 	mov	r6,r18
 40025ec:	8809883a 	mov	r4,r17
 40025f0:	8080030d 	sth	r2,12(r16)
 40025f4:	dfc00417 	ldw	ra,16(sp)
 40025f8:	dcc00317 	ldw	r19,12(sp)
 40025fc:	dc800217 	ldw	r18,8(sp)
 4002600:	dc400117 	ldw	r17,4(sp)
 4002604:	dc000017 	ldw	r16,0(sp)
 4002608:	dec00504 	addi	sp,sp,20
 400260c:	40026741 	jmpi	4002674 <_write_r>

04002610 <__sseek>:
 4002610:	defffe04 	addi	sp,sp,-8
 4002614:	dc000015 	stw	r16,0(sp)
 4002618:	2821883a 	mov	r16,r5
 400261c:	2940038f 	ldh	r5,14(r5)
 4002620:	dfc00115 	stw	ra,4(sp)
 4002624:	400305c0 	call	400305c <_lseek_r>
 4002628:	00ffffc4 	movi	r3,-1
 400262c:	10c00826 	beq	r2,r3,4002650 <__sseek+0x40>
 4002630:	80c0030b 	ldhu	r3,12(r16)
 4002634:	80801415 	stw	r2,80(r16)
 4002638:	18c40014 	ori	r3,r3,4096
 400263c:	80c0030d 	sth	r3,12(r16)
 4002640:	dfc00117 	ldw	ra,4(sp)
 4002644:	dc000017 	ldw	r16,0(sp)
 4002648:	dec00204 	addi	sp,sp,8
 400264c:	f800283a 	ret
 4002650:	80c0030b 	ldhu	r3,12(r16)
 4002654:	18fbffcc 	andi	r3,r3,61439
 4002658:	80c0030d 	sth	r3,12(r16)
 400265c:	dfc00117 	ldw	ra,4(sp)
 4002660:	dc000017 	ldw	r16,0(sp)
 4002664:	dec00204 	addi	sp,sp,8
 4002668:	f800283a 	ret

0400266c <__sclose>:
 400266c:	2940038f 	ldh	r5,14(r5)
 4002670:	40028281 	jmpi	4002828 <_close_r>

04002674 <_write_r>:
 4002674:	defffd04 	addi	sp,sp,-12
 4002678:	2805883a 	mov	r2,r5
 400267c:	dc000015 	stw	r16,0(sp)
 4002680:	04010074 	movhi	r16,1025
 4002684:	dc400115 	stw	r17,4(sp)
 4002688:	300b883a 	mov	r5,r6
 400268c:	842b0c04 	addi	r16,r16,-21456
 4002690:	2023883a 	mov	r17,r4
 4002694:	380d883a 	mov	r6,r7
 4002698:	1009883a 	mov	r4,r2
 400269c:	dfc00215 	stw	ra,8(sp)
 40026a0:	80000015 	stw	zero,0(r16)
 40026a4:	4003db80 	call	4003db8 <write>
 40026a8:	00ffffc4 	movi	r3,-1
 40026ac:	10c00526 	beq	r2,r3,40026c4 <_write_r+0x50>
 40026b0:	dfc00217 	ldw	ra,8(sp)
 40026b4:	dc400117 	ldw	r17,4(sp)
 40026b8:	dc000017 	ldw	r16,0(sp)
 40026bc:	dec00304 	addi	sp,sp,12
 40026c0:	f800283a 	ret
 40026c4:	80c00017 	ldw	r3,0(r16)
 40026c8:	183ff926 	beq	r3,zero,40026b0 <__alt_data_end+0xfc0026b0>
 40026cc:	88c00015 	stw	r3,0(r17)
 40026d0:	003ff706 	br	40026b0 <__alt_data_end+0xfc0026b0>

040026d4 <__swsetup_r>:
 40026d4:	00810074 	movhi	r2,1025
 40026d8:	defffd04 	addi	sp,sp,-12
 40026dc:	10a41e04 	addi	r2,r2,-28552
 40026e0:	dc400115 	stw	r17,4(sp)
 40026e4:	2023883a 	mov	r17,r4
 40026e8:	11000017 	ldw	r4,0(r2)
 40026ec:	dc000015 	stw	r16,0(sp)
 40026f0:	dfc00215 	stw	ra,8(sp)
 40026f4:	2821883a 	mov	r16,r5
 40026f8:	20000226 	beq	r4,zero,4002704 <__swsetup_r+0x30>
 40026fc:	20800e17 	ldw	r2,56(r4)
 4002700:	10003126 	beq	r2,zero,40027c8 <__swsetup_r+0xf4>
 4002704:	8080030b 	ldhu	r2,12(r16)
 4002708:	10c0020c 	andi	r3,r2,8
 400270c:	1009883a 	mov	r4,r2
 4002710:	18000f26 	beq	r3,zero,4002750 <__swsetup_r+0x7c>
 4002714:	80c00417 	ldw	r3,16(r16)
 4002718:	18001526 	beq	r3,zero,4002770 <__swsetup_r+0x9c>
 400271c:	1100004c 	andi	r4,r2,1
 4002720:	20001c1e 	bne	r4,zero,4002794 <__swsetup_r+0xc0>
 4002724:	1080008c 	andi	r2,r2,2
 4002728:	1000291e 	bne	r2,zero,40027d0 <__swsetup_r+0xfc>
 400272c:	80800517 	ldw	r2,20(r16)
 4002730:	80800215 	stw	r2,8(r16)
 4002734:	18001c26 	beq	r3,zero,40027a8 <__swsetup_r+0xd4>
 4002738:	0005883a 	mov	r2,zero
 400273c:	dfc00217 	ldw	ra,8(sp)
 4002740:	dc400117 	ldw	r17,4(sp)
 4002744:	dc000017 	ldw	r16,0(sp)
 4002748:	dec00304 	addi	sp,sp,12
 400274c:	f800283a 	ret
 4002750:	2080040c 	andi	r2,r4,16
 4002754:	10002e26 	beq	r2,zero,4002810 <__swsetup_r+0x13c>
 4002758:	2080010c 	andi	r2,r4,4
 400275c:	10001e1e 	bne	r2,zero,40027d8 <__swsetup_r+0x104>
 4002760:	80c00417 	ldw	r3,16(r16)
 4002764:	20800214 	ori	r2,r4,8
 4002768:	8080030d 	sth	r2,12(r16)
 400276c:	183feb1e 	bne	r3,zero,400271c <__alt_data_end+0xfc00271c>
 4002770:	1100a00c 	andi	r4,r2,640
 4002774:	01408004 	movi	r5,512
 4002778:	217fe826 	beq	r4,r5,400271c <__alt_data_end+0xfc00271c>
 400277c:	800b883a 	mov	r5,r16
 4002780:	8809883a 	mov	r4,r17
 4002784:	40030bc0 	call	40030bc <__smakebuf_r>
 4002788:	8080030b 	ldhu	r2,12(r16)
 400278c:	80c00417 	ldw	r3,16(r16)
 4002790:	003fe206 	br	400271c <__alt_data_end+0xfc00271c>
 4002794:	80800517 	ldw	r2,20(r16)
 4002798:	80000215 	stw	zero,8(r16)
 400279c:	0085c83a 	sub	r2,zero,r2
 40027a0:	80800615 	stw	r2,24(r16)
 40027a4:	183fe41e 	bne	r3,zero,4002738 <__alt_data_end+0xfc002738>
 40027a8:	80c0030b 	ldhu	r3,12(r16)
 40027ac:	0005883a 	mov	r2,zero
 40027b0:	1900200c 	andi	r4,r3,128
 40027b4:	203fe126 	beq	r4,zero,400273c <__alt_data_end+0xfc00273c>
 40027b8:	18c01014 	ori	r3,r3,64
 40027bc:	80c0030d 	sth	r3,12(r16)
 40027c0:	00bfffc4 	movi	r2,-1
 40027c4:	003fdd06 	br	400273c <__alt_data_end+0xfc00273c>
 40027c8:	4000ea00 	call	4000ea0 <__sinit>
 40027cc:	003fcd06 	br	4002704 <__alt_data_end+0xfc002704>
 40027d0:	0005883a 	mov	r2,zero
 40027d4:	003fd606 	br	4002730 <__alt_data_end+0xfc002730>
 40027d8:	81400c17 	ldw	r5,48(r16)
 40027dc:	28000626 	beq	r5,zero,40027f8 <__swsetup_r+0x124>
 40027e0:	80801004 	addi	r2,r16,64
 40027e4:	28800326 	beq	r5,r2,40027f4 <__swsetup_r+0x120>
 40027e8:	8809883a 	mov	r4,r17
 40027ec:	4002d4c0 	call	4002d4c <_free_r>
 40027f0:	8100030b 	ldhu	r4,12(r16)
 40027f4:	80000c15 	stw	zero,48(r16)
 40027f8:	80c00417 	ldw	r3,16(r16)
 40027fc:	00bff6c4 	movi	r2,-37
 4002800:	1108703a 	and	r4,r2,r4
 4002804:	80000115 	stw	zero,4(r16)
 4002808:	80c00015 	stw	r3,0(r16)
 400280c:	003fd506 	br	4002764 <__alt_data_end+0xfc002764>
 4002810:	00800244 	movi	r2,9
 4002814:	88800015 	stw	r2,0(r17)
 4002818:	20801014 	ori	r2,r4,64
 400281c:	8080030d 	sth	r2,12(r16)
 4002820:	00bfffc4 	movi	r2,-1
 4002824:	003fc506 	br	400273c <__alt_data_end+0xfc00273c>

04002828 <_close_r>:
 4002828:	defffd04 	addi	sp,sp,-12
 400282c:	dc000015 	stw	r16,0(sp)
 4002830:	04010074 	movhi	r16,1025
 4002834:	dc400115 	stw	r17,4(sp)
 4002838:	842b0c04 	addi	r16,r16,-21456
 400283c:	2023883a 	mov	r17,r4
 4002840:	2809883a 	mov	r4,r5
 4002844:	dfc00215 	stw	ra,8(sp)
 4002848:	80000015 	stw	zero,0(r16)
 400284c:	40035780 	call	4003578 <close>
 4002850:	00ffffc4 	movi	r3,-1
 4002854:	10c00526 	beq	r2,r3,400286c <_close_r+0x44>
 4002858:	dfc00217 	ldw	ra,8(sp)
 400285c:	dc400117 	ldw	r17,4(sp)
 4002860:	dc000017 	ldw	r16,0(sp)
 4002864:	dec00304 	addi	sp,sp,12
 4002868:	f800283a 	ret
 400286c:	80c00017 	ldw	r3,0(r16)
 4002870:	183ff926 	beq	r3,zero,4002858 <__alt_data_end+0xfc002858>
 4002874:	88c00015 	stw	r3,0(r17)
 4002878:	003ff706 	br	4002858 <__alt_data_end+0xfc002858>

0400287c <_fclose_r>:
 400287c:	28003926 	beq	r5,zero,4002964 <_fclose_r+0xe8>
 4002880:	defffc04 	addi	sp,sp,-16
 4002884:	dc400115 	stw	r17,4(sp)
 4002888:	dc000015 	stw	r16,0(sp)
 400288c:	dfc00315 	stw	ra,12(sp)
 4002890:	dc800215 	stw	r18,8(sp)
 4002894:	2023883a 	mov	r17,r4
 4002898:	2821883a 	mov	r16,r5
 400289c:	20000226 	beq	r4,zero,40028a8 <_fclose_r+0x2c>
 40028a0:	20800e17 	ldw	r2,56(r4)
 40028a4:	10002726 	beq	r2,zero,4002944 <_fclose_r+0xc8>
 40028a8:	8080030f 	ldh	r2,12(r16)
 40028ac:	1000071e 	bne	r2,zero,40028cc <_fclose_r+0x50>
 40028b0:	0005883a 	mov	r2,zero
 40028b4:	dfc00317 	ldw	ra,12(sp)
 40028b8:	dc800217 	ldw	r18,8(sp)
 40028bc:	dc400117 	ldw	r17,4(sp)
 40028c0:	dc000017 	ldw	r16,0(sp)
 40028c4:	dec00404 	addi	sp,sp,16
 40028c8:	f800283a 	ret
 40028cc:	800b883a 	mov	r5,r16
 40028d0:	8809883a 	mov	r4,r17
 40028d4:	40029800 	call	4002980 <__sflush_r>
 40028d8:	1025883a 	mov	r18,r2
 40028dc:	80800b17 	ldw	r2,44(r16)
 40028e0:	10000426 	beq	r2,zero,40028f4 <_fclose_r+0x78>
 40028e4:	81400717 	ldw	r5,28(r16)
 40028e8:	8809883a 	mov	r4,r17
 40028ec:	103ee83a 	callr	r2
 40028f0:	10001616 	blt	r2,zero,400294c <_fclose_r+0xd0>
 40028f4:	8080030b 	ldhu	r2,12(r16)
 40028f8:	1080200c 	andi	r2,r2,128
 40028fc:	1000151e 	bne	r2,zero,4002954 <_fclose_r+0xd8>
 4002900:	81400c17 	ldw	r5,48(r16)
 4002904:	28000526 	beq	r5,zero,400291c <_fclose_r+0xa0>
 4002908:	80801004 	addi	r2,r16,64
 400290c:	28800226 	beq	r5,r2,4002918 <_fclose_r+0x9c>
 4002910:	8809883a 	mov	r4,r17
 4002914:	4002d4c0 	call	4002d4c <_free_r>
 4002918:	80000c15 	stw	zero,48(r16)
 400291c:	81401117 	ldw	r5,68(r16)
 4002920:	28000326 	beq	r5,zero,4002930 <_fclose_r+0xb4>
 4002924:	8809883a 	mov	r4,r17
 4002928:	4002d4c0 	call	4002d4c <_free_r>
 400292c:	80001115 	stw	zero,68(r16)
 4002930:	4000eb00 	call	4000eb0 <__sfp_lock_acquire>
 4002934:	8000030d 	sth	zero,12(r16)
 4002938:	4000eb40 	call	4000eb4 <__sfp_lock_release>
 400293c:	9005883a 	mov	r2,r18
 4002940:	003fdc06 	br	40028b4 <__alt_data_end+0xfc0028b4>
 4002944:	4000ea00 	call	4000ea0 <__sinit>
 4002948:	003fd706 	br	40028a8 <__alt_data_end+0xfc0028a8>
 400294c:	04bfffc4 	movi	r18,-1
 4002950:	003fe806 	br	40028f4 <__alt_data_end+0xfc0028f4>
 4002954:	81400417 	ldw	r5,16(r16)
 4002958:	8809883a 	mov	r4,r17
 400295c:	4002d4c0 	call	4002d4c <_free_r>
 4002960:	003fe706 	br	4002900 <__alt_data_end+0xfc002900>
 4002964:	0005883a 	mov	r2,zero
 4002968:	f800283a 	ret

0400296c <fclose>:
 400296c:	00810074 	movhi	r2,1025
 4002970:	10a41e04 	addi	r2,r2,-28552
 4002974:	200b883a 	mov	r5,r4
 4002978:	11000017 	ldw	r4,0(r2)
 400297c:	400287c1 	jmpi	400287c <_fclose_r>

04002980 <__sflush_r>:
 4002980:	2880030b 	ldhu	r2,12(r5)
 4002984:	defffb04 	addi	sp,sp,-20
 4002988:	dcc00315 	stw	r19,12(sp)
 400298c:	dc400115 	stw	r17,4(sp)
 4002990:	dfc00415 	stw	ra,16(sp)
 4002994:	dc800215 	stw	r18,8(sp)
 4002998:	dc000015 	stw	r16,0(sp)
 400299c:	10c0020c 	andi	r3,r2,8
 40029a0:	2823883a 	mov	r17,r5
 40029a4:	2027883a 	mov	r19,r4
 40029a8:	1800311e 	bne	r3,zero,4002a70 <__sflush_r+0xf0>
 40029ac:	28c00117 	ldw	r3,4(r5)
 40029b0:	10820014 	ori	r2,r2,2048
 40029b4:	2880030d 	sth	r2,12(r5)
 40029b8:	00c04b0e 	bge	zero,r3,4002ae8 <__sflush_r+0x168>
 40029bc:	8a000a17 	ldw	r8,40(r17)
 40029c0:	40002326 	beq	r8,zero,4002a50 <__sflush_r+0xd0>
 40029c4:	9c000017 	ldw	r16,0(r19)
 40029c8:	10c4000c 	andi	r3,r2,4096
 40029cc:	98000015 	stw	zero,0(r19)
 40029d0:	18004826 	beq	r3,zero,4002af4 <__sflush_r+0x174>
 40029d4:	89801417 	ldw	r6,80(r17)
 40029d8:	10c0010c 	andi	r3,r2,4
 40029dc:	18000626 	beq	r3,zero,40029f8 <__sflush_r+0x78>
 40029e0:	88c00117 	ldw	r3,4(r17)
 40029e4:	88800c17 	ldw	r2,48(r17)
 40029e8:	30cdc83a 	sub	r6,r6,r3
 40029ec:	10000226 	beq	r2,zero,40029f8 <__sflush_r+0x78>
 40029f0:	88800f17 	ldw	r2,60(r17)
 40029f4:	308dc83a 	sub	r6,r6,r2
 40029f8:	89400717 	ldw	r5,28(r17)
 40029fc:	000f883a 	mov	r7,zero
 4002a00:	9809883a 	mov	r4,r19
 4002a04:	403ee83a 	callr	r8
 4002a08:	00ffffc4 	movi	r3,-1
 4002a0c:	10c04426 	beq	r2,r3,4002b20 <__sflush_r+0x1a0>
 4002a10:	88c0030b 	ldhu	r3,12(r17)
 4002a14:	89000417 	ldw	r4,16(r17)
 4002a18:	88000115 	stw	zero,4(r17)
 4002a1c:	197dffcc 	andi	r5,r3,63487
 4002a20:	8940030d 	sth	r5,12(r17)
 4002a24:	89000015 	stw	r4,0(r17)
 4002a28:	18c4000c 	andi	r3,r3,4096
 4002a2c:	18002c1e 	bne	r3,zero,4002ae0 <__sflush_r+0x160>
 4002a30:	89400c17 	ldw	r5,48(r17)
 4002a34:	9c000015 	stw	r16,0(r19)
 4002a38:	28000526 	beq	r5,zero,4002a50 <__sflush_r+0xd0>
 4002a3c:	88801004 	addi	r2,r17,64
 4002a40:	28800226 	beq	r5,r2,4002a4c <__sflush_r+0xcc>
 4002a44:	9809883a 	mov	r4,r19
 4002a48:	4002d4c0 	call	4002d4c <_free_r>
 4002a4c:	88000c15 	stw	zero,48(r17)
 4002a50:	0005883a 	mov	r2,zero
 4002a54:	dfc00417 	ldw	ra,16(sp)
 4002a58:	dcc00317 	ldw	r19,12(sp)
 4002a5c:	dc800217 	ldw	r18,8(sp)
 4002a60:	dc400117 	ldw	r17,4(sp)
 4002a64:	dc000017 	ldw	r16,0(sp)
 4002a68:	dec00504 	addi	sp,sp,20
 4002a6c:	f800283a 	ret
 4002a70:	2c800417 	ldw	r18,16(r5)
 4002a74:	903ff626 	beq	r18,zero,4002a50 <__alt_data_end+0xfc002a50>
 4002a78:	2c000017 	ldw	r16,0(r5)
 4002a7c:	108000cc 	andi	r2,r2,3
 4002a80:	2c800015 	stw	r18,0(r5)
 4002a84:	84a1c83a 	sub	r16,r16,r18
 4002a88:	1000131e 	bne	r2,zero,4002ad8 <__sflush_r+0x158>
 4002a8c:	28800517 	ldw	r2,20(r5)
 4002a90:	88800215 	stw	r2,8(r17)
 4002a94:	04000316 	blt	zero,r16,4002aa4 <__sflush_r+0x124>
 4002a98:	003fed06 	br	4002a50 <__alt_data_end+0xfc002a50>
 4002a9c:	90a5883a 	add	r18,r18,r2
 4002aa0:	043feb0e 	bge	zero,r16,4002a50 <__alt_data_end+0xfc002a50>
 4002aa4:	88800917 	ldw	r2,36(r17)
 4002aa8:	89400717 	ldw	r5,28(r17)
 4002aac:	800f883a 	mov	r7,r16
 4002ab0:	900d883a 	mov	r6,r18
 4002ab4:	9809883a 	mov	r4,r19
 4002ab8:	103ee83a 	callr	r2
 4002abc:	80a1c83a 	sub	r16,r16,r2
 4002ac0:	00bff616 	blt	zero,r2,4002a9c <__alt_data_end+0xfc002a9c>
 4002ac4:	88c0030b 	ldhu	r3,12(r17)
 4002ac8:	00bfffc4 	movi	r2,-1
 4002acc:	18c01014 	ori	r3,r3,64
 4002ad0:	88c0030d 	sth	r3,12(r17)
 4002ad4:	003fdf06 	br	4002a54 <__alt_data_end+0xfc002a54>
 4002ad8:	0005883a 	mov	r2,zero
 4002adc:	003fec06 	br	4002a90 <__alt_data_end+0xfc002a90>
 4002ae0:	88801415 	stw	r2,80(r17)
 4002ae4:	003fd206 	br	4002a30 <__alt_data_end+0xfc002a30>
 4002ae8:	28c00f17 	ldw	r3,60(r5)
 4002aec:	00ffb316 	blt	zero,r3,40029bc <__alt_data_end+0xfc0029bc>
 4002af0:	003fd706 	br	4002a50 <__alt_data_end+0xfc002a50>
 4002af4:	89400717 	ldw	r5,28(r17)
 4002af8:	000d883a 	mov	r6,zero
 4002afc:	01c00044 	movi	r7,1
 4002b00:	9809883a 	mov	r4,r19
 4002b04:	403ee83a 	callr	r8
 4002b08:	100d883a 	mov	r6,r2
 4002b0c:	00bfffc4 	movi	r2,-1
 4002b10:	30801426 	beq	r6,r2,4002b64 <__sflush_r+0x1e4>
 4002b14:	8880030b 	ldhu	r2,12(r17)
 4002b18:	8a000a17 	ldw	r8,40(r17)
 4002b1c:	003fae06 	br	40029d8 <__alt_data_end+0xfc0029d8>
 4002b20:	98c00017 	ldw	r3,0(r19)
 4002b24:	183fba26 	beq	r3,zero,4002a10 <__alt_data_end+0xfc002a10>
 4002b28:	01000744 	movi	r4,29
 4002b2c:	19000626 	beq	r3,r4,4002b48 <__sflush_r+0x1c8>
 4002b30:	01000584 	movi	r4,22
 4002b34:	19000426 	beq	r3,r4,4002b48 <__sflush_r+0x1c8>
 4002b38:	88c0030b 	ldhu	r3,12(r17)
 4002b3c:	18c01014 	ori	r3,r3,64
 4002b40:	88c0030d 	sth	r3,12(r17)
 4002b44:	003fc306 	br	4002a54 <__alt_data_end+0xfc002a54>
 4002b48:	8880030b 	ldhu	r2,12(r17)
 4002b4c:	88c00417 	ldw	r3,16(r17)
 4002b50:	88000115 	stw	zero,4(r17)
 4002b54:	10bdffcc 	andi	r2,r2,63487
 4002b58:	8880030d 	sth	r2,12(r17)
 4002b5c:	88c00015 	stw	r3,0(r17)
 4002b60:	003fb306 	br	4002a30 <__alt_data_end+0xfc002a30>
 4002b64:	98800017 	ldw	r2,0(r19)
 4002b68:	103fea26 	beq	r2,zero,4002b14 <__alt_data_end+0xfc002b14>
 4002b6c:	00c00744 	movi	r3,29
 4002b70:	10c00226 	beq	r2,r3,4002b7c <__sflush_r+0x1fc>
 4002b74:	00c00584 	movi	r3,22
 4002b78:	10c0031e 	bne	r2,r3,4002b88 <__sflush_r+0x208>
 4002b7c:	9c000015 	stw	r16,0(r19)
 4002b80:	0005883a 	mov	r2,zero
 4002b84:	003fb306 	br	4002a54 <__alt_data_end+0xfc002a54>
 4002b88:	88c0030b 	ldhu	r3,12(r17)
 4002b8c:	3005883a 	mov	r2,r6
 4002b90:	18c01014 	ori	r3,r3,64
 4002b94:	88c0030d 	sth	r3,12(r17)
 4002b98:	003fae06 	br	4002a54 <__alt_data_end+0xfc002a54>

04002b9c <_fflush_r>:
 4002b9c:	defffd04 	addi	sp,sp,-12
 4002ba0:	dc000115 	stw	r16,4(sp)
 4002ba4:	dfc00215 	stw	ra,8(sp)
 4002ba8:	2021883a 	mov	r16,r4
 4002bac:	20000226 	beq	r4,zero,4002bb8 <_fflush_r+0x1c>
 4002bb0:	20800e17 	ldw	r2,56(r4)
 4002bb4:	10000c26 	beq	r2,zero,4002be8 <_fflush_r+0x4c>
 4002bb8:	2880030f 	ldh	r2,12(r5)
 4002bbc:	1000051e 	bne	r2,zero,4002bd4 <_fflush_r+0x38>
 4002bc0:	0005883a 	mov	r2,zero
 4002bc4:	dfc00217 	ldw	ra,8(sp)
 4002bc8:	dc000117 	ldw	r16,4(sp)
 4002bcc:	dec00304 	addi	sp,sp,12
 4002bd0:	f800283a 	ret
 4002bd4:	8009883a 	mov	r4,r16
 4002bd8:	dfc00217 	ldw	ra,8(sp)
 4002bdc:	dc000117 	ldw	r16,4(sp)
 4002be0:	dec00304 	addi	sp,sp,12
 4002be4:	40029801 	jmpi	4002980 <__sflush_r>
 4002be8:	d9400015 	stw	r5,0(sp)
 4002bec:	4000ea00 	call	4000ea0 <__sinit>
 4002bf0:	d9400017 	ldw	r5,0(sp)
 4002bf4:	003ff006 	br	4002bb8 <__alt_data_end+0xfc002bb8>

04002bf8 <fflush>:
 4002bf8:	20000526 	beq	r4,zero,4002c10 <fflush+0x18>
 4002bfc:	00810074 	movhi	r2,1025
 4002c00:	10a41e04 	addi	r2,r2,-28552
 4002c04:	200b883a 	mov	r5,r4
 4002c08:	11000017 	ldw	r4,0(r2)
 4002c0c:	4002b9c1 	jmpi	4002b9c <_fflush_r>
 4002c10:	00810074 	movhi	r2,1025
 4002c14:	10a41d04 	addi	r2,r2,-28556
 4002c18:	11000017 	ldw	r4,0(r2)
 4002c1c:	01410034 	movhi	r5,1024
 4002c20:	294ae704 	addi	r5,r5,11164
 4002c24:	40014701 	jmpi	4001470 <_fwalk_reent>

04002c28 <_malloc_trim_r>:
 4002c28:	defffb04 	addi	sp,sp,-20
 4002c2c:	dcc00315 	stw	r19,12(sp)
 4002c30:	04c10034 	movhi	r19,1024
 4002c34:	dc800215 	stw	r18,8(sp)
 4002c38:	dc400115 	stw	r17,4(sp)
 4002c3c:	dc000015 	stw	r16,0(sp)
 4002c40:	dfc00415 	stw	ra,16(sp)
 4002c44:	2821883a 	mov	r16,r5
 4002c48:	9cde5604 	addi	r19,r19,31064
 4002c4c:	2025883a 	mov	r18,r4
 4002c50:	4003ab80 	call	4003ab8 <__malloc_lock>
 4002c54:	98800217 	ldw	r2,8(r19)
 4002c58:	14400117 	ldw	r17,4(r2)
 4002c5c:	00bfff04 	movi	r2,-4
 4002c60:	88a2703a 	and	r17,r17,r2
 4002c64:	8c21c83a 	sub	r16,r17,r16
 4002c68:	8403fbc4 	addi	r16,r16,4079
 4002c6c:	8020d33a 	srli	r16,r16,12
 4002c70:	0083ffc4 	movi	r2,4095
 4002c74:	843fffc4 	addi	r16,r16,-1
 4002c78:	8020933a 	slli	r16,r16,12
 4002c7c:	1400060e 	bge	r2,r16,4002c98 <_malloc_trim_r+0x70>
 4002c80:	000b883a 	mov	r5,zero
 4002c84:	9009883a 	mov	r4,r18
 4002c88:	40024e40 	call	40024e4 <_sbrk_r>
 4002c8c:	98c00217 	ldw	r3,8(r19)
 4002c90:	1c47883a 	add	r3,r3,r17
 4002c94:	10c00a26 	beq	r2,r3,4002cc0 <_malloc_trim_r+0x98>
 4002c98:	9009883a 	mov	r4,r18
 4002c9c:	4003adc0 	call	4003adc <__malloc_unlock>
 4002ca0:	0005883a 	mov	r2,zero
 4002ca4:	dfc00417 	ldw	ra,16(sp)
 4002ca8:	dcc00317 	ldw	r19,12(sp)
 4002cac:	dc800217 	ldw	r18,8(sp)
 4002cb0:	dc400117 	ldw	r17,4(sp)
 4002cb4:	dc000017 	ldw	r16,0(sp)
 4002cb8:	dec00504 	addi	sp,sp,20
 4002cbc:	f800283a 	ret
 4002cc0:	040bc83a 	sub	r5,zero,r16
 4002cc4:	9009883a 	mov	r4,r18
 4002cc8:	40024e40 	call	40024e4 <_sbrk_r>
 4002ccc:	00ffffc4 	movi	r3,-1
 4002cd0:	10c00d26 	beq	r2,r3,4002d08 <_malloc_trim_r+0xe0>
 4002cd4:	00c10074 	movhi	r3,1025
 4002cd8:	18eb1404 	addi	r3,r3,-21424
 4002cdc:	18800017 	ldw	r2,0(r3)
 4002ce0:	99000217 	ldw	r4,8(r19)
 4002ce4:	8c23c83a 	sub	r17,r17,r16
 4002ce8:	8c400054 	ori	r17,r17,1
 4002cec:	1421c83a 	sub	r16,r2,r16
 4002cf0:	24400115 	stw	r17,4(r4)
 4002cf4:	9009883a 	mov	r4,r18
 4002cf8:	1c000015 	stw	r16,0(r3)
 4002cfc:	4003adc0 	call	4003adc <__malloc_unlock>
 4002d00:	00800044 	movi	r2,1
 4002d04:	003fe706 	br	4002ca4 <__alt_data_end+0xfc002ca4>
 4002d08:	000b883a 	mov	r5,zero
 4002d0c:	9009883a 	mov	r4,r18
 4002d10:	40024e40 	call	40024e4 <_sbrk_r>
 4002d14:	99000217 	ldw	r4,8(r19)
 4002d18:	014003c4 	movi	r5,15
 4002d1c:	1107c83a 	sub	r3,r2,r4
 4002d20:	28ffdd0e 	bge	r5,r3,4002c98 <__alt_data_end+0xfc002c98>
 4002d24:	01410074 	movhi	r5,1025
 4002d28:	29641f04 	addi	r5,r5,-28548
 4002d2c:	29400017 	ldw	r5,0(r5)
 4002d30:	18c00054 	ori	r3,r3,1
 4002d34:	20c00115 	stw	r3,4(r4)
 4002d38:	00c10074 	movhi	r3,1025
 4002d3c:	1145c83a 	sub	r2,r2,r5
 4002d40:	18eb1404 	addi	r3,r3,-21424
 4002d44:	18800015 	stw	r2,0(r3)
 4002d48:	003fd306 	br	4002c98 <__alt_data_end+0xfc002c98>

04002d4c <_free_r>:
 4002d4c:	28004126 	beq	r5,zero,4002e54 <_free_r+0x108>
 4002d50:	defffd04 	addi	sp,sp,-12
 4002d54:	dc400115 	stw	r17,4(sp)
 4002d58:	dc000015 	stw	r16,0(sp)
 4002d5c:	2023883a 	mov	r17,r4
 4002d60:	2821883a 	mov	r16,r5
 4002d64:	dfc00215 	stw	ra,8(sp)
 4002d68:	4003ab80 	call	4003ab8 <__malloc_lock>
 4002d6c:	81ffff17 	ldw	r7,-4(r16)
 4002d70:	00bfff84 	movi	r2,-2
 4002d74:	01010034 	movhi	r4,1024
 4002d78:	81bffe04 	addi	r6,r16,-8
 4002d7c:	3884703a 	and	r2,r7,r2
 4002d80:	211e5604 	addi	r4,r4,31064
 4002d84:	308b883a 	add	r5,r6,r2
 4002d88:	2a400117 	ldw	r9,4(r5)
 4002d8c:	22000217 	ldw	r8,8(r4)
 4002d90:	00ffff04 	movi	r3,-4
 4002d94:	48c6703a 	and	r3,r9,r3
 4002d98:	2a005726 	beq	r5,r8,4002ef8 <_free_r+0x1ac>
 4002d9c:	28c00115 	stw	r3,4(r5)
 4002da0:	39c0004c 	andi	r7,r7,1
 4002da4:	3800091e 	bne	r7,zero,4002dcc <_free_r+0x80>
 4002da8:	823ffe17 	ldw	r8,-8(r16)
 4002dac:	22400204 	addi	r9,r4,8
 4002db0:	320dc83a 	sub	r6,r6,r8
 4002db4:	31c00217 	ldw	r7,8(r6)
 4002db8:	1205883a 	add	r2,r2,r8
 4002dbc:	3a406526 	beq	r7,r9,4002f54 <_free_r+0x208>
 4002dc0:	32000317 	ldw	r8,12(r6)
 4002dc4:	3a000315 	stw	r8,12(r7)
 4002dc8:	41c00215 	stw	r7,8(r8)
 4002dcc:	28cf883a 	add	r7,r5,r3
 4002dd0:	39c00117 	ldw	r7,4(r7)
 4002dd4:	39c0004c 	andi	r7,r7,1
 4002dd8:	38003a26 	beq	r7,zero,4002ec4 <_free_r+0x178>
 4002ddc:	10c00054 	ori	r3,r2,1
 4002de0:	30c00115 	stw	r3,4(r6)
 4002de4:	3087883a 	add	r3,r6,r2
 4002de8:	18800015 	stw	r2,0(r3)
 4002dec:	00c07fc4 	movi	r3,511
 4002df0:	18801936 	bltu	r3,r2,4002e58 <_free_r+0x10c>
 4002df4:	1004d0fa 	srli	r2,r2,3
 4002df8:	01c00044 	movi	r7,1
 4002dfc:	21400117 	ldw	r5,4(r4)
 4002e00:	10c00044 	addi	r3,r2,1
 4002e04:	18c7883a 	add	r3,r3,r3
 4002e08:	1005d0ba 	srai	r2,r2,2
 4002e0c:	18c7883a 	add	r3,r3,r3
 4002e10:	18c7883a 	add	r3,r3,r3
 4002e14:	1907883a 	add	r3,r3,r4
 4002e18:	3884983a 	sll	r2,r7,r2
 4002e1c:	19c00017 	ldw	r7,0(r3)
 4002e20:	1a3ffe04 	addi	r8,r3,-8
 4002e24:	1144b03a 	or	r2,r2,r5
 4002e28:	32000315 	stw	r8,12(r6)
 4002e2c:	31c00215 	stw	r7,8(r6)
 4002e30:	20800115 	stw	r2,4(r4)
 4002e34:	19800015 	stw	r6,0(r3)
 4002e38:	39800315 	stw	r6,12(r7)
 4002e3c:	8809883a 	mov	r4,r17
 4002e40:	dfc00217 	ldw	ra,8(sp)
 4002e44:	dc400117 	ldw	r17,4(sp)
 4002e48:	dc000017 	ldw	r16,0(sp)
 4002e4c:	dec00304 	addi	sp,sp,12
 4002e50:	4003adc1 	jmpi	4003adc <__malloc_unlock>
 4002e54:	f800283a 	ret
 4002e58:	100ad27a 	srli	r5,r2,9
 4002e5c:	00c00104 	movi	r3,4
 4002e60:	19404a36 	bltu	r3,r5,4002f8c <_free_r+0x240>
 4002e64:	100ad1ba 	srli	r5,r2,6
 4002e68:	28c00e44 	addi	r3,r5,57
 4002e6c:	18c7883a 	add	r3,r3,r3
 4002e70:	29400e04 	addi	r5,r5,56
 4002e74:	18c7883a 	add	r3,r3,r3
 4002e78:	18c7883a 	add	r3,r3,r3
 4002e7c:	1909883a 	add	r4,r3,r4
 4002e80:	20c00017 	ldw	r3,0(r4)
 4002e84:	01c10034 	movhi	r7,1024
 4002e88:	213ffe04 	addi	r4,r4,-8
 4002e8c:	39de5604 	addi	r7,r7,31064
 4002e90:	20c04426 	beq	r4,r3,4002fa4 <_free_r+0x258>
 4002e94:	01ffff04 	movi	r7,-4
 4002e98:	19400117 	ldw	r5,4(r3)
 4002e9c:	29ca703a 	and	r5,r5,r7
 4002ea0:	1140022e 	bgeu	r2,r5,4002eac <_free_r+0x160>
 4002ea4:	18c00217 	ldw	r3,8(r3)
 4002ea8:	20fffb1e 	bne	r4,r3,4002e98 <__alt_data_end+0xfc002e98>
 4002eac:	19000317 	ldw	r4,12(r3)
 4002eb0:	31000315 	stw	r4,12(r6)
 4002eb4:	30c00215 	stw	r3,8(r6)
 4002eb8:	21800215 	stw	r6,8(r4)
 4002ebc:	19800315 	stw	r6,12(r3)
 4002ec0:	003fde06 	br	4002e3c <__alt_data_end+0xfc002e3c>
 4002ec4:	29c00217 	ldw	r7,8(r5)
 4002ec8:	10c5883a 	add	r2,r2,r3
 4002ecc:	00c10034 	movhi	r3,1024
 4002ed0:	18de5804 	addi	r3,r3,31072
 4002ed4:	38c03b26 	beq	r7,r3,4002fc4 <_free_r+0x278>
 4002ed8:	2a000317 	ldw	r8,12(r5)
 4002edc:	11400054 	ori	r5,r2,1
 4002ee0:	3087883a 	add	r3,r6,r2
 4002ee4:	3a000315 	stw	r8,12(r7)
 4002ee8:	41c00215 	stw	r7,8(r8)
 4002eec:	31400115 	stw	r5,4(r6)
 4002ef0:	18800015 	stw	r2,0(r3)
 4002ef4:	003fbd06 	br	4002dec <__alt_data_end+0xfc002dec>
 4002ef8:	39c0004c 	andi	r7,r7,1
 4002efc:	10c5883a 	add	r2,r2,r3
 4002f00:	3800071e 	bne	r7,zero,4002f20 <_free_r+0x1d4>
 4002f04:	81fffe17 	ldw	r7,-8(r16)
 4002f08:	31cdc83a 	sub	r6,r6,r7
 4002f0c:	30c00317 	ldw	r3,12(r6)
 4002f10:	31400217 	ldw	r5,8(r6)
 4002f14:	11c5883a 	add	r2,r2,r7
 4002f18:	28c00315 	stw	r3,12(r5)
 4002f1c:	19400215 	stw	r5,8(r3)
 4002f20:	10c00054 	ori	r3,r2,1
 4002f24:	30c00115 	stw	r3,4(r6)
 4002f28:	00c10074 	movhi	r3,1025
 4002f2c:	18e42004 	addi	r3,r3,-28544
 4002f30:	18c00017 	ldw	r3,0(r3)
 4002f34:	21800215 	stw	r6,8(r4)
 4002f38:	10ffc036 	bltu	r2,r3,4002e3c <__alt_data_end+0xfc002e3c>
 4002f3c:	00810074 	movhi	r2,1025
 4002f40:	10ab0b04 	addi	r2,r2,-21460
 4002f44:	11400017 	ldw	r5,0(r2)
 4002f48:	8809883a 	mov	r4,r17
 4002f4c:	4002c280 	call	4002c28 <_malloc_trim_r>
 4002f50:	003fba06 	br	4002e3c <__alt_data_end+0xfc002e3c>
 4002f54:	28c9883a 	add	r4,r5,r3
 4002f58:	21000117 	ldw	r4,4(r4)
 4002f5c:	2100004c 	andi	r4,r4,1
 4002f60:	2000391e 	bne	r4,zero,4003048 <_free_r+0x2fc>
 4002f64:	29c00217 	ldw	r7,8(r5)
 4002f68:	29000317 	ldw	r4,12(r5)
 4002f6c:	1885883a 	add	r2,r3,r2
 4002f70:	10c00054 	ori	r3,r2,1
 4002f74:	39000315 	stw	r4,12(r7)
 4002f78:	21c00215 	stw	r7,8(r4)
 4002f7c:	30c00115 	stw	r3,4(r6)
 4002f80:	308d883a 	add	r6,r6,r2
 4002f84:	30800015 	stw	r2,0(r6)
 4002f88:	003fac06 	br	4002e3c <__alt_data_end+0xfc002e3c>
 4002f8c:	00c00504 	movi	r3,20
 4002f90:	19401536 	bltu	r3,r5,4002fe8 <_free_r+0x29c>
 4002f94:	28c01704 	addi	r3,r5,92
 4002f98:	18c7883a 	add	r3,r3,r3
 4002f9c:	294016c4 	addi	r5,r5,91
 4002fa0:	003fb406 	br	4002e74 <__alt_data_end+0xfc002e74>
 4002fa4:	280bd0ba 	srai	r5,r5,2
 4002fa8:	00c00044 	movi	r3,1
 4002fac:	38800117 	ldw	r2,4(r7)
 4002fb0:	194a983a 	sll	r5,r3,r5
 4002fb4:	2007883a 	mov	r3,r4
 4002fb8:	2884b03a 	or	r2,r5,r2
 4002fbc:	38800115 	stw	r2,4(r7)
 4002fc0:	003fbb06 	br	4002eb0 <__alt_data_end+0xfc002eb0>
 4002fc4:	21800515 	stw	r6,20(r4)
 4002fc8:	21800415 	stw	r6,16(r4)
 4002fcc:	10c00054 	ori	r3,r2,1
 4002fd0:	31c00315 	stw	r7,12(r6)
 4002fd4:	31c00215 	stw	r7,8(r6)
 4002fd8:	30c00115 	stw	r3,4(r6)
 4002fdc:	308d883a 	add	r6,r6,r2
 4002fe0:	30800015 	stw	r2,0(r6)
 4002fe4:	003f9506 	br	4002e3c <__alt_data_end+0xfc002e3c>
 4002fe8:	00c01504 	movi	r3,84
 4002fec:	19400536 	bltu	r3,r5,4003004 <_free_r+0x2b8>
 4002ff0:	100ad33a 	srli	r5,r2,12
 4002ff4:	28c01bc4 	addi	r3,r5,111
 4002ff8:	18c7883a 	add	r3,r3,r3
 4002ffc:	29401b84 	addi	r5,r5,110
 4003000:	003f9c06 	br	4002e74 <__alt_data_end+0xfc002e74>
 4003004:	00c05504 	movi	r3,340
 4003008:	19400536 	bltu	r3,r5,4003020 <_free_r+0x2d4>
 400300c:	100ad3fa 	srli	r5,r2,15
 4003010:	28c01e04 	addi	r3,r5,120
 4003014:	18c7883a 	add	r3,r3,r3
 4003018:	29401dc4 	addi	r5,r5,119
 400301c:	003f9506 	br	4002e74 <__alt_data_end+0xfc002e74>
 4003020:	00c15504 	movi	r3,1364
 4003024:	19400536 	bltu	r3,r5,400303c <_free_r+0x2f0>
 4003028:	100ad4ba 	srli	r5,r2,18
 400302c:	28c01f44 	addi	r3,r5,125
 4003030:	18c7883a 	add	r3,r3,r3
 4003034:	29401f04 	addi	r5,r5,124
 4003038:	003f8e06 	br	4002e74 <__alt_data_end+0xfc002e74>
 400303c:	00c03f84 	movi	r3,254
 4003040:	01401f84 	movi	r5,126
 4003044:	003f8b06 	br	4002e74 <__alt_data_end+0xfc002e74>
 4003048:	10c00054 	ori	r3,r2,1
 400304c:	30c00115 	stw	r3,4(r6)
 4003050:	308d883a 	add	r6,r6,r2
 4003054:	30800015 	stw	r2,0(r6)
 4003058:	003f7806 	br	4002e3c <__alt_data_end+0xfc002e3c>

0400305c <_lseek_r>:
 400305c:	defffd04 	addi	sp,sp,-12
 4003060:	2805883a 	mov	r2,r5
 4003064:	dc000015 	stw	r16,0(sp)
 4003068:	04010074 	movhi	r16,1025
 400306c:	dc400115 	stw	r17,4(sp)
 4003070:	300b883a 	mov	r5,r6
 4003074:	842b0c04 	addi	r16,r16,-21456
 4003078:	2023883a 	mov	r17,r4
 400307c:	380d883a 	mov	r6,r7
 4003080:	1009883a 	mov	r4,r2
 4003084:	dfc00215 	stw	ra,8(sp)
 4003088:	80000015 	stw	zero,0(r16)
 400308c:	40039680 	call	4003968 <lseek>
 4003090:	00ffffc4 	movi	r3,-1
 4003094:	10c00526 	beq	r2,r3,40030ac <_lseek_r+0x50>
 4003098:	dfc00217 	ldw	ra,8(sp)
 400309c:	dc400117 	ldw	r17,4(sp)
 40030a0:	dc000017 	ldw	r16,0(sp)
 40030a4:	dec00304 	addi	sp,sp,12
 40030a8:	f800283a 	ret
 40030ac:	80c00017 	ldw	r3,0(r16)
 40030b0:	183ff926 	beq	r3,zero,4003098 <__alt_data_end+0xfc003098>
 40030b4:	88c00015 	stw	r3,0(r17)
 40030b8:	003ff706 	br	4003098 <__alt_data_end+0xfc003098>

040030bc <__smakebuf_r>:
 40030bc:	2880030b 	ldhu	r2,12(r5)
 40030c0:	10c0008c 	andi	r3,r2,2
 40030c4:	1800411e 	bne	r3,zero,40031cc <__smakebuf_r+0x110>
 40030c8:	deffec04 	addi	sp,sp,-80
 40030cc:	dc000f15 	stw	r16,60(sp)
 40030d0:	2821883a 	mov	r16,r5
 40030d4:	2940038f 	ldh	r5,14(r5)
 40030d8:	dc401015 	stw	r17,64(sp)
 40030dc:	dfc01315 	stw	ra,76(sp)
 40030e0:	dcc01215 	stw	r19,72(sp)
 40030e4:	dc801115 	stw	r18,68(sp)
 40030e8:	2023883a 	mov	r17,r4
 40030ec:	28001c16 	blt	r5,zero,4003160 <__smakebuf_r+0xa4>
 40030f0:	d80d883a 	mov	r6,sp
 40030f4:	40032d80 	call	40032d8 <_fstat_r>
 40030f8:	10001816 	blt	r2,zero,400315c <__smakebuf_r+0xa0>
 40030fc:	d8800117 	ldw	r2,4(sp)
 4003100:	00e00014 	movui	r3,32768
 4003104:	10bc000c 	andi	r2,r2,61440
 4003108:	14c80020 	cmpeqi	r19,r2,8192
 400310c:	10c03726 	beq	r2,r3,40031ec <__smakebuf_r+0x130>
 4003110:	80c0030b 	ldhu	r3,12(r16)
 4003114:	18c20014 	ori	r3,r3,2048
 4003118:	80c0030d 	sth	r3,12(r16)
 400311c:	00c80004 	movi	r3,8192
 4003120:	10c0521e 	bne	r2,r3,400326c <__smakebuf_r+0x1b0>
 4003124:	8140038f 	ldh	r5,14(r16)
 4003128:	8809883a 	mov	r4,r17
 400312c:	40033340 	call	4003334 <_isatty_r>
 4003130:	10004c26 	beq	r2,zero,4003264 <__smakebuf_r+0x1a8>
 4003134:	8080030b 	ldhu	r2,12(r16)
 4003138:	80c010c4 	addi	r3,r16,67
 400313c:	80c00015 	stw	r3,0(r16)
 4003140:	10800054 	ori	r2,r2,1
 4003144:	8080030d 	sth	r2,12(r16)
 4003148:	00800044 	movi	r2,1
 400314c:	80c00415 	stw	r3,16(r16)
 4003150:	80800515 	stw	r2,20(r16)
 4003154:	04810004 	movi	r18,1024
 4003158:	00000706 	br	4003178 <__smakebuf_r+0xbc>
 400315c:	8080030b 	ldhu	r2,12(r16)
 4003160:	10c0200c 	andi	r3,r2,128
 4003164:	18001f1e 	bne	r3,zero,40031e4 <__smakebuf_r+0x128>
 4003168:	04810004 	movi	r18,1024
 400316c:	10820014 	ori	r2,r2,2048
 4003170:	8080030d 	sth	r2,12(r16)
 4003174:	0027883a 	mov	r19,zero
 4003178:	900b883a 	mov	r5,r18
 400317c:	8809883a 	mov	r4,r17
 4003180:	40015340 	call	4001534 <_malloc_r>
 4003184:	10002c26 	beq	r2,zero,4003238 <__smakebuf_r+0x17c>
 4003188:	80c0030b 	ldhu	r3,12(r16)
 400318c:	01010034 	movhi	r4,1024
 4003190:	2102d604 	addi	r4,r4,2904
 4003194:	89000f15 	stw	r4,60(r17)
 4003198:	18c02014 	ori	r3,r3,128
 400319c:	80c0030d 	sth	r3,12(r16)
 40031a0:	80800015 	stw	r2,0(r16)
 40031a4:	80800415 	stw	r2,16(r16)
 40031a8:	84800515 	stw	r18,20(r16)
 40031ac:	98001a1e 	bne	r19,zero,4003218 <__smakebuf_r+0x15c>
 40031b0:	dfc01317 	ldw	ra,76(sp)
 40031b4:	dcc01217 	ldw	r19,72(sp)
 40031b8:	dc801117 	ldw	r18,68(sp)
 40031bc:	dc401017 	ldw	r17,64(sp)
 40031c0:	dc000f17 	ldw	r16,60(sp)
 40031c4:	dec01404 	addi	sp,sp,80
 40031c8:	f800283a 	ret
 40031cc:	288010c4 	addi	r2,r5,67
 40031d0:	28800015 	stw	r2,0(r5)
 40031d4:	28800415 	stw	r2,16(r5)
 40031d8:	00800044 	movi	r2,1
 40031dc:	28800515 	stw	r2,20(r5)
 40031e0:	f800283a 	ret
 40031e4:	04801004 	movi	r18,64
 40031e8:	003fe006 	br	400316c <__alt_data_end+0xfc00316c>
 40031ec:	81000a17 	ldw	r4,40(r16)
 40031f0:	00c10034 	movhi	r3,1024
 40031f4:	18c98404 	addi	r3,r3,9744
 40031f8:	20ffc51e 	bne	r4,r3,4003110 <__alt_data_end+0xfc003110>
 40031fc:	8080030b 	ldhu	r2,12(r16)
 4003200:	04810004 	movi	r18,1024
 4003204:	84801315 	stw	r18,76(r16)
 4003208:	1484b03a 	or	r2,r2,r18
 400320c:	8080030d 	sth	r2,12(r16)
 4003210:	0027883a 	mov	r19,zero
 4003214:	003fd806 	br	4003178 <__alt_data_end+0xfc003178>
 4003218:	8140038f 	ldh	r5,14(r16)
 400321c:	8809883a 	mov	r4,r17
 4003220:	40033340 	call	4003334 <_isatty_r>
 4003224:	103fe226 	beq	r2,zero,40031b0 <__alt_data_end+0xfc0031b0>
 4003228:	8080030b 	ldhu	r2,12(r16)
 400322c:	10800054 	ori	r2,r2,1
 4003230:	8080030d 	sth	r2,12(r16)
 4003234:	003fde06 	br	40031b0 <__alt_data_end+0xfc0031b0>
 4003238:	8080030b 	ldhu	r2,12(r16)
 400323c:	10c0800c 	andi	r3,r2,512
 4003240:	183fdb1e 	bne	r3,zero,40031b0 <__alt_data_end+0xfc0031b0>
 4003244:	10800094 	ori	r2,r2,2
 4003248:	80c010c4 	addi	r3,r16,67
 400324c:	8080030d 	sth	r2,12(r16)
 4003250:	00800044 	movi	r2,1
 4003254:	80c00015 	stw	r3,0(r16)
 4003258:	80c00415 	stw	r3,16(r16)
 400325c:	80800515 	stw	r2,20(r16)
 4003260:	003fd306 	br	40031b0 <__alt_data_end+0xfc0031b0>
 4003264:	04810004 	movi	r18,1024
 4003268:	003fc306 	br	4003178 <__alt_data_end+0xfc003178>
 400326c:	0027883a 	mov	r19,zero
 4003270:	04810004 	movi	r18,1024
 4003274:	003fc006 	br	4003178 <__alt_data_end+0xfc003178>

04003278 <_read_r>:
 4003278:	defffd04 	addi	sp,sp,-12
 400327c:	2805883a 	mov	r2,r5
 4003280:	dc000015 	stw	r16,0(sp)
 4003284:	04010074 	movhi	r16,1025
 4003288:	dc400115 	stw	r17,4(sp)
 400328c:	300b883a 	mov	r5,r6
 4003290:	842b0c04 	addi	r16,r16,-21456
 4003294:	2023883a 	mov	r17,r4
 4003298:	380d883a 	mov	r6,r7
 400329c:	1009883a 	mov	r4,r2
 40032a0:	dfc00215 	stw	ra,8(sp)
 40032a4:	80000015 	stw	zero,0(r16)
 40032a8:	4003b3c0 	call	4003b3c <read>
 40032ac:	00ffffc4 	movi	r3,-1
 40032b0:	10c00526 	beq	r2,r3,40032c8 <_read_r+0x50>
 40032b4:	dfc00217 	ldw	ra,8(sp)
 40032b8:	dc400117 	ldw	r17,4(sp)
 40032bc:	dc000017 	ldw	r16,0(sp)
 40032c0:	dec00304 	addi	sp,sp,12
 40032c4:	f800283a 	ret
 40032c8:	80c00017 	ldw	r3,0(r16)
 40032cc:	183ff926 	beq	r3,zero,40032b4 <__alt_data_end+0xfc0032b4>
 40032d0:	88c00015 	stw	r3,0(r17)
 40032d4:	003ff706 	br	40032b4 <__alt_data_end+0xfc0032b4>

040032d8 <_fstat_r>:
 40032d8:	defffd04 	addi	sp,sp,-12
 40032dc:	2805883a 	mov	r2,r5
 40032e0:	dc000015 	stw	r16,0(sp)
 40032e4:	04010074 	movhi	r16,1025
 40032e8:	dc400115 	stw	r17,4(sp)
 40032ec:	842b0c04 	addi	r16,r16,-21456
 40032f0:	2023883a 	mov	r17,r4
 40032f4:	300b883a 	mov	r5,r6
 40032f8:	1009883a 	mov	r4,r2
 40032fc:	dfc00215 	stw	ra,8(sp)
 4003300:	80000015 	stw	zero,0(r16)
 4003304:	40036b00 	call	40036b0 <fstat>
 4003308:	00ffffc4 	movi	r3,-1
 400330c:	10c00526 	beq	r2,r3,4003324 <_fstat_r+0x4c>
 4003310:	dfc00217 	ldw	ra,8(sp)
 4003314:	dc400117 	ldw	r17,4(sp)
 4003318:	dc000017 	ldw	r16,0(sp)
 400331c:	dec00304 	addi	sp,sp,12
 4003320:	f800283a 	ret
 4003324:	80c00017 	ldw	r3,0(r16)
 4003328:	183ff926 	beq	r3,zero,4003310 <__alt_data_end+0xfc003310>
 400332c:	88c00015 	stw	r3,0(r17)
 4003330:	003ff706 	br	4003310 <__alt_data_end+0xfc003310>

04003334 <_isatty_r>:
 4003334:	defffd04 	addi	sp,sp,-12
 4003338:	dc000015 	stw	r16,0(sp)
 400333c:	04010074 	movhi	r16,1025
 4003340:	dc400115 	stw	r17,4(sp)
 4003344:	842b0c04 	addi	r16,r16,-21456
 4003348:	2023883a 	mov	r17,r4
 400334c:	2809883a 	mov	r4,r5
 4003350:	dfc00215 	stw	ra,8(sp)
 4003354:	80000015 	stw	zero,0(r16)
 4003358:	400379c0 	call	400379c <isatty>
 400335c:	00ffffc4 	movi	r3,-1
 4003360:	10c00526 	beq	r2,r3,4003378 <_isatty_r+0x44>
 4003364:	dfc00217 	ldw	ra,8(sp)
 4003368:	dc400117 	ldw	r17,4(sp)
 400336c:	dc000017 	ldw	r16,0(sp)
 4003370:	dec00304 	addi	sp,sp,12
 4003374:	f800283a 	ret
 4003378:	80c00017 	ldw	r3,0(r16)
 400337c:	183ff926 	beq	r3,zero,4003364 <__alt_data_end+0xfc003364>
 4003380:	88c00015 	stw	r3,0(r17)
 4003384:	003ff706 	br	4003364 <__alt_data_end+0xfc003364>

04003388 <__divsi3>:
 4003388:	20001b16 	blt	r4,zero,40033f8 <__divsi3+0x70>
 400338c:	000f883a 	mov	r7,zero
 4003390:	28001616 	blt	r5,zero,40033ec <__divsi3+0x64>
 4003394:	200d883a 	mov	r6,r4
 4003398:	29001a2e 	bgeu	r5,r4,4003404 <__divsi3+0x7c>
 400339c:	00800804 	movi	r2,32
 40033a0:	00c00044 	movi	r3,1
 40033a4:	00000106 	br	40033ac <__divsi3+0x24>
 40033a8:	10000d26 	beq	r2,zero,40033e0 <__divsi3+0x58>
 40033ac:	294b883a 	add	r5,r5,r5
 40033b0:	10bfffc4 	addi	r2,r2,-1
 40033b4:	18c7883a 	add	r3,r3,r3
 40033b8:	293ffb36 	bltu	r5,r4,40033a8 <__alt_data_end+0xfc0033a8>
 40033bc:	0005883a 	mov	r2,zero
 40033c0:	18000726 	beq	r3,zero,40033e0 <__divsi3+0x58>
 40033c4:	0005883a 	mov	r2,zero
 40033c8:	31400236 	bltu	r6,r5,40033d4 <__divsi3+0x4c>
 40033cc:	314dc83a 	sub	r6,r6,r5
 40033d0:	10c4b03a 	or	r2,r2,r3
 40033d4:	1806d07a 	srli	r3,r3,1
 40033d8:	280ad07a 	srli	r5,r5,1
 40033dc:	183ffa1e 	bne	r3,zero,40033c8 <__alt_data_end+0xfc0033c8>
 40033e0:	38000126 	beq	r7,zero,40033e8 <__divsi3+0x60>
 40033e4:	0085c83a 	sub	r2,zero,r2
 40033e8:	f800283a 	ret
 40033ec:	014bc83a 	sub	r5,zero,r5
 40033f0:	39c0005c 	xori	r7,r7,1
 40033f4:	003fe706 	br	4003394 <__alt_data_end+0xfc003394>
 40033f8:	0109c83a 	sub	r4,zero,r4
 40033fc:	01c00044 	movi	r7,1
 4003400:	003fe306 	br	4003390 <__alt_data_end+0xfc003390>
 4003404:	00c00044 	movi	r3,1
 4003408:	003fee06 	br	40033c4 <__alt_data_end+0xfc0033c4>

0400340c <__modsi3>:
 400340c:	20001716 	blt	r4,zero,400346c <__modsi3+0x60>
 4003410:	000f883a 	mov	r7,zero
 4003414:	2005883a 	mov	r2,r4
 4003418:	28001216 	blt	r5,zero,4003464 <__modsi3+0x58>
 400341c:	2900162e 	bgeu	r5,r4,4003478 <__modsi3+0x6c>
 4003420:	01800804 	movi	r6,32
 4003424:	00c00044 	movi	r3,1
 4003428:	00000106 	br	4003430 <__modsi3+0x24>
 400342c:	30000a26 	beq	r6,zero,4003458 <__modsi3+0x4c>
 4003430:	294b883a 	add	r5,r5,r5
 4003434:	31bfffc4 	addi	r6,r6,-1
 4003438:	18c7883a 	add	r3,r3,r3
 400343c:	293ffb36 	bltu	r5,r4,400342c <__alt_data_end+0xfc00342c>
 4003440:	18000526 	beq	r3,zero,4003458 <__modsi3+0x4c>
 4003444:	1806d07a 	srli	r3,r3,1
 4003448:	11400136 	bltu	r2,r5,4003450 <__modsi3+0x44>
 400344c:	1145c83a 	sub	r2,r2,r5
 4003450:	280ad07a 	srli	r5,r5,1
 4003454:	183ffb1e 	bne	r3,zero,4003444 <__alt_data_end+0xfc003444>
 4003458:	38000126 	beq	r7,zero,4003460 <__modsi3+0x54>
 400345c:	0085c83a 	sub	r2,zero,r2
 4003460:	f800283a 	ret
 4003464:	014bc83a 	sub	r5,zero,r5
 4003468:	003fec06 	br	400341c <__alt_data_end+0xfc00341c>
 400346c:	0109c83a 	sub	r4,zero,r4
 4003470:	01c00044 	movi	r7,1
 4003474:	003fe706 	br	4003414 <__alt_data_end+0xfc003414>
 4003478:	00c00044 	movi	r3,1
 400347c:	003ff106 	br	4003444 <__alt_data_end+0xfc003444>

04003480 <__udivsi3>:
 4003480:	200d883a 	mov	r6,r4
 4003484:	2900152e 	bgeu	r5,r4,40034dc <__udivsi3+0x5c>
 4003488:	28001416 	blt	r5,zero,40034dc <__udivsi3+0x5c>
 400348c:	00800804 	movi	r2,32
 4003490:	00c00044 	movi	r3,1
 4003494:	00000206 	br	40034a0 <__udivsi3+0x20>
 4003498:	10000e26 	beq	r2,zero,40034d4 <__udivsi3+0x54>
 400349c:	28000516 	blt	r5,zero,40034b4 <__udivsi3+0x34>
 40034a0:	294b883a 	add	r5,r5,r5
 40034a4:	10bfffc4 	addi	r2,r2,-1
 40034a8:	18c7883a 	add	r3,r3,r3
 40034ac:	293ffa36 	bltu	r5,r4,4003498 <__alt_data_end+0xfc003498>
 40034b0:	18000826 	beq	r3,zero,40034d4 <__udivsi3+0x54>
 40034b4:	0005883a 	mov	r2,zero
 40034b8:	31400236 	bltu	r6,r5,40034c4 <__udivsi3+0x44>
 40034bc:	314dc83a 	sub	r6,r6,r5
 40034c0:	10c4b03a 	or	r2,r2,r3
 40034c4:	1806d07a 	srli	r3,r3,1
 40034c8:	280ad07a 	srli	r5,r5,1
 40034cc:	183ffa1e 	bne	r3,zero,40034b8 <__alt_data_end+0xfc0034b8>
 40034d0:	f800283a 	ret
 40034d4:	0005883a 	mov	r2,zero
 40034d8:	f800283a 	ret
 40034dc:	00c00044 	movi	r3,1
 40034e0:	003ff406 	br	40034b4 <__alt_data_end+0xfc0034b4>

040034e4 <__umodsi3>:
 40034e4:	2005883a 	mov	r2,r4
 40034e8:	2900122e 	bgeu	r5,r4,4003534 <__umodsi3+0x50>
 40034ec:	28001116 	blt	r5,zero,4003534 <__umodsi3+0x50>
 40034f0:	01800804 	movi	r6,32
 40034f4:	00c00044 	movi	r3,1
 40034f8:	00000206 	br	4003504 <__umodsi3+0x20>
 40034fc:	30000c26 	beq	r6,zero,4003530 <__umodsi3+0x4c>
 4003500:	28000516 	blt	r5,zero,4003518 <__umodsi3+0x34>
 4003504:	294b883a 	add	r5,r5,r5
 4003508:	31bfffc4 	addi	r6,r6,-1
 400350c:	18c7883a 	add	r3,r3,r3
 4003510:	293ffa36 	bltu	r5,r4,40034fc <__alt_data_end+0xfc0034fc>
 4003514:	18000626 	beq	r3,zero,4003530 <__umodsi3+0x4c>
 4003518:	1806d07a 	srli	r3,r3,1
 400351c:	11400136 	bltu	r2,r5,4003524 <__umodsi3+0x40>
 4003520:	1145c83a 	sub	r2,r2,r5
 4003524:	280ad07a 	srli	r5,r5,1
 4003528:	183ffb1e 	bne	r3,zero,4003518 <__alt_data_end+0xfc003518>
 400352c:	f800283a 	ret
 4003530:	f800283a 	ret
 4003534:	00c00044 	movi	r3,1
 4003538:	003ff706 	br	4003518 <__alt_data_end+0xfc003518>

0400353c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400353c:	defffe04 	addi	sp,sp,-8
 4003540:	dfc00115 	stw	ra,4(sp)
 4003544:	df000015 	stw	fp,0(sp)
 4003548:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400354c:	d0a00917 	ldw	r2,-32732(gp)
 4003550:	10000326 	beq	r2,zero,4003560 <alt_get_errno+0x24>
 4003554:	d0a00917 	ldw	r2,-32732(gp)
 4003558:	103ee83a 	callr	r2
 400355c:	00000106 	br	4003564 <alt_get_errno+0x28>
 4003560:	d0a6ef04 	addi	r2,gp,-25668
}
 4003564:	e037883a 	mov	sp,fp
 4003568:	dfc00117 	ldw	ra,4(sp)
 400356c:	df000017 	ldw	fp,0(sp)
 4003570:	dec00204 	addi	sp,sp,8
 4003574:	f800283a 	ret

04003578 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 4003578:	defffb04 	addi	sp,sp,-20
 400357c:	dfc00415 	stw	ra,16(sp)
 4003580:	df000315 	stw	fp,12(sp)
 4003584:	df000304 	addi	fp,sp,12
 4003588:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 400358c:	e0bfff17 	ldw	r2,-4(fp)
 4003590:	10000616 	blt	r2,zero,40035ac <close+0x34>
 4003594:	e0bfff17 	ldw	r2,-4(fp)
 4003598:	10c00324 	muli	r3,r2,12
 400359c:	00810034 	movhi	r2,1024
 40035a0:	109f6204 	addi	r2,r2,32136
 40035a4:	1885883a 	add	r2,r3,r2
 40035a8:	00000106 	br	40035b0 <close+0x38>
 40035ac:	0005883a 	mov	r2,zero
 40035b0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 40035b4:	e0bffd17 	ldw	r2,-12(fp)
 40035b8:	10001926 	beq	r2,zero,4003620 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 40035bc:	e0bffd17 	ldw	r2,-12(fp)
 40035c0:	10800017 	ldw	r2,0(r2)
 40035c4:	10800417 	ldw	r2,16(r2)
 40035c8:	10000626 	beq	r2,zero,40035e4 <close+0x6c>
 40035cc:	e0bffd17 	ldw	r2,-12(fp)
 40035d0:	10800017 	ldw	r2,0(r2)
 40035d4:	10800417 	ldw	r2,16(r2)
 40035d8:	e13ffd17 	ldw	r4,-12(fp)
 40035dc:	103ee83a 	callr	r2
 40035e0:	00000106 	br	40035e8 <close+0x70>
 40035e4:	0005883a 	mov	r2,zero
 40035e8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 40035ec:	e13fff17 	ldw	r4,-4(fp)
 40035f0:	4003c380 	call	4003c38 <alt_release_fd>
    if (rval < 0)
 40035f4:	e0bffe17 	ldw	r2,-8(fp)
 40035f8:	1000070e 	bge	r2,zero,4003618 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 40035fc:	400353c0 	call	400353c <alt_get_errno>
 4003600:	1007883a 	mov	r3,r2
 4003604:	e0bffe17 	ldw	r2,-8(fp)
 4003608:	0085c83a 	sub	r2,zero,r2
 400360c:	18800015 	stw	r2,0(r3)
      return -1;
 4003610:	00bfffc4 	movi	r2,-1
 4003614:	00000706 	br	4003634 <close+0xbc>
    }
    return 0;
 4003618:	0005883a 	mov	r2,zero
 400361c:	00000506 	br	4003634 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4003620:	400353c0 	call	400353c <alt_get_errno>
 4003624:	1007883a 	mov	r3,r2
 4003628:	00801444 	movi	r2,81
 400362c:	18800015 	stw	r2,0(r3)
    return -1;
 4003630:	00bfffc4 	movi	r2,-1
  }
}
 4003634:	e037883a 	mov	sp,fp
 4003638:	dfc00117 	ldw	ra,4(sp)
 400363c:	df000017 	ldw	fp,0(sp)
 4003640:	dec00204 	addi	sp,sp,8
 4003644:	f800283a 	ret

04003648 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 4003648:	defffc04 	addi	sp,sp,-16
 400364c:	df000315 	stw	fp,12(sp)
 4003650:	df000304 	addi	fp,sp,12
 4003654:	e13ffd15 	stw	r4,-12(fp)
 4003658:	e17ffe15 	stw	r5,-8(fp)
 400365c:	e1bfff15 	stw	r6,-4(fp)
  return len;
 4003660:	e0bfff17 	ldw	r2,-4(fp)
}
 4003664:	e037883a 	mov	sp,fp
 4003668:	df000017 	ldw	fp,0(sp)
 400366c:	dec00104 	addi	sp,sp,4
 4003670:	f800283a 	ret

04003674 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4003674:	defffe04 	addi	sp,sp,-8
 4003678:	dfc00115 	stw	ra,4(sp)
 400367c:	df000015 	stw	fp,0(sp)
 4003680:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4003684:	d0a00917 	ldw	r2,-32732(gp)
 4003688:	10000326 	beq	r2,zero,4003698 <alt_get_errno+0x24>
 400368c:	d0a00917 	ldw	r2,-32732(gp)
 4003690:	103ee83a 	callr	r2
 4003694:	00000106 	br	400369c <alt_get_errno+0x28>
 4003698:	d0a6ef04 	addi	r2,gp,-25668
}
 400369c:	e037883a 	mov	sp,fp
 40036a0:	dfc00117 	ldw	ra,4(sp)
 40036a4:	df000017 	ldw	fp,0(sp)
 40036a8:	dec00204 	addi	sp,sp,8
 40036ac:	f800283a 	ret

040036b0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 40036b0:	defffb04 	addi	sp,sp,-20
 40036b4:	dfc00415 	stw	ra,16(sp)
 40036b8:	df000315 	stw	fp,12(sp)
 40036bc:	df000304 	addi	fp,sp,12
 40036c0:	e13ffe15 	stw	r4,-8(fp)
 40036c4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 40036c8:	e0bffe17 	ldw	r2,-8(fp)
 40036cc:	10000616 	blt	r2,zero,40036e8 <fstat+0x38>
 40036d0:	e0bffe17 	ldw	r2,-8(fp)
 40036d4:	10c00324 	muli	r3,r2,12
 40036d8:	00810034 	movhi	r2,1024
 40036dc:	109f6204 	addi	r2,r2,32136
 40036e0:	1885883a 	add	r2,r3,r2
 40036e4:	00000106 	br	40036ec <fstat+0x3c>
 40036e8:	0005883a 	mov	r2,zero
 40036ec:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 40036f0:	e0bffd17 	ldw	r2,-12(fp)
 40036f4:	10001026 	beq	r2,zero,4003738 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 40036f8:	e0bffd17 	ldw	r2,-12(fp)
 40036fc:	10800017 	ldw	r2,0(r2)
 4003700:	10800817 	ldw	r2,32(r2)
 4003704:	10000726 	beq	r2,zero,4003724 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 4003708:	e0bffd17 	ldw	r2,-12(fp)
 400370c:	10800017 	ldw	r2,0(r2)
 4003710:	10800817 	ldw	r2,32(r2)
 4003714:	e17fff17 	ldw	r5,-4(fp)
 4003718:	e13ffd17 	ldw	r4,-12(fp)
 400371c:	103ee83a 	callr	r2
 4003720:	00000a06 	br	400374c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 4003724:	e0bfff17 	ldw	r2,-4(fp)
 4003728:	00c80004 	movi	r3,8192
 400372c:	10c00115 	stw	r3,4(r2)
      return 0;
 4003730:	0005883a 	mov	r2,zero
 4003734:	00000506 	br	400374c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4003738:	40036740 	call	4003674 <alt_get_errno>
 400373c:	1007883a 	mov	r3,r2
 4003740:	00801444 	movi	r2,81
 4003744:	18800015 	stw	r2,0(r3)
    return -1;
 4003748:	00bfffc4 	movi	r2,-1
  }
}
 400374c:	e037883a 	mov	sp,fp
 4003750:	dfc00117 	ldw	ra,4(sp)
 4003754:	df000017 	ldw	fp,0(sp)
 4003758:	dec00204 	addi	sp,sp,8
 400375c:	f800283a 	ret

04003760 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4003760:	defffe04 	addi	sp,sp,-8
 4003764:	dfc00115 	stw	ra,4(sp)
 4003768:	df000015 	stw	fp,0(sp)
 400376c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4003770:	d0a00917 	ldw	r2,-32732(gp)
 4003774:	10000326 	beq	r2,zero,4003784 <alt_get_errno+0x24>
 4003778:	d0a00917 	ldw	r2,-32732(gp)
 400377c:	103ee83a 	callr	r2
 4003780:	00000106 	br	4003788 <alt_get_errno+0x28>
 4003784:	d0a6ef04 	addi	r2,gp,-25668
}
 4003788:	e037883a 	mov	sp,fp
 400378c:	dfc00117 	ldw	ra,4(sp)
 4003790:	df000017 	ldw	fp,0(sp)
 4003794:	dec00204 	addi	sp,sp,8
 4003798:	f800283a 	ret

0400379c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 400379c:	deffed04 	addi	sp,sp,-76
 40037a0:	dfc01215 	stw	ra,72(sp)
 40037a4:	df001115 	stw	fp,68(sp)
 40037a8:	df001104 	addi	fp,sp,68
 40037ac:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 40037b0:	e0bfff17 	ldw	r2,-4(fp)
 40037b4:	10000616 	blt	r2,zero,40037d0 <isatty+0x34>
 40037b8:	e0bfff17 	ldw	r2,-4(fp)
 40037bc:	10c00324 	muli	r3,r2,12
 40037c0:	00810034 	movhi	r2,1024
 40037c4:	109f6204 	addi	r2,r2,32136
 40037c8:	1885883a 	add	r2,r3,r2
 40037cc:	00000106 	br	40037d4 <isatty+0x38>
 40037d0:	0005883a 	mov	r2,zero
 40037d4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 40037d8:	e0bfef17 	ldw	r2,-68(fp)
 40037dc:	10000e26 	beq	r2,zero,4003818 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 40037e0:	e0bfef17 	ldw	r2,-68(fp)
 40037e4:	10800017 	ldw	r2,0(r2)
 40037e8:	10800817 	ldw	r2,32(r2)
 40037ec:	1000021e 	bne	r2,zero,40037f8 <isatty+0x5c>
    {
      return 1;
 40037f0:	00800044 	movi	r2,1
 40037f4:	00000d06 	br	400382c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 40037f8:	e0bff004 	addi	r2,fp,-64
 40037fc:	100b883a 	mov	r5,r2
 4003800:	e13fff17 	ldw	r4,-4(fp)
 4003804:	40036b00 	call	40036b0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 4003808:	e0bff117 	ldw	r2,-60(fp)
 400380c:	10880020 	cmpeqi	r2,r2,8192
 4003810:	10803fcc 	andi	r2,r2,255
 4003814:	00000506 	br	400382c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4003818:	40037600 	call	4003760 <alt_get_errno>
 400381c:	1007883a 	mov	r3,r2
 4003820:	00801444 	movi	r2,81
 4003824:	18800015 	stw	r2,0(r3)
    return 0;
 4003828:	0005883a 	mov	r2,zero
  }
}
 400382c:	e037883a 	mov	sp,fp
 4003830:	dfc00117 	ldw	ra,4(sp)
 4003834:	df000017 	ldw	fp,0(sp)
 4003838:	dec00204 	addi	sp,sp,8
 400383c:	f800283a 	ret

04003840 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 4003840:	defffc04 	addi	sp,sp,-16
 4003844:	df000315 	stw	fp,12(sp)
 4003848:	df000304 	addi	fp,sp,12
 400384c:	e13ffd15 	stw	r4,-12(fp)
 4003850:	e17ffe15 	stw	r5,-8(fp)
 4003854:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 4003858:	e0fffe17 	ldw	r3,-8(fp)
 400385c:	e0bffd17 	ldw	r2,-12(fp)
 4003860:	18800c26 	beq	r3,r2,4003894 <alt_load_section+0x54>
  {
    while( to != end )
 4003864:	00000806 	br	4003888 <alt_load_section+0x48>
    {
      *to++ = *from++;
 4003868:	e0bffe17 	ldw	r2,-8(fp)
 400386c:	10c00104 	addi	r3,r2,4
 4003870:	e0fffe15 	stw	r3,-8(fp)
 4003874:	e0fffd17 	ldw	r3,-12(fp)
 4003878:	19000104 	addi	r4,r3,4
 400387c:	e13ffd15 	stw	r4,-12(fp)
 4003880:	18c00017 	ldw	r3,0(r3)
 4003884:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 4003888:	e0fffe17 	ldw	r3,-8(fp)
 400388c:	e0bfff17 	ldw	r2,-4(fp)
 4003890:	18bff51e 	bne	r3,r2,4003868 <__alt_data_end+0xfc003868>
    {
      *to++ = *from++;
    }
  }
}
 4003894:	0001883a 	nop
 4003898:	e037883a 	mov	sp,fp
 400389c:	df000017 	ldw	fp,0(sp)
 40038a0:	dec00104 	addi	sp,sp,4
 40038a4:	f800283a 	ret

040038a8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 40038a8:	defffe04 	addi	sp,sp,-8
 40038ac:	dfc00115 	stw	ra,4(sp)
 40038b0:	df000015 	stw	fp,0(sp)
 40038b4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 40038b8:	01810074 	movhi	r6,1025
 40038bc:	31a42b04 	addi	r6,r6,-28500
 40038c0:	01410034 	movhi	r5,1024
 40038c4:	295d4d04 	addi	r5,r5,30004
 40038c8:	01010074 	movhi	r4,1025
 40038cc:	21242b04 	addi	r4,r4,-28500
 40038d0:	40038400 	call	4003840 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 40038d4:	01810034 	movhi	r6,1024
 40038d8:	31809204 	addi	r6,r6,584
 40038dc:	01410034 	movhi	r5,1024
 40038e0:	29400804 	addi	r5,r5,32
 40038e4:	01010034 	movhi	r4,1024
 40038e8:	21000804 	addi	r4,r4,32
 40038ec:	40038400 	call	4003840 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 40038f0:	01810034 	movhi	r6,1024
 40038f4:	319d4d04 	addi	r6,r6,30004
 40038f8:	01410034 	movhi	r5,1024
 40038fc:	295cc104 	addi	r5,r5,29444
 4003900:	01010034 	movhi	r4,1024
 4003904:	211cc104 	addi	r4,r4,29444
 4003908:	40038400 	call	4003840 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 400390c:	40062340 	call	4006234 <alt_dcache_flush_all>
  alt_icache_flush_all();
 4003910:	40064ac0 	call	40064ac <alt_icache_flush_all>
}
 4003914:	0001883a 	nop
 4003918:	e037883a 	mov	sp,fp
 400391c:	dfc00117 	ldw	ra,4(sp)
 4003920:	df000017 	ldw	fp,0(sp)
 4003924:	dec00204 	addi	sp,sp,8
 4003928:	f800283a 	ret

0400392c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400392c:	defffe04 	addi	sp,sp,-8
 4003930:	dfc00115 	stw	ra,4(sp)
 4003934:	df000015 	stw	fp,0(sp)
 4003938:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400393c:	d0a00917 	ldw	r2,-32732(gp)
 4003940:	10000326 	beq	r2,zero,4003950 <alt_get_errno+0x24>
 4003944:	d0a00917 	ldw	r2,-32732(gp)
 4003948:	103ee83a 	callr	r2
 400394c:	00000106 	br	4003954 <alt_get_errno+0x28>
 4003950:	d0a6ef04 	addi	r2,gp,-25668
}
 4003954:	e037883a 	mov	sp,fp
 4003958:	dfc00117 	ldw	ra,4(sp)
 400395c:	df000017 	ldw	fp,0(sp)
 4003960:	dec00204 	addi	sp,sp,8
 4003964:	f800283a 	ret

04003968 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 4003968:	defff904 	addi	sp,sp,-28
 400396c:	dfc00615 	stw	ra,24(sp)
 4003970:	df000515 	stw	fp,20(sp)
 4003974:	df000504 	addi	fp,sp,20
 4003978:	e13ffd15 	stw	r4,-12(fp)
 400397c:	e17ffe15 	stw	r5,-8(fp)
 4003980:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 4003984:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4003988:	e0bffd17 	ldw	r2,-12(fp)
 400398c:	10000616 	blt	r2,zero,40039a8 <lseek+0x40>
 4003990:	e0bffd17 	ldw	r2,-12(fp)
 4003994:	10c00324 	muli	r3,r2,12
 4003998:	00810034 	movhi	r2,1024
 400399c:	109f6204 	addi	r2,r2,32136
 40039a0:	1885883a 	add	r2,r3,r2
 40039a4:	00000106 	br	40039ac <lseek+0x44>
 40039a8:	0005883a 	mov	r2,zero
 40039ac:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 40039b0:	e0bffc17 	ldw	r2,-16(fp)
 40039b4:	10001026 	beq	r2,zero,40039f8 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 40039b8:	e0bffc17 	ldw	r2,-16(fp)
 40039bc:	10800017 	ldw	r2,0(r2)
 40039c0:	10800717 	ldw	r2,28(r2)
 40039c4:	10000926 	beq	r2,zero,40039ec <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 40039c8:	e0bffc17 	ldw	r2,-16(fp)
 40039cc:	10800017 	ldw	r2,0(r2)
 40039d0:	10800717 	ldw	r2,28(r2)
 40039d4:	e1bfff17 	ldw	r6,-4(fp)
 40039d8:	e17ffe17 	ldw	r5,-8(fp)
 40039dc:	e13ffc17 	ldw	r4,-16(fp)
 40039e0:	103ee83a 	callr	r2
 40039e4:	e0bffb15 	stw	r2,-20(fp)
 40039e8:	00000506 	br	4003a00 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 40039ec:	00bfde84 	movi	r2,-134
 40039f0:	e0bffb15 	stw	r2,-20(fp)
 40039f4:	00000206 	br	4003a00 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 40039f8:	00bfebc4 	movi	r2,-81
 40039fc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 4003a00:	e0bffb17 	ldw	r2,-20(fp)
 4003a04:	1000070e 	bge	r2,zero,4003a24 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 4003a08:	400392c0 	call	400392c <alt_get_errno>
 4003a0c:	1007883a 	mov	r3,r2
 4003a10:	e0bffb17 	ldw	r2,-20(fp)
 4003a14:	0085c83a 	sub	r2,zero,r2
 4003a18:	18800015 	stw	r2,0(r3)
    rc = -1;
 4003a1c:	00bfffc4 	movi	r2,-1
 4003a20:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 4003a24:	e0bffb17 	ldw	r2,-20(fp)
}
 4003a28:	e037883a 	mov	sp,fp
 4003a2c:	dfc00117 	ldw	ra,4(sp)
 4003a30:	df000017 	ldw	fp,0(sp)
 4003a34:	dec00204 	addi	sp,sp,8
 4003a38:	f800283a 	ret

04003a3c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 4003a3c:	defffd04 	addi	sp,sp,-12
 4003a40:	dfc00215 	stw	ra,8(sp)
 4003a44:	df000115 	stw	fp,4(sp)
 4003a48:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 4003a4c:	0009883a 	mov	r4,zero
 4003a50:	4003ee40 	call	4003ee4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 4003a54:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 4003a58:	4003f1c0 	call	4003f1c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 4003a5c:	01810034 	movhi	r6,1024
 4003a60:	319d2204 	addi	r6,r6,29832
 4003a64:	01410034 	movhi	r5,1024
 4003a68:	295d2204 	addi	r5,r5,29832
 4003a6c:	01010034 	movhi	r4,1024
 4003a70:	211d2204 	addi	r4,r4,29832
 4003a74:	40065a40 	call	40065a4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 4003a78:	400635c0 	call	400635c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 4003a7c:	01010034 	movhi	r4,1024
 4003a80:	2118ef04 	addi	r4,r4,25532
 4003a84:	4006e940 	call	4006e94 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 4003a88:	d0a6f017 	ldw	r2,-25664(gp)
 4003a8c:	d0e6f117 	ldw	r3,-25660(gp)
 4003a90:	d126f217 	ldw	r4,-25656(gp)
 4003a94:	200d883a 	mov	r6,r4
 4003a98:	180b883a 	mov	r5,r3
 4003a9c:	1009883a 	mov	r4,r2
 4003aa0:	40002940 	call	4000294 <main>
 4003aa4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 4003aa8:	01000044 	movi	r4,1
 4003aac:	40035780 	call	4003578 <close>
  exit (result);
 4003ab0:	e13fff17 	ldw	r4,-4(fp)
 4003ab4:	4006ea80 	call	4006ea8 <exit>

04003ab8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 4003ab8:	defffe04 	addi	sp,sp,-8
 4003abc:	df000115 	stw	fp,4(sp)
 4003ac0:	df000104 	addi	fp,sp,4
 4003ac4:	e13fff15 	stw	r4,-4(fp)
}
 4003ac8:	0001883a 	nop
 4003acc:	e037883a 	mov	sp,fp
 4003ad0:	df000017 	ldw	fp,0(sp)
 4003ad4:	dec00104 	addi	sp,sp,4
 4003ad8:	f800283a 	ret

04003adc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 4003adc:	defffe04 	addi	sp,sp,-8
 4003ae0:	df000115 	stw	fp,4(sp)
 4003ae4:	df000104 	addi	fp,sp,4
 4003ae8:	e13fff15 	stw	r4,-4(fp)
}
 4003aec:	0001883a 	nop
 4003af0:	e037883a 	mov	sp,fp
 4003af4:	df000017 	ldw	fp,0(sp)
 4003af8:	dec00104 	addi	sp,sp,4
 4003afc:	f800283a 	ret

04003b00 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4003b00:	defffe04 	addi	sp,sp,-8
 4003b04:	dfc00115 	stw	ra,4(sp)
 4003b08:	df000015 	stw	fp,0(sp)
 4003b0c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4003b10:	d0a00917 	ldw	r2,-32732(gp)
 4003b14:	10000326 	beq	r2,zero,4003b24 <alt_get_errno+0x24>
 4003b18:	d0a00917 	ldw	r2,-32732(gp)
 4003b1c:	103ee83a 	callr	r2
 4003b20:	00000106 	br	4003b28 <alt_get_errno+0x28>
 4003b24:	d0a6ef04 	addi	r2,gp,-25668
}
 4003b28:	e037883a 	mov	sp,fp
 4003b2c:	dfc00117 	ldw	ra,4(sp)
 4003b30:	df000017 	ldw	fp,0(sp)
 4003b34:	dec00204 	addi	sp,sp,8
 4003b38:	f800283a 	ret

04003b3c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 4003b3c:	defff904 	addi	sp,sp,-28
 4003b40:	dfc00615 	stw	ra,24(sp)
 4003b44:	df000515 	stw	fp,20(sp)
 4003b48:	df000504 	addi	fp,sp,20
 4003b4c:	e13ffd15 	stw	r4,-12(fp)
 4003b50:	e17ffe15 	stw	r5,-8(fp)
 4003b54:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4003b58:	e0bffd17 	ldw	r2,-12(fp)
 4003b5c:	10000616 	blt	r2,zero,4003b78 <read+0x3c>
 4003b60:	e0bffd17 	ldw	r2,-12(fp)
 4003b64:	10c00324 	muli	r3,r2,12
 4003b68:	00810034 	movhi	r2,1024
 4003b6c:	109f6204 	addi	r2,r2,32136
 4003b70:	1885883a 	add	r2,r3,r2
 4003b74:	00000106 	br	4003b7c <read+0x40>
 4003b78:	0005883a 	mov	r2,zero
 4003b7c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 4003b80:	e0bffb17 	ldw	r2,-20(fp)
 4003b84:	10002226 	beq	r2,zero,4003c10 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 4003b88:	e0bffb17 	ldw	r2,-20(fp)
 4003b8c:	10800217 	ldw	r2,8(r2)
 4003b90:	108000cc 	andi	r2,r2,3
 4003b94:	10800060 	cmpeqi	r2,r2,1
 4003b98:	1000181e 	bne	r2,zero,4003bfc <read+0xc0>
        (fd->dev->read))
 4003b9c:	e0bffb17 	ldw	r2,-20(fp)
 4003ba0:	10800017 	ldw	r2,0(r2)
 4003ba4:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 4003ba8:	10001426 	beq	r2,zero,4003bfc <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 4003bac:	e0bffb17 	ldw	r2,-20(fp)
 4003bb0:	10800017 	ldw	r2,0(r2)
 4003bb4:	10800517 	ldw	r2,20(r2)
 4003bb8:	e0ffff17 	ldw	r3,-4(fp)
 4003bbc:	180d883a 	mov	r6,r3
 4003bc0:	e17ffe17 	ldw	r5,-8(fp)
 4003bc4:	e13ffb17 	ldw	r4,-20(fp)
 4003bc8:	103ee83a 	callr	r2
 4003bcc:	e0bffc15 	stw	r2,-16(fp)
 4003bd0:	e0bffc17 	ldw	r2,-16(fp)
 4003bd4:	1000070e 	bge	r2,zero,4003bf4 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 4003bd8:	4003b000 	call	4003b00 <alt_get_errno>
 4003bdc:	1007883a 	mov	r3,r2
 4003be0:	e0bffc17 	ldw	r2,-16(fp)
 4003be4:	0085c83a 	sub	r2,zero,r2
 4003be8:	18800015 	stw	r2,0(r3)
          return -1;
 4003bec:	00bfffc4 	movi	r2,-1
 4003bf0:	00000c06 	br	4003c24 <read+0xe8>
        }
        return rval;
 4003bf4:	e0bffc17 	ldw	r2,-16(fp)
 4003bf8:	00000a06 	br	4003c24 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 4003bfc:	4003b000 	call	4003b00 <alt_get_errno>
 4003c00:	1007883a 	mov	r3,r2
 4003c04:	00800344 	movi	r2,13
 4003c08:	18800015 	stw	r2,0(r3)
 4003c0c:	00000406 	br	4003c20 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 4003c10:	4003b000 	call	4003b00 <alt_get_errno>
 4003c14:	1007883a 	mov	r3,r2
 4003c18:	00801444 	movi	r2,81
 4003c1c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 4003c20:	00bfffc4 	movi	r2,-1
}
 4003c24:	e037883a 	mov	sp,fp
 4003c28:	dfc00117 	ldw	ra,4(sp)
 4003c2c:	df000017 	ldw	fp,0(sp)
 4003c30:	dec00204 	addi	sp,sp,8
 4003c34:	f800283a 	ret

04003c38 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 4003c38:	defffe04 	addi	sp,sp,-8
 4003c3c:	df000115 	stw	fp,4(sp)
 4003c40:	df000104 	addi	fp,sp,4
 4003c44:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 4003c48:	e0bfff17 	ldw	r2,-4(fp)
 4003c4c:	108000d0 	cmplti	r2,r2,3
 4003c50:	10000d1e 	bne	r2,zero,4003c88 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 4003c54:	00810034 	movhi	r2,1024
 4003c58:	109f6204 	addi	r2,r2,32136
 4003c5c:	e0ffff17 	ldw	r3,-4(fp)
 4003c60:	18c00324 	muli	r3,r3,12
 4003c64:	10c5883a 	add	r2,r2,r3
 4003c68:	10800204 	addi	r2,r2,8
 4003c6c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 4003c70:	00810034 	movhi	r2,1024
 4003c74:	109f6204 	addi	r2,r2,32136
 4003c78:	e0ffff17 	ldw	r3,-4(fp)
 4003c7c:	18c00324 	muli	r3,r3,12
 4003c80:	10c5883a 	add	r2,r2,r3
 4003c84:	10000015 	stw	zero,0(r2)
  }
}
 4003c88:	0001883a 	nop
 4003c8c:	e037883a 	mov	sp,fp
 4003c90:	df000017 	ldw	fp,0(sp)
 4003c94:	dec00104 	addi	sp,sp,4
 4003c98:	f800283a 	ret

04003c9c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 4003c9c:	defff904 	addi	sp,sp,-28
 4003ca0:	df000615 	stw	fp,24(sp)
 4003ca4:	df000604 	addi	fp,sp,24
 4003ca8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4003cac:	0005303a 	rdctl	r2,status
 4003cb0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4003cb4:	e0fffe17 	ldw	r3,-8(fp)
 4003cb8:	00bfff84 	movi	r2,-2
 4003cbc:	1884703a 	and	r2,r3,r2
 4003cc0:	1001703a 	wrctl	status,r2
  
  return context;
 4003cc4:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 4003cc8:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 4003ccc:	d0a00a17 	ldw	r2,-32728(gp)
 4003cd0:	10c000c4 	addi	r3,r2,3
 4003cd4:	00bfff04 	movi	r2,-4
 4003cd8:	1884703a 	and	r2,r3,r2
 4003cdc:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 4003ce0:	d0e00a17 	ldw	r3,-32728(gp)
 4003ce4:	e0bfff17 	ldw	r2,-4(fp)
 4003ce8:	1887883a 	add	r3,r3,r2
 4003cec:	00820034 	movhi	r2,2048
 4003cf0:	10800004 	addi	r2,r2,0
 4003cf4:	10c0062e 	bgeu	r2,r3,4003d10 <sbrk+0x74>
 4003cf8:	e0bffb17 	ldw	r2,-20(fp)
 4003cfc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4003d00:	e0bffa17 	ldw	r2,-24(fp)
 4003d04:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 4003d08:	00bfffc4 	movi	r2,-1
 4003d0c:	00000b06 	br	4003d3c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 4003d10:	d0a00a17 	ldw	r2,-32728(gp)
 4003d14:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 4003d18:	d0e00a17 	ldw	r3,-32728(gp)
 4003d1c:	e0bfff17 	ldw	r2,-4(fp)
 4003d20:	1885883a 	add	r2,r3,r2
 4003d24:	d0a00a15 	stw	r2,-32728(gp)
 4003d28:	e0bffb17 	ldw	r2,-20(fp)
 4003d2c:	e0bffc15 	stw	r2,-16(fp)
 4003d30:	e0bffc17 	ldw	r2,-16(fp)
 4003d34:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 4003d38:	e0bffd17 	ldw	r2,-12(fp)
} 
 4003d3c:	e037883a 	mov	sp,fp
 4003d40:	df000017 	ldw	fp,0(sp)
 4003d44:	dec00104 	addi	sp,sp,4
 4003d48:	f800283a 	ret

04003d4c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 4003d4c:	defffd04 	addi	sp,sp,-12
 4003d50:	dfc00215 	stw	ra,8(sp)
 4003d54:	df000115 	stw	fp,4(sp)
 4003d58:	df000104 	addi	fp,sp,4
 4003d5c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 4003d60:	e13fff17 	ldw	r4,-4(fp)
 4003d64:	400610c0 	call	400610c <alt_busy_sleep>
}
 4003d68:	e037883a 	mov	sp,fp
 4003d6c:	dfc00117 	ldw	ra,4(sp)
 4003d70:	df000017 	ldw	fp,0(sp)
 4003d74:	dec00204 	addi	sp,sp,8
 4003d78:	f800283a 	ret

04003d7c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4003d7c:	defffe04 	addi	sp,sp,-8
 4003d80:	dfc00115 	stw	ra,4(sp)
 4003d84:	df000015 	stw	fp,0(sp)
 4003d88:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4003d8c:	d0a00917 	ldw	r2,-32732(gp)
 4003d90:	10000326 	beq	r2,zero,4003da0 <alt_get_errno+0x24>
 4003d94:	d0a00917 	ldw	r2,-32732(gp)
 4003d98:	103ee83a 	callr	r2
 4003d9c:	00000106 	br	4003da4 <alt_get_errno+0x28>
 4003da0:	d0a6ef04 	addi	r2,gp,-25668
}
 4003da4:	e037883a 	mov	sp,fp
 4003da8:	dfc00117 	ldw	ra,4(sp)
 4003dac:	df000017 	ldw	fp,0(sp)
 4003db0:	dec00204 	addi	sp,sp,8
 4003db4:	f800283a 	ret

04003db8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 4003db8:	defff904 	addi	sp,sp,-28
 4003dbc:	dfc00615 	stw	ra,24(sp)
 4003dc0:	df000515 	stw	fp,20(sp)
 4003dc4:	df000504 	addi	fp,sp,20
 4003dc8:	e13ffd15 	stw	r4,-12(fp)
 4003dcc:	e17ffe15 	stw	r5,-8(fp)
 4003dd0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4003dd4:	e0bffd17 	ldw	r2,-12(fp)
 4003dd8:	10000616 	blt	r2,zero,4003df4 <write+0x3c>
 4003ddc:	e0bffd17 	ldw	r2,-12(fp)
 4003de0:	10c00324 	muli	r3,r2,12
 4003de4:	00810034 	movhi	r2,1024
 4003de8:	109f6204 	addi	r2,r2,32136
 4003dec:	1885883a 	add	r2,r3,r2
 4003df0:	00000106 	br	4003df8 <write+0x40>
 4003df4:	0005883a 	mov	r2,zero
 4003df8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 4003dfc:	e0bffb17 	ldw	r2,-20(fp)
 4003e00:	10002126 	beq	r2,zero,4003e88 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 4003e04:	e0bffb17 	ldw	r2,-20(fp)
 4003e08:	10800217 	ldw	r2,8(r2)
 4003e0c:	108000cc 	andi	r2,r2,3
 4003e10:	10001826 	beq	r2,zero,4003e74 <write+0xbc>
 4003e14:	e0bffb17 	ldw	r2,-20(fp)
 4003e18:	10800017 	ldw	r2,0(r2)
 4003e1c:	10800617 	ldw	r2,24(r2)
 4003e20:	10001426 	beq	r2,zero,4003e74 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 4003e24:	e0bffb17 	ldw	r2,-20(fp)
 4003e28:	10800017 	ldw	r2,0(r2)
 4003e2c:	10800617 	ldw	r2,24(r2)
 4003e30:	e0ffff17 	ldw	r3,-4(fp)
 4003e34:	180d883a 	mov	r6,r3
 4003e38:	e17ffe17 	ldw	r5,-8(fp)
 4003e3c:	e13ffb17 	ldw	r4,-20(fp)
 4003e40:	103ee83a 	callr	r2
 4003e44:	e0bffc15 	stw	r2,-16(fp)
 4003e48:	e0bffc17 	ldw	r2,-16(fp)
 4003e4c:	1000070e 	bge	r2,zero,4003e6c <write+0xb4>
      {
        ALT_ERRNO = -rval;
 4003e50:	4003d7c0 	call	4003d7c <alt_get_errno>
 4003e54:	1007883a 	mov	r3,r2
 4003e58:	e0bffc17 	ldw	r2,-16(fp)
 4003e5c:	0085c83a 	sub	r2,zero,r2
 4003e60:	18800015 	stw	r2,0(r3)
        return -1;
 4003e64:	00bfffc4 	movi	r2,-1
 4003e68:	00000c06 	br	4003e9c <write+0xe4>
      }
      return rval;
 4003e6c:	e0bffc17 	ldw	r2,-16(fp)
 4003e70:	00000a06 	br	4003e9c <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 4003e74:	4003d7c0 	call	4003d7c <alt_get_errno>
 4003e78:	1007883a 	mov	r3,r2
 4003e7c:	00800344 	movi	r2,13
 4003e80:	18800015 	stw	r2,0(r3)
 4003e84:	00000406 	br	4003e98 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 4003e88:	4003d7c0 	call	4003d7c <alt_get_errno>
 4003e8c:	1007883a 	mov	r3,r2
 4003e90:	00801444 	movi	r2,81
 4003e94:	18800015 	stw	r2,0(r3)
  }
  return -1;
 4003e98:	00bfffc4 	movi	r2,-1
}
 4003e9c:	e037883a 	mov	sp,fp
 4003ea0:	dfc00117 	ldw	ra,4(sp)
 4003ea4:	df000017 	ldw	fp,0(sp)
 4003ea8:	dec00204 	addi	sp,sp,8
 4003eac:	f800283a 	ret

04003eb0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 4003eb0:	defffd04 	addi	sp,sp,-12
 4003eb4:	dfc00215 	stw	ra,8(sp)
 4003eb8:	df000115 	stw	fp,4(sp)
 4003ebc:	df000104 	addi	fp,sp,4
 4003ec0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 4003ec4:	d1600604 	addi	r5,gp,-32744
 4003ec8:	e13fff17 	ldw	r4,-4(fp)
 4003ecc:	40062b80 	call	40062b8 <alt_dev_llist_insert>
}
 4003ed0:	e037883a 	mov	sp,fp
 4003ed4:	dfc00117 	ldw	ra,4(sp)
 4003ed8:	df000017 	ldw	fp,0(sp)
 4003edc:	dec00204 	addi	sp,sp,8
 4003ee0:	f800283a 	ret

04003ee4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 4003ee4:	defffd04 	addi	sp,sp,-12
 4003ee8:	dfc00215 	stw	ra,8(sp)
 4003eec:	df000115 	stw	fp,4(sp)
 4003ef0:	df000104 	addi	fp,sp,4
 4003ef4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
 4003ef8:	4006b980 	call	4006b98 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 4003efc:	00800044 	movi	r2,1
 4003f00:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 4003f04:	0001883a 	nop
 4003f08:	e037883a 	mov	sp,fp
 4003f0c:	dfc00117 	ldw	ra,4(sp)
 4003f10:	df000017 	ldw	fp,0(sp)
 4003f14:	dec00204 	addi	sp,sp,8
 4003f18:	f800283a 	ret

04003f1c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 4003f1c:	defffd04 	addi	sp,sp,-12
 4003f20:	dfc00215 	stw	ra,8(sp)
 4003f24:	df000115 	stw	fp,4(sp)
 4003f28:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 4003f2c:	01c0fa04 	movi	r7,1000
 4003f30:	01800044 	movi	r6,1
 4003f34:	000b883a 	mov	r5,zero
 4003f38:	010000b4 	movhi	r4,2
 4003f3c:	210c4804 	addi	r4,r4,12576
 4003f40:	4004dd80 	call	4004dd8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 4003f44:	000d883a 	mov	r6,zero
 4003f48:	000b883a 	mov	r5,zero
 4003f4c:	01010034 	movhi	r4,1024
 4003f50:	211fcc04 	addi	r4,r4,32560
 4003f54:	40044600 	call	4004460 <altera_avalon_jtag_uart_init>
 4003f58:	01010034 	movhi	r4,1024
 4003f5c:	211fc204 	addi	r4,r4,32520
 4003f60:	4003eb00 	call	4003eb0 <alt_dev_reg>
    ALTERA_UP_AVALON_ACCELEROMETER_SPI_INIT ( ACCELEROMETER_SPI_0, accelerometer_spi_0);
 4003f64:	01010074 	movhi	r4,1025
 4003f68:	2123da04 	addi	r4,r4,-28824
 4003f6c:	4003eb00 	call	4003eb0 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( CHARBUFF, charbuff);
 4003f70:	00810074 	movhi	r2,1025
 4003f74:	10a3e504 	addi	r2,r2,-28780
 4003f78:	10800a17 	ldw	r2,40(r2)
 4003f7c:	10800104 	addi	r2,r2,4
 4003f80:	10800017 	ldw	r2,0(r2)
 4003f84:	10ffffcc 	andi	r3,r2,65535
 4003f88:	00810074 	movhi	r2,1025
 4003f8c:	10a3e504 	addi	r2,r2,-28780
 4003f90:	10c00c15 	stw	r3,48(r2)
 4003f94:	00810074 	movhi	r2,1025
 4003f98:	10a3e504 	addi	r2,r2,-28780
 4003f9c:	10800a17 	ldw	r2,40(r2)
 4003fa0:	10800104 	addi	r2,r2,4
 4003fa4:	10800017 	ldw	r2,0(r2)
 4003fa8:	1006d43a 	srli	r3,r2,16
 4003fac:	00810074 	movhi	r2,1025
 4003fb0:	10a3e504 	addi	r2,r2,-28780
 4003fb4:	10c00d15 	stw	r3,52(r2)
 4003fb8:	00810074 	movhi	r2,1025
 4003fbc:	10a3e504 	addi	r2,r2,-28780
 4003fc0:	10800c17 	ldw	r2,48(r2)
 4003fc4:	10801068 	cmpgeui	r2,r2,65
 4003fc8:	1000081e 	bne	r2,zero,4003fec <alt_sys_init+0xd0>
 4003fcc:	00810074 	movhi	r2,1025
 4003fd0:	10a3e504 	addi	r2,r2,-28780
 4003fd4:	00c00fc4 	movi	r3,63
 4003fd8:	10c00f15 	stw	r3,60(r2)
 4003fdc:	00810074 	movhi	r2,1025
 4003fe0:	10a3e504 	addi	r2,r2,-28780
 4003fe4:	00c00184 	movi	r3,6
 4003fe8:	10c01015 	stw	r3,64(r2)
 4003fec:	00810074 	movhi	r2,1025
 4003ff0:	10a3e504 	addi	r2,r2,-28780
 4003ff4:	10800d17 	ldw	r2,52(r2)
 4003ff8:	10800868 	cmpgeui	r2,r2,33
 4003ffc:	1000041e 	bne	r2,zero,4004010 <alt_sys_init+0xf4>
 4004000:	00810074 	movhi	r2,1025
 4004004:	10a3e504 	addi	r2,r2,-28780
 4004008:	00c007c4 	movi	r3,31
 400400c:	10c01115 	stw	r3,68(r2)
 4004010:	01010074 	movhi	r4,1025
 4004014:	2123e504 	addi	r4,r4,-28780
 4004018:	4004e4c0 	call	4004e4c <alt_up_char_buffer_init>
 400401c:	01010074 	movhi	r4,1025
 4004020:	2123e504 	addi	r4,r4,-28780
 4004024:	4003eb00 	call	4003eb0 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( PIXELBUFF, pixelbuff);
 4004028:	00810074 	movhi	r2,1025
 400402c:	10a3f704 	addi	r2,r2,-28708
 4004030:	10800a17 	ldw	r2,40(r2)
 4004034:	10800017 	ldw	r2,0(r2)
 4004038:	1007883a 	mov	r3,r2
 400403c:	00810074 	movhi	r2,1025
 4004040:	10a3f704 	addi	r2,r2,-28708
 4004044:	10c00b15 	stw	r3,44(r2)
 4004048:	00810074 	movhi	r2,1025
 400404c:	10a3f704 	addi	r2,r2,-28708
 4004050:	10800a17 	ldw	r2,40(r2)
 4004054:	10800104 	addi	r2,r2,4
 4004058:	10800017 	ldw	r2,0(r2)
 400405c:	1007883a 	mov	r3,r2
 4004060:	00810074 	movhi	r2,1025
 4004064:	10a3f704 	addi	r2,r2,-28708
 4004068:	10c00c15 	stw	r3,48(r2)
 400406c:	00810074 	movhi	r2,1025
 4004070:	10a3f704 	addi	r2,r2,-28708
 4004074:	10800a17 	ldw	r2,40(r2)
 4004078:	10800204 	addi	r2,r2,8
 400407c:	10800017 	ldw	r2,0(r2)
 4004080:	10ffffcc 	andi	r3,r2,65535
 4004084:	00810074 	movhi	r2,1025
 4004088:	10a3f704 	addi	r2,r2,-28708
 400408c:	10c00f15 	stw	r3,60(r2)
 4004090:	00810074 	movhi	r2,1025
 4004094:	10a3f704 	addi	r2,r2,-28708
 4004098:	10800a17 	ldw	r2,40(r2)
 400409c:	10800204 	addi	r2,r2,8
 40040a0:	10800017 	ldw	r2,0(r2)
 40040a4:	1006d43a 	srli	r3,r2,16
 40040a8:	00810074 	movhi	r2,1025
 40040ac:	10a3f704 	addi	r2,r2,-28708
 40040b0:	10c01015 	stw	r3,64(r2)
 40040b4:	00810074 	movhi	r2,1025
 40040b8:	10a3f704 	addi	r2,r2,-28708
 40040bc:	10800a17 	ldw	r2,40(r2)
 40040c0:	10800304 	addi	r2,r2,12
 40040c4:	10800017 	ldw	r2,0(r2)
 40040c8:	1005d07a 	srai	r2,r2,1
 40040cc:	10c0004c 	andi	r3,r2,1
 40040d0:	00810074 	movhi	r2,1025
 40040d4:	10a3f704 	addi	r2,r2,-28708
 40040d8:	10c00d15 	stw	r3,52(r2)
 40040dc:	00810074 	movhi	r2,1025
 40040e0:	10a3f704 	addi	r2,r2,-28708
 40040e4:	10800a17 	ldw	r2,40(r2)
 40040e8:	10800304 	addi	r2,r2,12
 40040ec:	10800017 	ldw	r2,0(r2)
 40040f0:	1005d13a 	srai	r2,r2,4
 40040f4:	10c003cc 	andi	r3,r2,15
 40040f8:	00810074 	movhi	r2,1025
 40040fc:	10a3f704 	addi	r2,r2,-28708
 4004100:	10c00e15 	stw	r3,56(r2)
 4004104:	00810074 	movhi	r2,1025
 4004108:	10a3f704 	addi	r2,r2,-28708
 400410c:	10800a17 	ldw	r2,40(r2)
 4004110:	10800304 	addi	r2,r2,12
 4004114:	10800017 	ldw	r2,0(r2)
 4004118:	1005d43a 	srai	r2,r2,16
 400411c:	e0bfff05 	stb	r2,-4(fp)
 4004120:	00810074 	movhi	r2,1025
 4004124:	10a3f704 	addi	r2,r2,-28708
 4004128:	10800a17 	ldw	r2,40(r2)
 400412c:	10800304 	addi	r2,r2,12
 4004130:	10800017 	ldw	r2,0(r2)
 4004134:	1004d63a 	srli	r2,r2,24
 4004138:	e0bfff45 	stb	r2,-3(fp)
 400413c:	00810074 	movhi	r2,1025
 4004140:	10a3f704 	addi	r2,r2,-28708
 4004144:	10800e17 	ldw	r2,56(r2)
 4004148:	10800058 	cmpnei	r2,r2,1
 400414c:	1000041e 	bne	r2,zero,4004160 <alt_sys_init+0x244>
 4004150:	00810074 	movhi	r2,1025
 4004154:	10a3f704 	addi	r2,r2,-28708
 4004158:	10001115 	stw	zero,68(r2)
 400415c:	00000e06 	br	4004198 <alt_sys_init+0x27c>
 4004160:	00810074 	movhi	r2,1025
 4004164:	10a3f704 	addi	r2,r2,-28708
 4004168:	10800e17 	ldw	r2,56(r2)
 400416c:	10800098 	cmpnei	r2,r2,2
 4004170:	1000051e 	bne	r2,zero,4004188 <alt_sys_init+0x26c>
 4004174:	00810074 	movhi	r2,1025
 4004178:	10a3f704 	addi	r2,r2,-28708
 400417c:	00c00044 	movi	r3,1
 4004180:	10c01115 	stw	r3,68(r2)
 4004184:	00000406 	br	4004198 <alt_sys_init+0x27c>
 4004188:	00810074 	movhi	r2,1025
 400418c:	10a3f704 	addi	r2,r2,-28708
 4004190:	00c00084 	movi	r3,2
 4004194:	10c01115 	stw	r3,68(r2)
 4004198:	e0bfff03 	ldbu	r2,-4(fp)
 400419c:	00c00804 	movi	r3,32
 40041a0:	1885c83a 	sub	r2,r3,r2
 40041a4:	00ffffc4 	movi	r3,-1
 40041a8:	1886d83a 	srl	r3,r3,r2
 40041ac:	00810074 	movhi	r2,1025
 40041b0:	10a3f704 	addi	r2,r2,-28708
 40041b4:	10c01215 	stw	r3,72(r2)
 40041b8:	e0ffff03 	ldbu	r3,-4(fp)
 40041bc:	00810074 	movhi	r2,1025
 40041c0:	10a3f704 	addi	r2,r2,-28708
 40041c4:	10801117 	ldw	r2,68(r2)
 40041c8:	1887883a 	add	r3,r3,r2
 40041cc:	00810074 	movhi	r2,1025
 40041d0:	10a3f704 	addi	r2,r2,-28708
 40041d4:	10c01315 	stw	r3,76(r2)
 40041d8:	e0bfff43 	ldbu	r2,-3(fp)
 40041dc:	00c00804 	movi	r3,32
 40041e0:	1885c83a 	sub	r2,r3,r2
 40041e4:	00ffffc4 	movi	r3,-1
 40041e8:	1886d83a 	srl	r3,r3,r2
 40041ec:	00810074 	movhi	r2,1025
 40041f0:	10a3f704 	addi	r2,r2,-28708
 40041f4:	10c01415 	stw	r3,80(r2)
 40041f8:	01010074 	movhi	r4,1025
 40041fc:	2123f704 	addi	r4,r4,-28708
 4004200:	4003eb00 	call	4003eb0 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_RGB_RESAMPLER_INIT ( VIDEO_RGB_RESAMPLER_0, video_rgb_resampler_0);
 4004204:	00810074 	movhi	r2,1025
 4004208:	10a40c04 	addi	r2,r2,-28624
 400420c:	10800a17 	ldw	r2,40(r2)
 4004210:	10800017 	ldw	r2,0(r2)
 4004214:	10c003cc 	andi	r3,r2,15
 4004218:	00810074 	movhi	r2,1025
 400421c:	10a40c04 	addi	r2,r2,-28624
 4004220:	10c00b15 	stw	r3,44(r2)
 4004224:	00810074 	movhi	r2,1025
 4004228:	10a40c04 	addi	r2,r2,-28624
 400422c:	10800a17 	ldw	r2,40(r2)
 4004230:	10800017 	ldw	r2,0(r2)
 4004234:	1005d13a 	srai	r2,r2,4
 4004238:	10c0004c 	andi	r3,r2,1
 400423c:	00810074 	movhi	r2,1025
 4004240:	10a40c04 	addi	r2,r2,-28624
 4004244:	10c00c15 	stw	r3,48(r2)
 4004248:	00810074 	movhi	r2,1025
 400424c:	10a40c04 	addi	r2,r2,-28624
 4004250:	10800a17 	ldw	r2,40(r2)
 4004254:	10800017 	ldw	r2,0(r2)
 4004258:	1005d17a 	srai	r2,r2,5
 400425c:	10c0004c 	andi	r3,r2,1
 4004260:	00810074 	movhi	r2,1025
 4004264:	10a40c04 	addi	r2,r2,-28624
 4004268:	10c00d15 	stw	r3,52(r2)
 400426c:	00810074 	movhi	r2,1025
 4004270:	10a40c04 	addi	r2,r2,-28624
 4004274:	10800a17 	ldw	r2,40(r2)
 4004278:	10800017 	ldw	r2,0(r2)
 400427c:	1005d43a 	srai	r2,r2,16
 4004280:	10c003cc 	andi	r3,r2,15
 4004284:	00810074 	movhi	r2,1025
 4004288:	10a40c04 	addi	r2,r2,-28624
 400428c:	10c00e15 	stw	r3,56(r2)
 4004290:	00810074 	movhi	r2,1025
 4004294:	10a40c04 	addi	r2,r2,-28624
 4004298:	10800a17 	ldw	r2,40(r2)
 400429c:	10800017 	ldw	r2,0(r2)
 40042a0:	1005d53a 	srai	r2,r2,20
 40042a4:	10c0004c 	andi	r3,r2,1
 40042a8:	00810074 	movhi	r2,1025
 40042ac:	10a40c04 	addi	r2,r2,-28624
 40042b0:	10c00f15 	stw	r3,60(r2)
 40042b4:	00810074 	movhi	r2,1025
 40042b8:	10a40c04 	addi	r2,r2,-28624
 40042bc:	10800a17 	ldw	r2,40(r2)
 40042c0:	10800017 	ldw	r2,0(r2)
 40042c4:	1005d57a 	srai	r2,r2,21
 40042c8:	10c0004c 	andi	r3,r2,1
 40042cc:	00810074 	movhi	r2,1025
 40042d0:	10a40c04 	addi	r2,r2,-28624
 40042d4:	10c01015 	stw	r3,64(r2)
 40042d8:	01010074 	movhi	r4,1025
 40042dc:	21240c04 	addi	r4,r4,-28624
 40042e0:	4003eb00 	call	4003eb0 <alt_dev_reg>
}
 40042e4:	0001883a 	nop
 40042e8:	e037883a 	mov	sp,fp
 40042ec:	dfc00117 	ldw	ra,4(sp)
 40042f0:	df000017 	ldw	fp,0(sp)
 40042f4:	dec00204 	addi	sp,sp,8
 40042f8:	f800283a 	ret

040042fc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 40042fc:	defffa04 	addi	sp,sp,-24
 4004300:	dfc00515 	stw	ra,20(sp)
 4004304:	df000415 	stw	fp,16(sp)
 4004308:	df000404 	addi	fp,sp,16
 400430c:	e13ffd15 	stw	r4,-12(fp)
 4004310:	e17ffe15 	stw	r5,-8(fp)
 4004314:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4004318:	e0bffd17 	ldw	r2,-12(fp)
 400431c:	10800017 	ldw	r2,0(r2)
 4004320:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 4004324:	e0bffc17 	ldw	r2,-16(fp)
 4004328:	10c00a04 	addi	r3,r2,40
 400432c:	e0bffd17 	ldw	r2,-12(fp)
 4004330:	10800217 	ldw	r2,8(r2)
 4004334:	100f883a 	mov	r7,r2
 4004338:	e1bfff17 	ldw	r6,-4(fp)
 400433c:	e17ffe17 	ldw	r5,-8(fp)
 4004340:	1809883a 	mov	r4,r3
 4004344:	400491c0 	call	400491c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 4004348:	e037883a 	mov	sp,fp
 400434c:	dfc00117 	ldw	ra,4(sp)
 4004350:	df000017 	ldw	fp,0(sp)
 4004354:	dec00204 	addi	sp,sp,8
 4004358:	f800283a 	ret

0400435c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 400435c:	defffa04 	addi	sp,sp,-24
 4004360:	dfc00515 	stw	ra,20(sp)
 4004364:	df000415 	stw	fp,16(sp)
 4004368:	df000404 	addi	fp,sp,16
 400436c:	e13ffd15 	stw	r4,-12(fp)
 4004370:	e17ffe15 	stw	r5,-8(fp)
 4004374:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4004378:	e0bffd17 	ldw	r2,-12(fp)
 400437c:	10800017 	ldw	r2,0(r2)
 4004380:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 4004384:	e0bffc17 	ldw	r2,-16(fp)
 4004388:	10c00a04 	addi	r3,r2,40
 400438c:	e0bffd17 	ldw	r2,-12(fp)
 4004390:	10800217 	ldw	r2,8(r2)
 4004394:	100f883a 	mov	r7,r2
 4004398:	e1bfff17 	ldw	r6,-4(fp)
 400439c:	e17ffe17 	ldw	r5,-8(fp)
 40043a0:	1809883a 	mov	r4,r3
 40043a4:	4004b380 	call	4004b38 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 40043a8:	e037883a 	mov	sp,fp
 40043ac:	dfc00117 	ldw	ra,4(sp)
 40043b0:	df000017 	ldw	fp,0(sp)
 40043b4:	dec00204 	addi	sp,sp,8
 40043b8:	f800283a 	ret

040043bc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 40043bc:	defffc04 	addi	sp,sp,-16
 40043c0:	dfc00315 	stw	ra,12(sp)
 40043c4:	df000215 	stw	fp,8(sp)
 40043c8:	df000204 	addi	fp,sp,8
 40043cc:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 40043d0:	e0bfff17 	ldw	r2,-4(fp)
 40043d4:	10800017 	ldw	r2,0(r2)
 40043d8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 40043dc:	e0bffe17 	ldw	r2,-8(fp)
 40043e0:	10c00a04 	addi	r3,r2,40
 40043e4:	e0bfff17 	ldw	r2,-4(fp)
 40043e8:	10800217 	ldw	r2,8(r2)
 40043ec:	100b883a 	mov	r5,r2
 40043f0:	1809883a 	mov	r4,r3
 40043f4:	40047c40 	call	40047c4 <altera_avalon_jtag_uart_close>
}
 40043f8:	e037883a 	mov	sp,fp
 40043fc:	dfc00117 	ldw	ra,4(sp)
 4004400:	df000017 	ldw	fp,0(sp)
 4004404:	dec00204 	addi	sp,sp,8
 4004408:	f800283a 	ret

0400440c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 400440c:	defffa04 	addi	sp,sp,-24
 4004410:	dfc00515 	stw	ra,20(sp)
 4004414:	df000415 	stw	fp,16(sp)
 4004418:	df000404 	addi	fp,sp,16
 400441c:	e13ffd15 	stw	r4,-12(fp)
 4004420:	e17ffe15 	stw	r5,-8(fp)
 4004424:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 4004428:	e0bffd17 	ldw	r2,-12(fp)
 400442c:	10800017 	ldw	r2,0(r2)
 4004430:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 4004434:	e0bffc17 	ldw	r2,-16(fp)
 4004438:	10800a04 	addi	r2,r2,40
 400443c:	e1bfff17 	ldw	r6,-4(fp)
 4004440:	e17ffe17 	ldw	r5,-8(fp)
 4004444:	1009883a 	mov	r4,r2
 4004448:	400482c0 	call	400482c <altera_avalon_jtag_uart_ioctl>
}
 400444c:	e037883a 	mov	sp,fp
 4004450:	dfc00117 	ldw	ra,4(sp)
 4004454:	df000017 	ldw	fp,0(sp)
 4004458:	dec00204 	addi	sp,sp,8
 400445c:	f800283a 	ret

04004460 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 4004460:	defffb04 	addi	sp,sp,-20
 4004464:	dfc00415 	stw	ra,16(sp)
 4004468:	df000315 	stw	fp,12(sp)
 400446c:	df000304 	addi	fp,sp,12
 4004470:	e13ffd15 	stw	r4,-12(fp)
 4004474:	e17ffe15 	stw	r5,-8(fp)
 4004478:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 400447c:	e0bffd17 	ldw	r2,-12(fp)
 4004480:	00c00044 	movi	r3,1
 4004484:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 4004488:	e0bffd17 	ldw	r2,-12(fp)
 400448c:	10800017 	ldw	r2,0(r2)
 4004490:	10800104 	addi	r2,r2,4
 4004494:	1007883a 	mov	r3,r2
 4004498:	e0bffd17 	ldw	r2,-12(fp)
 400449c:	10800817 	ldw	r2,32(r2)
 40044a0:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
 40044a4:	e0bfff17 	ldw	r2,-4(fp)
 40044a8:	01810034 	movhi	r6,1024
 40044ac:	31914504 	addi	r6,r6,17684
 40044b0:	e17ffd17 	ldw	r5,-12(fp)
 40044b4:	1009883a 	mov	r4,r2
 40044b8:	40066200 	call	4006620 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 40044bc:	e0bffd17 	ldw	r2,-12(fp)
 40044c0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 40044c4:	e0bffd17 	ldw	r2,-12(fp)
 40044c8:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 40044cc:	d0e6f417 	ldw	r3,-25648(gp)
 40044d0:	e1fffd17 	ldw	r7,-12(fp)
 40044d4:	01810034 	movhi	r6,1024
 40044d8:	3191c904 	addi	r6,r6,18212
 40044dc:	180b883a 	mov	r5,r3
 40044e0:	1009883a 	mov	r4,r2
 40044e4:	4005fe00 	call	4005fe0 <alt_alarm_start>
 40044e8:	1000040e 	bge	r2,zero,40044fc <altera_avalon_jtag_uart_init+0x9c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 40044ec:	e0fffd17 	ldw	r3,-12(fp)
 40044f0:	00a00034 	movhi	r2,32768
 40044f4:	10bfffc4 	addi	r2,r2,-1
 40044f8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 40044fc:	0001883a 	nop
 4004500:	e037883a 	mov	sp,fp
 4004504:	dfc00117 	ldw	ra,4(sp)
 4004508:	df000017 	ldw	fp,0(sp)
 400450c:	dec00204 	addi	sp,sp,8
 4004510:	f800283a 	ret

04004514 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 4004514:	defff704 	addi	sp,sp,-36
 4004518:	df000815 	stw	fp,32(sp)
 400451c:	df000804 	addi	fp,sp,32
 4004520:	e13ffe15 	stw	r4,-8(fp)
 4004524:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 4004528:	e0bffe17 	ldw	r2,-8(fp)
 400452c:	e0bffa15 	stw	r2,-24(fp)
  unsigned int base = sp->base;
 4004530:	e0bffa17 	ldw	r2,-24(fp)
 4004534:	10800017 	ldw	r2,0(r2)
 4004538:	e0bffb15 	stw	r2,-20(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 400453c:	e0bffb17 	ldw	r2,-20(fp)
 4004540:	10800104 	addi	r2,r2,4
 4004544:	10800037 	ldwio	r2,0(r2)
 4004548:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 400454c:	e0bffc17 	ldw	r2,-16(fp)
 4004550:	1080c00c 	andi	r2,r2,768
 4004554:	10006d26 	beq	r2,zero,400470c <altera_avalon_jtag_uart_irq+0x1f8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 4004558:	e0bffc17 	ldw	r2,-16(fp)
 400455c:	1080400c 	andi	r2,r2,256
 4004560:	10003526 	beq	r2,zero,4004638 <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 4004564:	00800074 	movhi	r2,1
 4004568:	e0bff815 	stw	r2,-32(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400456c:	e0bffa17 	ldw	r2,-24(fp)
 4004570:	10800a17 	ldw	r2,40(r2)
 4004574:	10800044 	addi	r2,r2,1
 4004578:	1081ffcc 	andi	r2,r2,2047
 400457c:	e0bffd15 	stw	r2,-12(fp)
        if (next == sp->rx_out)
 4004580:	e0bffa17 	ldw	r2,-24(fp)
 4004584:	10c00b17 	ldw	r3,44(r2)
 4004588:	e0bffd17 	ldw	r2,-12(fp)
 400458c:	18801526 	beq	r3,r2,40045e4 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 4004590:	e0bffb17 	ldw	r2,-20(fp)
 4004594:	10800037 	ldwio	r2,0(r2)
 4004598:	e0bff815 	stw	r2,-32(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 400459c:	e0bff817 	ldw	r2,-32(fp)
 40045a0:	10a0000c 	andi	r2,r2,32768
 40045a4:	10001126 	beq	r2,zero,40045ec <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 40045a8:	e0bffa17 	ldw	r2,-24(fp)
 40045ac:	10800a17 	ldw	r2,40(r2)
 40045b0:	e0fff817 	ldw	r3,-32(fp)
 40045b4:	1809883a 	mov	r4,r3
 40045b8:	e0fffa17 	ldw	r3,-24(fp)
 40045bc:	1885883a 	add	r2,r3,r2
 40045c0:	10800e04 	addi	r2,r2,56
 40045c4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 40045c8:	e0bffa17 	ldw	r2,-24(fp)
 40045cc:	10800a17 	ldw	r2,40(r2)
 40045d0:	10800044 	addi	r2,r2,1
 40045d4:	10c1ffcc 	andi	r3,r2,2047
 40045d8:	e0bffa17 	ldw	r2,-24(fp)
 40045dc:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 40045e0:	003fe206 	br	400456c <__alt_data_end+0xfc00456c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 40045e4:	0001883a 	nop
 40045e8:	00000106 	br	40045f0 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 40045ec:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 40045f0:	e0bff817 	ldw	r2,-32(fp)
 40045f4:	10bfffec 	andhi	r2,r2,65535
 40045f8:	10000f26 	beq	r2,zero,4004638 <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 40045fc:	e0bffa17 	ldw	r2,-24(fp)
 4004600:	10c00817 	ldw	r3,32(r2)
 4004604:	00bfff84 	movi	r2,-2
 4004608:	1886703a 	and	r3,r3,r2
 400460c:	e0bffa17 	ldw	r2,-24(fp)
 4004610:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 4004614:	e0bffb17 	ldw	r2,-20(fp)
 4004618:	10800104 	addi	r2,r2,4
 400461c:	1007883a 	mov	r3,r2
 4004620:	e0bffa17 	ldw	r2,-24(fp)
 4004624:	10800817 	ldw	r2,32(r2)
 4004628:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 400462c:	e0bffb17 	ldw	r2,-20(fp)
 4004630:	10800104 	addi	r2,r2,4
 4004634:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 4004638:	e0bffc17 	ldw	r2,-16(fp)
 400463c:	1080800c 	andi	r2,r2,512
 4004640:	103fbe26 	beq	r2,zero,400453c <__alt_data_end+0xfc00453c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 4004644:	e0bffc17 	ldw	r2,-16(fp)
 4004648:	1004d43a 	srli	r2,r2,16
 400464c:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 4004650:	00001406 	br	40046a4 <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 4004654:	e0bffb17 	ldw	r2,-20(fp)
 4004658:	e0fffa17 	ldw	r3,-24(fp)
 400465c:	18c00d17 	ldw	r3,52(r3)
 4004660:	e13ffa17 	ldw	r4,-24(fp)
 4004664:	20c7883a 	add	r3,r4,r3
 4004668:	18c20e04 	addi	r3,r3,2104
 400466c:	18c00003 	ldbu	r3,0(r3)
 4004670:	18c03fcc 	andi	r3,r3,255
 4004674:	18c0201c 	xori	r3,r3,128
 4004678:	18ffe004 	addi	r3,r3,-128
 400467c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4004680:	e0bffa17 	ldw	r2,-24(fp)
 4004684:	10800d17 	ldw	r2,52(r2)
 4004688:	10800044 	addi	r2,r2,1
 400468c:	10c1ffcc 	andi	r3,r2,2047
 4004690:	e0bffa17 	ldw	r2,-24(fp)
 4004694:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 4004698:	e0bff917 	ldw	r2,-28(fp)
 400469c:	10bfffc4 	addi	r2,r2,-1
 40046a0:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 40046a4:	e0bff917 	ldw	r2,-28(fp)
 40046a8:	10000526 	beq	r2,zero,40046c0 <altera_avalon_jtag_uart_irq+0x1ac>
 40046ac:	e0bffa17 	ldw	r2,-24(fp)
 40046b0:	10c00d17 	ldw	r3,52(r2)
 40046b4:	e0bffa17 	ldw	r2,-24(fp)
 40046b8:	10800c17 	ldw	r2,48(r2)
 40046bc:	18bfe51e 	bne	r3,r2,4004654 <__alt_data_end+0xfc004654>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 40046c0:	e0bff917 	ldw	r2,-28(fp)
 40046c4:	103f9d26 	beq	r2,zero,400453c <__alt_data_end+0xfc00453c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 40046c8:	e0bffa17 	ldw	r2,-24(fp)
 40046cc:	10c00817 	ldw	r3,32(r2)
 40046d0:	00bfff44 	movi	r2,-3
 40046d4:	1886703a 	and	r3,r3,r2
 40046d8:	e0bffa17 	ldw	r2,-24(fp)
 40046dc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 40046e0:	e0bffa17 	ldw	r2,-24(fp)
 40046e4:	10800017 	ldw	r2,0(r2)
 40046e8:	10800104 	addi	r2,r2,4
 40046ec:	1007883a 	mov	r3,r2
 40046f0:	e0bffa17 	ldw	r2,-24(fp)
 40046f4:	10800817 	ldw	r2,32(r2)
 40046f8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 40046fc:	e0bffb17 	ldw	r2,-20(fp)
 4004700:	10800104 	addi	r2,r2,4
 4004704:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 4004708:	003f8c06 	br	400453c <__alt_data_end+0xfc00453c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 400470c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 4004710:	0001883a 	nop
 4004714:	e037883a 	mov	sp,fp
 4004718:	df000017 	ldw	fp,0(sp)
 400471c:	dec00104 	addi	sp,sp,4
 4004720:	f800283a 	ret

04004724 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 4004724:	defff804 	addi	sp,sp,-32
 4004728:	df000715 	stw	fp,28(sp)
 400472c:	df000704 	addi	fp,sp,28
 4004730:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 4004734:	e0bffb17 	ldw	r2,-20(fp)
 4004738:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 400473c:	e0bff917 	ldw	r2,-28(fp)
 4004740:	10800017 	ldw	r2,0(r2)
 4004744:	10800104 	addi	r2,r2,4
 4004748:	10800037 	ldwio	r2,0(r2)
 400474c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 4004750:	e0bffa17 	ldw	r2,-24(fp)
 4004754:	1081000c 	andi	r2,r2,1024
 4004758:	10000b26 	beq	r2,zero,4004788 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 400475c:	e0bff917 	ldw	r2,-28(fp)
 4004760:	10800017 	ldw	r2,0(r2)
 4004764:	10800104 	addi	r2,r2,4
 4004768:	1007883a 	mov	r3,r2
 400476c:	e0bff917 	ldw	r2,-28(fp)
 4004770:	10800817 	ldw	r2,32(r2)
 4004774:	10810014 	ori	r2,r2,1024
 4004778:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 400477c:	e0bff917 	ldw	r2,-28(fp)
 4004780:	10000915 	stw	zero,36(r2)
 4004784:	00000a06 	br	40047b0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 4004788:	e0bff917 	ldw	r2,-28(fp)
 400478c:	10c00917 	ldw	r3,36(r2)
 4004790:	00a00034 	movhi	r2,32768
 4004794:	10bfff04 	addi	r2,r2,-4
 4004798:	10c00536 	bltu	r2,r3,40047b0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 400479c:	e0bff917 	ldw	r2,-28(fp)
 40047a0:	10800917 	ldw	r2,36(r2)
 40047a4:	10c00044 	addi	r3,r2,1
 40047a8:	e0bff917 	ldw	r2,-28(fp)
 40047ac:	10c00915 	stw	r3,36(r2)
 40047b0:	d0a6f417 	ldw	r2,-25648(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 40047b4:	e037883a 	mov	sp,fp
 40047b8:	df000017 	ldw	fp,0(sp)
 40047bc:	dec00104 	addi	sp,sp,4
 40047c0:	f800283a 	ret

040047c4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 40047c4:	defffd04 	addi	sp,sp,-12
 40047c8:	df000215 	stw	fp,8(sp)
 40047cc:	df000204 	addi	fp,sp,8
 40047d0:	e13ffe15 	stw	r4,-8(fp)
 40047d4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 40047d8:	00000506 	br	40047f0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 40047dc:	e0bfff17 	ldw	r2,-4(fp)
 40047e0:	1090000c 	andi	r2,r2,16384
 40047e4:	10000226 	beq	r2,zero,40047f0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 40047e8:	00bffd44 	movi	r2,-11
 40047ec:	00000b06 	br	400481c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 40047f0:	e0bffe17 	ldw	r2,-8(fp)
 40047f4:	10c00d17 	ldw	r3,52(r2)
 40047f8:	e0bffe17 	ldw	r2,-8(fp)
 40047fc:	10800c17 	ldw	r2,48(r2)
 4004800:	18800526 	beq	r3,r2,4004818 <altera_avalon_jtag_uart_close+0x54>
 4004804:	e0bffe17 	ldw	r2,-8(fp)
 4004808:	10c00917 	ldw	r3,36(r2)
 400480c:	e0bffe17 	ldw	r2,-8(fp)
 4004810:	10800117 	ldw	r2,4(r2)
 4004814:	18bff136 	bltu	r3,r2,40047dc <__alt_data_end+0xfc0047dc>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 4004818:	0005883a 	mov	r2,zero
}
 400481c:	e037883a 	mov	sp,fp
 4004820:	df000017 	ldw	fp,0(sp)
 4004824:	dec00104 	addi	sp,sp,4
 4004828:	f800283a 	ret

0400482c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 400482c:	defffa04 	addi	sp,sp,-24
 4004830:	df000515 	stw	fp,20(sp)
 4004834:	df000504 	addi	fp,sp,20
 4004838:	e13ffd15 	stw	r4,-12(fp)
 400483c:	e17ffe15 	stw	r5,-8(fp)
 4004840:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 4004844:	00bff9c4 	movi	r2,-25
 4004848:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 400484c:	e0bffe17 	ldw	r2,-8(fp)
 4004850:	10da8060 	cmpeqi	r3,r2,27137
 4004854:	1800031e 	bne	r3,zero,4004864 <altera_avalon_jtag_uart_ioctl+0x38>
 4004858:	109a80a0 	cmpeqi	r2,r2,27138
 400485c:	1000181e 	bne	r2,zero,40048c0 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 4004860:	00002906 	br	4004908 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 4004864:	e0bffd17 	ldw	r2,-12(fp)
 4004868:	10c00117 	ldw	r3,4(r2)
 400486c:	00a00034 	movhi	r2,32768
 4004870:	10bfffc4 	addi	r2,r2,-1
 4004874:	18802126 	beq	r3,r2,40048fc <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 4004878:	e0bfff17 	ldw	r2,-4(fp)
 400487c:	10800017 	ldw	r2,0(r2)
 4004880:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 4004884:	e0bffc17 	ldw	r2,-16(fp)
 4004888:	10800090 	cmplti	r2,r2,2
 400488c:	1000061e 	bne	r2,zero,40048a8 <altera_avalon_jtag_uart_ioctl+0x7c>
 4004890:	e0fffc17 	ldw	r3,-16(fp)
 4004894:	00a00034 	movhi	r2,32768
 4004898:	10bfffc4 	addi	r2,r2,-1
 400489c:	18800226 	beq	r3,r2,40048a8 <altera_avalon_jtag_uart_ioctl+0x7c>
 40048a0:	e0bffc17 	ldw	r2,-16(fp)
 40048a4:	00000206 	br	40048b0 <altera_avalon_jtag_uart_ioctl+0x84>
 40048a8:	00a00034 	movhi	r2,32768
 40048ac:	10bfff84 	addi	r2,r2,-2
 40048b0:	e0fffd17 	ldw	r3,-12(fp)
 40048b4:	18800115 	stw	r2,4(r3)
      rc = 0;
 40048b8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 40048bc:	00000f06 	br	40048fc <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 40048c0:	e0bffd17 	ldw	r2,-12(fp)
 40048c4:	10c00117 	ldw	r3,4(r2)
 40048c8:	00a00034 	movhi	r2,32768
 40048cc:	10bfffc4 	addi	r2,r2,-1
 40048d0:	18800c26 	beq	r3,r2,4004904 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 40048d4:	e0bffd17 	ldw	r2,-12(fp)
 40048d8:	10c00917 	ldw	r3,36(r2)
 40048dc:	e0bffd17 	ldw	r2,-12(fp)
 40048e0:	10800117 	ldw	r2,4(r2)
 40048e4:	1885803a 	cmpltu	r2,r3,r2
 40048e8:	10c03fcc 	andi	r3,r2,255
 40048ec:	e0bfff17 	ldw	r2,-4(fp)
 40048f0:	10c00015 	stw	r3,0(r2)
      rc = 0;
 40048f4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 40048f8:	00000206 	br	4004904 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 40048fc:	0001883a 	nop
 4004900:	00000106 	br	4004908 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 4004904:	0001883a 	nop

  default:
    break;
  }

  return rc;
 4004908:	e0bffb17 	ldw	r2,-20(fp)
}
 400490c:	e037883a 	mov	sp,fp
 4004910:	df000017 	ldw	fp,0(sp)
 4004914:	dec00104 	addi	sp,sp,4
 4004918:	f800283a 	ret

0400491c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 400491c:	defff304 	addi	sp,sp,-52
 4004920:	dfc00c15 	stw	ra,48(sp)
 4004924:	df000b15 	stw	fp,44(sp)
 4004928:	df000b04 	addi	fp,sp,44
 400492c:	e13ffc15 	stw	r4,-16(fp)
 4004930:	e17ffd15 	stw	r5,-12(fp)
 4004934:	e1bffe15 	stw	r6,-8(fp)
 4004938:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 400493c:	e0bffd17 	ldw	r2,-12(fp)
 4004940:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 4004944:	00004706 	br	4004a64 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 4004948:	e0bffc17 	ldw	r2,-16(fp)
 400494c:	10800a17 	ldw	r2,40(r2)
 4004950:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 4004954:	e0bffc17 	ldw	r2,-16(fp)
 4004958:	10800b17 	ldw	r2,44(r2)
 400495c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 4004960:	e0fff717 	ldw	r3,-36(fp)
 4004964:	e0bff817 	ldw	r2,-32(fp)
 4004968:	18800536 	bltu	r3,r2,4004980 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 400496c:	e0fff717 	ldw	r3,-36(fp)
 4004970:	e0bff817 	ldw	r2,-32(fp)
 4004974:	1885c83a 	sub	r2,r3,r2
 4004978:	e0bff615 	stw	r2,-40(fp)
 400497c:	00000406 	br	4004990 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 4004980:	00c20004 	movi	r3,2048
 4004984:	e0bff817 	ldw	r2,-32(fp)
 4004988:	1885c83a 	sub	r2,r3,r2
 400498c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 4004990:	e0bff617 	ldw	r2,-40(fp)
 4004994:	10001e26 	beq	r2,zero,4004a10 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 4004998:	e0fffe17 	ldw	r3,-8(fp)
 400499c:	e0bff617 	ldw	r2,-40(fp)
 40049a0:	1880022e 	bgeu	r3,r2,40049ac <altera_avalon_jtag_uart_read+0x90>
        n = space;
 40049a4:	e0bffe17 	ldw	r2,-8(fp)
 40049a8:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 40049ac:	e0bffc17 	ldw	r2,-16(fp)
 40049b0:	10c00e04 	addi	r3,r2,56
 40049b4:	e0bff817 	ldw	r2,-32(fp)
 40049b8:	1885883a 	add	r2,r3,r2
 40049bc:	e1bff617 	ldw	r6,-40(fp)
 40049c0:	100b883a 	mov	r5,r2
 40049c4:	e13ff517 	ldw	r4,-44(fp)
 40049c8:	40006180 	call	4000618 <memcpy>
      ptr   += n;
 40049cc:	e0fff517 	ldw	r3,-44(fp)
 40049d0:	e0bff617 	ldw	r2,-40(fp)
 40049d4:	1885883a 	add	r2,r3,r2
 40049d8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 40049dc:	e0fffe17 	ldw	r3,-8(fp)
 40049e0:	e0bff617 	ldw	r2,-40(fp)
 40049e4:	1885c83a 	sub	r2,r3,r2
 40049e8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 40049ec:	e0fff817 	ldw	r3,-32(fp)
 40049f0:	e0bff617 	ldw	r2,-40(fp)
 40049f4:	1885883a 	add	r2,r3,r2
 40049f8:	10c1ffcc 	andi	r3,r2,2047
 40049fc:	e0bffc17 	ldw	r2,-16(fp)
 4004a00:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 4004a04:	e0bffe17 	ldw	r2,-8(fp)
 4004a08:	00bfcf16 	blt	zero,r2,4004948 <__alt_data_end+0xfc004948>
 4004a0c:	00000106 	br	4004a14 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 4004a10:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 4004a14:	e0fff517 	ldw	r3,-44(fp)
 4004a18:	e0bffd17 	ldw	r2,-12(fp)
 4004a1c:	1880141e 	bne	r3,r2,4004a70 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 4004a20:	e0bfff17 	ldw	r2,-4(fp)
 4004a24:	1090000c 	andi	r2,r2,16384
 4004a28:	1000131e 	bne	r2,zero,4004a78 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 4004a2c:	0001883a 	nop
 4004a30:	e0bffc17 	ldw	r2,-16(fp)
 4004a34:	10c00a17 	ldw	r3,40(r2)
 4004a38:	e0bff717 	ldw	r2,-36(fp)
 4004a3c:	1880051e 	bne	r3,r2,4004a54 <altera_avalon_jtag_uart_read+0x138>
 4004a40:	e0bffc17 	ldw	r2,-16(fp)
 4004a44:	10c00917 	ldw	r3,36(r2)
 4004a48:	e0bffc17 	ldw	r2,-16(fp)
 4004a4c:	10800117 	ldw	r2,4(r2)
 4004a50:	18bff736 	bltu	r3,r2,4004a30 <__alt_data_end+0xfc004a30>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 4004a54:	e0bffc17 	ldw	r2,-16(fp)
 4004a58:	10c00a17 	ldw	r3,40(r2)
 4004a5c:	e0bff717 	ldw	r2,-36(fp)
 4004a60:	18800726 	beq	r3,r2,4004a80 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 4004a64:	e0bffe17 	ldw	r2,-8(fp)
 4004a68:	00bfb716 	blt	zero,r2,4004948 <__alt_data_end+0xfc004948>
 4004a6c:	00000506 	br	4004a84 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 4004a70:	0001883a 	nop
 4004a74:	00000306 	br	4004a84 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 4004a78:	0001883a 	nop
 4004a7c:	00000106 	br	4004a84 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 4004a80:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 4004a84:	e0fff517 	ldw	r3,-44(fp)
 4004a88:	e0bffd17 	ldw	r2,-12(fp)
 4004a8c:	18801826 	beq	r3,r2,4004af0 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4004a90:	0005303a 	rdctl	r2,status
 4004a94:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4004a98:	e0fffb17 	ldw	r3,-20(fp)
 4004a9c:	00bfff84 	movi	r2,-2
 4004aa0:	1884703a 	and	r2,r3,r2
 4004aa4:	1001703a 	wrctl	status,r2
  
  return context;
 4004aa8:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 4004aac:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4004ab0:	e0bffc17 	ldw	r2,-16(fp)
 4004ab4:	10800817 	ldw	r2,32(r2)
 4004ab8:	10c00054 	ori	r3,r2,1
 4004abc:	e0bffc17 	ldw	r2,-16(fp)
 4004ac0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4004ac4:	e0bffc17 	ldw	r2,-16(fp)
 4004ac8:	10800017 	ldw	r2,0(r2)
 4004acc:	10800104 	addi	r2,r2,4
 4004ad0:	1007883a 	mov	r3,r2
 4004ad4:	e0bffc17 	ldw	r2,-16(fp)
 4004ad8:	10800817 	ldw	r2,32(r2)
 4004adc:	18800035 	stwio	r2,0(r3)
 4004ae0:	e0bffa17 	ldw	r2,-24(fp)
 4004ae4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4004ae8:	e0bff917 	ldw	r2,-28(fp)
 4004aec:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 4004af0:	e0fff517 	ldw	r3,-44(fp)
 4004af4:	e0bffd17 	ldw	r2,-12(fp)
 4004af8:	18800426 	beq	r3,r2,4004b0c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 4004afc:	e0fff517 	ldw	r3,-44(fp)
 4004b00:	e0bffd17 	ldw	r2,-12(fp)
 4004b04:	1885c83a 	sub	r2,r3,r2
 4004b08:	00000606 	br	4004b24 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 4004b0c:	e0bfff17 	ldw	r2,-4(fp)
 4004b10:	1090000c 	andi	r2,r2,16384
 4004b14:	10000226 	beq	r2,zero,4004b20 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 4004b18:	00bffd44 	movi	r2,-11
 4004b1c:	00000106 	br	4004b24 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 4004b20:	00bffec4 	movi	r2,-5
}
 4004b24:	e037883a 	mov	sp,fp
 4004b28:	dfc00117 	ldw	ra,4(sp)
 4004b2c:	df000017 	ldw	fp,0(sp)
 4004b30:	dec00204 	addi	sp,sp,8
 4004b34:	f800283a 	ret

04004b38 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 4004b38:	defff304 	addi	sp,sp,-52
 4004b3c:	dfc00c15 	stw	ra,48(sp)
 4004b40:	df000b15 	stw	fp,44(sp)
 4004b44:	df000b04 	addi	fp,sp,44
 4004b48:	e13ffc15 	stw	r4,-16(fp)
 4004b4c:	e17ffd15 	stw	r5,-12(fp)
 4004b50:	e1bffe15 	stw	r6,-8(fp)
 4004b54:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 4004b58:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 4004b5c:	e0bffd17 	ldw	r2,-12(fp)
 4004b60:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 4004b64:	00003706 	br	4004c44 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 4004b68:	e0bffc17 	ldw	r2,-16(fp)
 4004b6c:	10800c17 	ldw	r2,48(r2)
 4004b70:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 4004b74:	e0bffc17 	ldw	r2,-16(fp)
 4004b78:	10800d17 	ldw	r2,52(r2)
 4004b7c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 4004b80:	e0fff917 	ldw	r3,-28(fp)
 4004b84:	e0bff517 	ldw	r2,-44(fp)
 4004b88:	1880062e 	bgeu	r3,r2,4004ba4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 4004b8c:	e0fff517 	ldw	r3,-44(fp)
 4004b90:	e0bff917 	ldw	r2,-28(fp)
 4004b94:	1885c83a 	sub	r2,r3,r2
 4004b98:	10bfffc4 	addi	r2,r2,-1
 4004b9c:	e0bff615 	stw	r2,-40(fp)
 4004ba0:	00000b06 	br	4004bd0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 4004ba4:	e0bff517 	ldw	r2,-44(fp)
 4004ba8:	10000526 	beq	r2,zero,4004bc0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 4004bac:	00c20004 	movi	r3,2048
 4004bb0:	e0bff917 	ldw	r2,-28(fp)
 4004bb4:	1885c83a 	sub	r2,r3,r2
 4004bb8:	e0bff615 	stw	r2,-40(fp)
 4004bbc:	00000406 	br	4004bd0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 4004bc0:	00c1ffc4 	movi	r3,2047
 4004bc4:	e0bff917 	ldw	r2,-28(fp)
 4004bc8:	1885c83a 	sub	r2,r3,r2
 4004bcc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 4004bd0:	e0bff617 	ldw	r2,-40(fp)
 4004bd4:	10001e26 	beq	r2,zero,4004c50 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 4004bd8:	e0fffe17 	ldw	r3,-8(fp)
 4004bdc:	e0bff617 	ldw	r2,-40(fp)
 4004be0:	1880022e 	bgeu	r3,r2,4004bec <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 4004be4:	e0bffe17 	ldw	r2,-8(fp)
 4004be8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 4004bec:	e0bffc17 	ldw	r2,-16(fp)
 4004bf0:	10c20e04 	addi	r3,r2,2104
 4004bf4:	e0bff917 	ldw	r2,-28(fp)
 4004bf8:	1885883a 	add	r2,r3,r2
 4004bfc:	e1bff617 	ldw	r6,-40(fp)
 4004c00:	e17ffd17 	ldw	r5,-12(fp)
 4004c04:	1009883a 	mov	r4,r2
 4004c08:	40006180 	call	4000618 <memcpy>
      ptr   += n;
 4004c0c:	e0fffd17 	ldw	r3,-12(fp)
 4004c10:	e0bff617 	ldw	r2,-40(fp)
 4004c14:	1885883a 	add	r2,r3,r2
 4004c18:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 4004c1c:	e0fffe17 	ldw	r3,-8(fp)
 4004c20:	e0bff617 	ldw	r2,-40(fp)
 4004c24:	1885c83a 	sub	r2,r3,r2
 4004c28:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4004c2c:	e0fff917 	ldw	r3,-28(fp)
 4004c30:	e0bff617 	ldw	r2,-40(fp)
 4004c34:	1885883a 	add	r2,r3,r2
 4004c38:	10c1ffcc 	andi	r3,r2,2047
 4004c3c:	e0bffc17 	ldw	r2,-16(fp)
 4004c40:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 4004c44:	e0bffe17 	ldw	r2,-8(fp)
 4004c48:	00bfc716 	blt	zero,r2,4004b68 <__alt_data_end+0xfc004b68>
 4004c4c:	00000106 	br	4004c54 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 4004c50:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4004c54:	0005303a 	rdctl	r2,status
 4004c58:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4004c5c:	e0fffb17 	ldw	r3,-20(fp)
 4004c60:	00bfff84 	movi	r2,-2
 4004c64:	1884703a 	and	r2,r3,r2
 4004c68:	1001703a 	wrctl	status,r2
  
  return context;
 4004c6c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 4004c70:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4004c74:	e0bffc17 	ldw	r2,-16(fp)
 4004c78:	10800817 	ldw	r2,32(r2)
 4004c7c:	10c00094 	ori	r3,r2,2
 4004c80:	e0bffc17 	ldw	r2,-16(fp)
 4004c84:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4004c88:	e0bffc17 	ldw	r2,-16(fp)
 4004c8c:	10800017 	ldw	r2,0(r2)
 4004c90:	10800104 	addi	r2,r2,4
 4004c94:	1007883a 	mov	r3,r2
 4004c98:	e0bffc17 	ldw	r2,-16(fp)
 4004c9c:	10800817 	ldw	r2,32(r2)
 4004ca0:	18800035 	stwio	r2,0(r3)
 4004ca4:	e0bffa17 	ldw	r2,-24(fp)
 4004ca8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4004cac:	e0bff817 	ldw	r2,-32(fp)
 4004cb0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 4004cb4:	e0bffe17 	ldw	r2,-8(fp)
 4004cb8:	0080100e 	bge	zero,r2,4004cfc <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 4004cbc:	e0bfff17 	ldw	r2,-4(fp)
 4004cc0:	1090000c 	andi	r2,r2,16384
 4004cc4:	1000101e 	bne	r2,zero,4004d08 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 4004cc8:	0001883a 	nop
 4004ccc:	e0bffc17 	ldw	r2,-16(fp)
 4004cd0:	10c00d17 	ldw	r3,52(r2)
 4004cd4:	e0bff517 	ldw	r2,-44(fp)
 4004cd8:	1880051e 	bne	r3,r2,4004cf0 <altera_avalon_jtag_uart_write+0x1b8>
 4004cdc:	e0bffc17 	ldw	r2,-16(fp)
 4004ce0:	10c00917 	ldw	r3,36(r2)
 4004ce4:	e0bffc17 	ldw	r2,-16(fp)
 4004ce8:	10800117 	ldw	r2,4(r2)
 4004cec:	18bff736 	bltu	r3,r2,4004ccc <__alt_data_end+0xfc004ccc>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 4004cf0:	e0bffc17 	ldw	r2,-16(fp)
 4004cf4:	10800917 	ldw	r2,36(r2)
 4004cf8:	1000051e 	bne	r2,zero,4004d10 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 4004cfc:	e0bffe17 	ldw	r2,-8(fp)
 4004d00:	00bfd016 	blt	zero,r2,4004c44 <__alt_data_end+0xfc004c44>
 4004d04:	00000306 	br	4004d14 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 4004d08:	0001883a 	nop
 4004d0c:	00000106 	br	4004d14 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 4004d10:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 4004d14:	e0fffd17 	ldw	r3,-12(fp)
 4004d18:	e0bff717 	ldw	r2,-36(fp)
 4004d1c:	18800426 	beq	r3,r2,4004d30 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 4004d20:	e0fffd17 	ldw	r3,-12(fp)
 4004d24:	e0bff717 	ldw	r2,-36(fp)
 4004d28:	1885c83a 	sub	r2,r3,r2
 4004d2c:	00000606 	br	4004d48 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 4004d30:	e0bfff17 	ldw	r2,-4(fp)
 4004d34:	1090000c 	andi	r2,r2,16384
 4004d38:	10000226 	beq	r2,zero,4004d44 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 4004d3c:	00bffd44 	movi	r2,-11
 4004d40:	00000106 	br	4004d48 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 4004d44:	00bffec4 	movi	r2,-5
}
 4004d48:	e037883a 	mov	sp,fp
 4004d4c:	dfc00117 	ldw	ra,4(sp)
 4004d50:	df000017 	ldw	fp,0(sp)
 4004d54:	dec00204 	addi	sp,sp,8
 4004d58:	f800283a 	ret

04004d5c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 4004d5c:	defff904 	addi	sp,sp,-28
 4004d60:	dfc00615 	stw	ra,24(sp)
 4004d64:	df000515 	stw	fp,20(sp)
 4004d68:	df000504 	addi	fp,sp,20
 4004d6c:	e13ffe15 	stw	r4,-8(fp)
 4004d70:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 4004d74:	0007883a 	mov	r3,zero
 4004d78:	e0bffe17 	ldw	r2,-8(fp)
 4004d7c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 4004d80:	e0bffe17 	ldw	r2,-8(fp)
 4004d84:	10800104 	addi	r2,r2,4
 4004d88:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4004d8c:	0005303a 	rdctl	r2,status
 4004d90:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4004d94:	e0fffc17 	ldw	r3,-16(fp)
 4004d98:	00bfff84 	movi	r2,-2
 4004d9c:	1884703a 	and	r2,r3,r2
 4004da0:	1001703a 	wrctl	status,r2
  
  return context;
 4004da4:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 4004da8:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
 4004dac:	4006a900 	call	4006a90 <alt_tick>
 4004db0:	e0bffb17 	ldw	r2,-20(fp)
 4004db4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4004db8:	e0bffd17 	ldw	r2,-12(fp)
 4004dbc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 4004dc0:	0001883a 	nop
 4004dc4:	e037883a 	mov	sp,fp
 4004dc8:	dfc00117 	ldw	ra,4(sp)
 4004dcc:	df000017 	ldw	fp,0(sp)
 4004dd0:	dec00204 	addi	sp,sp,8
 4004dd4:	f800283a 	ret

04004dd8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 4004dd8:	defff904 	addi	sp,sp,-28
 4004ddc:	dfc00615 	stw	ra,24(sp)
 4004de0:	df000515 	stw	fp,20(sp)
 4004de4:	df000504 	addi	fp,sp,20
 4004de8:	e13ffc15 	stw	r4,-16(fp)
 4004dec:	e17ffd15 	stw	r5,-12(fp)
 4004df0:	e1bffe15 	stw	r6,-8(fp)
 4004df4:	e1ffff15 	stw	r7,-4(fp)
 4004df8:	e0bfff17 	ldw	r2,-4(fp)
 4004dfc:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 4004e00:	d0a6f417 	ldw	r2,-25648(gp)
 4004e04:	1000021e 	bne	r2,zero,4004e10 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 4004e08:	e0bffb17 	ldw	r2,-20(fp)
 4004e0c:	d0a6f415 	stw	r2,-25648(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 4004e10:	e0bffc17 	ldw	r2,-16(fp)
 4004e14:	10800104 	addi	r2,r2,4
 4004e18:	00c001c4 	movi	r3,7
 4004e1c:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
 4004e20:	01810034 	movhi	r6,1024
 4004e24:	31935704 	addi	r6,r6,19804
 4004e28:	e17ffc17 	ldw	r5,-16(fp)
 4004e2c:	e13ffe17 	ldw	r4,-8(fp)
 4004e30:	40066200 	call	4006620 <alt_irq_register>
#endif  
}
 4004e34:	0001883a 	nop
 4004e38:	e037883a 	mov	sp,fp
 4004e3c:	dfc00117 	ldw	ra,4(sp)
 4004e40:	df000017 	ldw	fp,0(sp)
 4004e44:	dec00204 	addi	sp,sp,8
 4004e48:	f800283a 	ret

04004e4c <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
 4004e4c:	defffc04 	addi	sp,sp,-16
 4004e50:	dfc00315 	stw	ra,12(sp)
 4004e54:	df000215 	stw	fp,8(sp)
 4004e58:	df000204 	addi	fp,sp,8
 4004e5c:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
 4004e60:	e0bfff17 	ldw	r2,-4(fp)
 4004e64:	10800217 	ldw	r2,8(r2)
 4004e68:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
 4004e6c:	00000b06 	br	4004e9c <alt_up_char_buffer_init+0x50>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
 4004e70:	01410034 	movhi	r5,1024
 4004e74:	295d4604 	addi	r5,r5,29976
 4004e78:	e13ffe17 	ldw	r4,-8(fp)
 4004e7c:	4006f5c0 	call	4006f5c <strcmp>
 4004e80:	1000031e 	bne	r2,zero,4004e90 <alt_up_char_buffer_init+0x44>
			(*name) = '\0';
 4004e84:	e0bffe17 	ldw	r2,-8(fp)
 4004e88:	10000005 	stb	zero,0(r2)
			break;
 4004e8c:	00000906 	br	4004eb4 <alt_up_char_buffer_init+0x68>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
 4004e90:	e0bffe17 	ldw	r2,-8(fp)
 4004e94:	10800044 	addi	r2,r2,1
 4004e98:	e0bffe15 	stw	r2,-8(fp)
 4004e9c:	e0bffe17 	ldw	r2,-8(fp)
 4004ea0:	10800003 	ldbu	r2,0(r2)
 4004ea4:	10803fcc 	andi	r2,r2,255
 4004ea8:	1080201c 	xori	r2,r2,128
 4004eac:	10bfe004 	addi	r2,r2,-128
 4004eb0:	103fef1e 	bne	r2,zero,4004e70 <__alt_data_end+0xfc004e70>
			(*name) = '\0';
			break;
		}
	}
	
	return;
 4004eb4:	0001883a 	nop
}
 4004eb8:	e037883a 	mov	sp,fp
 4004ebc:	dfc00117 	ldw	ra,4(sp)
 4004ec0:	df000017 	ldw	fp,0(sp)
 4004ec4:	dec00204 	addi	sp,sp,8
 4004ec8:	f800283a 	ret

04004ecc <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
 4004ecc:	defffc04 	addi	sp,sp,-16
 4004ed0:	dfc00315 	stw	ra,12(sp)
 4004ed4:	df000215 	stw	fp,8(sp)
 4004ed8:	df000204 	addi	fp,sp,8
 4004edc:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
 4004ee0:	d1600604 	addi	r5,gp,-32744
 4004ee4:	e13fff17 	ldw	r4,-4(fp)
 4004ee8:	400641c0 	call	400641c <alt_find_dev>
 4004eec:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 4004ef0:	e0bffe17 	ldw	r2,-8(fp)
}
 4004ef4:	e037883a 	mov	sp,fp
 4004ef8:	dfc00117 	ldw	ra,4(sp)
 4004efc:	df000017 	ldw	fp,0(sp)
 4004f00:	dec00204 	addi	sp,sp,8
 4004f04:	f800283a 	ret

04004f08 <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
 4004f08:	defffa04 	addi	sp,sp,-24
 4004f0c:	df000515 	stw	fp,20(sp)
 4004f10:	df000504 	addi	fp,sp,20
 4004f14:	e13ffc15 	stw	r4,-16(fp)
 4004f18:	2805883a 	mov	r2,r5
 4004f1c:	e1bffe15 	stw	r6,-8(fp)
 4004f20:	e1ffff15 	stw	r7,-4(fp)
 4004f24:	e0bffd05 	stb	r2,-12(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
 4004f28:	e0bffc17 	ldw	r2,-16(fp)
 4004f2c:	10800c17 	ldw	r2,48(r2)
 4004f30:	e0fffe17 	ldw	r3,-8(fp)
 4004f34:	1880042e 	bgeu	r3,r2,4004f48 <alt_up_char_buffer_draw+0x40>
 4004f38:	e0bffc17 	ldw	r2,-16(fp)
 4004f3c:	10800d17 	ldw	r2,52(r2)
 4004f40:	e0ffff17 	ldw	r3,-4(fp)
 4004f44:	18800236 	bltu	r3,r2,4004f50 <alt_up_char_buffer_draw+0x48>
		return -1;
 4004f48:	00bfffc4 	movi	r2,-1
 4004f4c:	00001d06 	br	4004fc4 <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
 4004f50:	e03ffb15 	stw	zero,-20(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
 4004f54:	e0bffc17 	ldw	r2,-16(fp)
 4004f58:	10c00f17 	ldw	r3,60(r2)
 4004f5c:	e0bffe17 	ldw	r2,-8(fp)
 4004f60:	1886703a 	and	r3,r3,r2
 4004f64:	e0bffc17 	ldw	r2,-16(fp)
 4004f68:	10800e17 	ldw	r2,56(r2)
 4004f6c:	1884983a 	sll	r2,r3,r2
 4004f70:	e0fffb17 	ldw	r3,-20(fp)
 4004f74:	1884b03a 	or	r2,r3,r2
 4004f78:	e0bffb15 	stw	r2,-20(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
 4004f7c:	e0bffc17 	ldw	r2,-16(fp)
 4004f80:	10c01117 	ldw	r3,68(r2)
 4004f84:	e0bfff17 	ldw	r2,-4(fp)
 4004f88:	1886703a 	and	r3,r3,r2
 4004f8c:	e0bffc17 	ldw	r2,-16(fp)
 4004f90:	10801017 	ldw	r2,64(r2)
 4004f94:	1884983a 	sll	r2,r3,r2
 4004f98:	e0fffb17 	ldw	r3,-20(fp)
 4004f9c:	1884b03a 	or	r2,r3,r2
 4004fa0:	e0bffb15 	stw	r2,-20(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
 4004fa4:	e0bffc17 	ldw	r2,-16(fp)
 4004fa8:	10c00b17 	ldw	r3,44(r2)
 4004fac:	e0bffb17 	ldw	r2,-20(fp)
 4004fb0:	1885883a 	add	r2,r3,r2
 4004fb4:	1007883a 	mov	r3,r2
 4004fb8:	e0bffd03 	ldbu	r2,-12(fp)
 4004fbc:	18800025 	stbio	r2,0(r3)

	return 0;
 4004fc0:	0005883a 	mov	r2,zero
}
 4004fc4:	e037883a 	mov	sp,fp
 4004fc8:	df000017 	ldw	fp,0(sp)
 4004fcc:	dec00104 	addi	sp,sp,4
 4004fd0:	f800283a 	ret

04004fd4 <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
 4004fd4:	defffa04 	addi	sp,sp,-24
 4004fd8:	df000515 	stw	fp,20(sp)
 4004fdc:	df000504 	addi	fp,sp,20
 4004fe0:	e13ffc15 	stw	r4,-16(fp)
 4004fe4:	e17ffd15 	stw	r5,-12(fp)
 4004fe8:	e1bffe15 	stw	r6,-8(fp)
 4004fec:	e1ffff15 	stw	r7,-4(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
 4004ff0:	e0bffc17 	ldw	r2,-16(fp)
 4004ff4:	10800c17 	ldw	r2,48(r2)
 4004ff8:	e0fffe17 	ldw	r3,-8(fp)
 4004ffc:	1880042e 	bgeu	r3,r2,4005010 <alt_up_char_buffer_string+0x3c>
 4005000:	e0bffc17 	ldw	r2,-16(fp)
 4005004:	10800d17 	ldw	r2,52(r2)
 4005008:	e0ffff17 	ldw	r3,-4(fp)
 400500c:	18800236 	bltu	r3,r2,4005018 <alt_up_char_buffer_string+0x44>
		return -1;
 4005010:	00bfffc4 	movi	r2,-1
 4005014:	00002a06 	br	40050c0 <alt_up_char_buffer_string+0xec>
	
	unsigned int offset = 0;
 4005018:	e03ffb15 	stw	zero,-20(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
 400501c:	e0bffc17 	ldw	r2,-16(fp)
 4005020:	10801017 	ldw	r2,64(r2)
 4005024:	e0ffff17 	ldw	r3,-4(fp)
 4005028:	1886983a 	sll	r3,r3,r2
 400502c:	e0bffe17 	ldw	r2,-8(fp)
 4005030:	1885883a 	add	r2,r3,r2
 4005034:	e0bffb15 	stw	r2,-20(fp)

	while ( *ptr )
 4005038:	00001a06 	br	40050a4 <alt_up_char_buffer_string+0xd0>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
 400503c:	e0bffc17 	ldw	r2,-16(fp)
 4005040:	10c00b17 	ldw	r3,44(r2)
 4005044:	e0bffb17 	ldw	r2,-20(fp)
 4005048:	1885883a 	add	r2,r3,r2
 400504c:	1007883a 	mov	r3,r2
 4005050:	e0bffd17 	ldw	r2,-12(fp)
 4005054:	10800003 	ldbu	r2,0(r2)
 4005058:	10803fcc 	andi	r2,r2,255
 400505c:	1080201c 	xori	r2,r2,128
 4005060:	10bfe004 	addi	r2,r2,-128
 4005064:	18800025 	stbio	r2,0(r3)
		++ptr;
 4005068:	e0bffd17 	ldw	r2,-12(fp)
 400506c:	10800044 	addi	r2,r2,1
 4005070:	e0bffd15 	stw	r2,-12(fp)
		if (++x >= char_buffer->x_resolution)
 4005074:	e0bffe17 	ldw	r2,-8(fp)
 4005078:	10800044 	addi	r2,r2,1
 400507c:	e0bffe15 	stw	r2,-8(fp)
 4005080:	e0bffc17 	ldw	r2,-16(fp)
 4005084:	10800c17 	ldw	r2,48(r2)
 4005088:	e0fffe17 	ldw	r3,-8(fp)
 400508c:	18800236 	bltu	r3,r2,4005098 <alt_up_char_buffer_string+0xc4>
			return -1;
 4005090:	00bfffc4 	movi	r2,-1
 4005094:	00000a06 	br	40050c0 <alt_up_char_buffer_string+0xec>
		++offset;
 4005098:	e0bffb17 	ldw	r2,-20(fp)
 400509c:	10800044 	addi	r2,r2,1
 40050a0:	e0bffb15 	stw	r2,-20(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
 40050a4:	e0bffd17 	ldw	r2,-12(fp)
 40050a8:	10800003 	ldbu	r2,0(r2)
 40050ac:	10803fcc 	andi	r2,r2,255
 40050b0:	1080201c 	xori	r2,r2,128
 40050b4:	10bfe004 	addi	r2,r2,-128
 40050b8:	103fe01e 	bne	r2,zero,400503c <__alt_data_end+0xfc00503c>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
 40050bc:	0005883a 	mov	r2,zero
}
 40050c0:	e037883a 	mov	sp,fp
 40050c4:	df000017 	ldw	fp,0(sp)
 40050c8:	dec00104 	addi	sp,sp,4
 40050cc:	f800283a 	ret

040050d0 <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
 40050d0:	defffe04 	addi	sp,sp,-8
 40050d4:	df000115 	stw	fp,4(sp)
 40050d8:	df000104 	addi	fp,sp,4
 40050dc:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
 40050e0:	e0bfff17 	ldw	r2,-4(fp)
 40050e4:	10800a17 	ldw	r2,40(r2)
 40050e8:	10800084 	addi	r2,r2,2
 40050ec:	1007883a 	mov	r3,r2
 40050f0:	00800044 	movi	r2,1
 40050f4:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
 40050f8:	0001883a 	nop
 40050fc:	e0bfff17 	ldw	r2,-4(fp)
 4005100:	10800a17 	ldw	r2,40(r2)
 4005104:	10800084 	addi	r2,r2,2
 4005108:	10800023 	ldbuio	r2,0(r2)
 400510c:	10803fcc 	andi	r2,r2,255
 4005110:	1080004c 	andi	r2,r2,1
 4005114:	103ff91e 	bne	r2,zero,40050fc <__alt_data_end+0xfc0050fc>
	return 0;
 4005118:	0005883a 	mov	r2,zero
}
 400511c:	e037883a 	mov	sp,fp
 4005120:	df000017 	ldw	fp,0(sp)
 4005124:	dec00104 	addi	sp,sp,4
 4005128:	f800283a 	ret

0400512c <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
 400512c:	defffc04 	addi	sp,sp,-16
 4005130:	dfc00315 	stw	ra,12(sp)
 4005134:	df000215 	stw	fp,8(sp)
 4005138:	df000204 	addi	fp,sp,8
 400513c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
 4005140:	d1600604 	addi	r5,gp,-32744
 4005144:	e13fff17 	ldw	r4,-4(fp)
 4005148:	400641c0 	call	400641c <alt_find_dev>
 400514c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 4005150:	e0bffe17 	ldw	r2,-8(fp)
}
 4005154:	e037883a 	mov	sp,fp
 4005158:	dfc00117 	ldw	ra,4(sp)
 400515c:	df000017 	ldw	fp,0(sp)
 4005160:	dec00204 	addi	sp,sp,8
 4005164:	f800283a 	ret

04005168 <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
 4005168:	defffa04 	addi	sp,sp,-24
 400516c:	df000515 	stw	fp,20(sp)
 4005170:	df000504 	addi	fp,sp,20
 4005174:	e13ffc15 	stw	r4,-16(fp)
 4005178:	e17ffd15 	stw	r5,-12(fp)
 400517c:	e1bffe15 	stw	r6,-8(fp)
 4005180:	e1ffff15 	stw	r7,-4(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
 4005184:	e0bffc17 	ldw	r2,-16(fp)
 4005188:	10800f17 	ldw	r2,60(r2)
 400518c:	e0fffe17 	ldw	r3,-8(fp)
 4005190:	1880042e 	bgeu	r3,r2,40051a4 <alt_up_pixel_buffer_dma_draw+0x3c>
 4005194:	e0bffc17 	ldw	r2,-16(fp)
 4005198:	10801017 	ldw	r2,64(r2)
 400519c:	e0ffff17 	ldw	r3,-4(fp)
 40051a0:	18800236 	bltu	r3,r2,40051ac <alt_up_pixel_buffer_dma_draw+0x44>
		return -1;
 40051a4:	00bfffc4 	movi	r2,-1
 40051a8:	00005006 	br	40052ec <alt_up_pixel_buffer_dma_draw+0x184>

	unsigned int addr = 0;
 40051ac:	e03ffb15 	stw	zero,-20(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 40051b0:	e0bffc17 	ldw	r2,-16(fp)
 40051b4:	10800d17 	ldw	r2,52(r2)
 40051b8:	1000151e 	bne	r2,zero,4005210 <alt_up_pixel_buffer_dma_draw+0xa8>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
 40051bc:	e0bffc17 	ldw	r2,-16(fp)
 40051c0:	10c01217 	ldw	r3,72(r2)
 40051c4:	e0bffe17 	ldw	r2,-8(fp)
 40051c8:	1886703a 	and	r3,r3,r2
 40051cc:	e0bffc17 	ldw	r2,-16(fp)
 40051d0:	10801117 	ldw	r2,68(r2)
 40051d4:	1884983a 	sll	r2,r3,r2
 40051d8:	e0fffb17 	ldw	r3,-20(fp)
 40051dc:	1885883a 	add	r2,r3,r2
 40051e0:	e0bffb15 	stw	r2,-20(fp)
		addr += ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
 40051e4:	e0bffc17 	ldw	r2,-16(fp)
 40051e8:	10c01417 	ldw	r3,80(r2)
 40051ec:	e0bfff17 	ldw	r2,-4(fp)
 40051f0:	1886703a 	and	r3,r3,r2
 40051f4:	e0bffc17 	ldw	r2,-16(fp)
 40051f8:	10801317 	ldw	r2,76(r2)
 40051fc:	1884983a 	sll	r2,r3,r2
 4005200:	e0fffb17 	ldw	r3,-20(fp)
 4005204:	1885883a 	add	r2,r3,r2
 4005208:	e0bffb15 	stw	r2,-20(fp)
 400520c:	00001706 	br	400526c <alt_up_pixel_buffer_dma_draw+0x104>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
 4005210:	e0bffc17 	ldw	r2,-16(fp)
 4005214:	10c01217 	ldw	r3,72(r2)
 4005218:	e0bffe17 	ldw	r2,-8(fp)
 400521c:	1886703a 	and	r3,r3,r2
 4005220:	e0bffc17 	ldw	r2,-16(fp)
 4005224:	10801117 	ldw	r2,68(r2)
 4005228:	1884983a 	sll	r2,r3,r2
 400522c:	e0fffb17 	ldw	r3,-20(fp)
 4005230:	1885883a 	add	r2,r3,r2
 4005234:	e0bffb15 	stw	r2,-20(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
 4005238:	e0bffc17 	ldw	r2,-16(fp)
 400523c:	10c01417 	ldw	r3,80(r2)
 4005240:	e0bfff17 	ldw	r2,-4(fp)
 4005244:	1886703a 	and	r3,r3,r2
 4005248:	e0bffc17 	ldw	r2,-16(fp)
 400524c:	10800f17 	ldw	r2,60(r2)
 4005250:	1887383a 	mul	r3,r3,r2
 4005254:	e0bffc17 	ldw	r2,-16(fp)
 4005258:	10801117 	ldw	r2,68(r2)
 400525c:	1884983a 	sll	r2,r3,r2
 4005260:	e0fffb17 	ldw	r3,-20(fp)
 4005264:	1885883a 	add	r2,r3,r2
 4005268:	e0bffb15 	stw	r2,-20(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 400526c:	e0bffc17 	ldw	r2,-16(fp)
 4005270:	10800e17 	ldw	r2,56(r2)
 4005274:	10800058 	cmpnei	r2,r2,1
 4005278:	1000081e 	bne	r2,zero,400529c <alt_up_pixel_buffer_dma_draw+0x134>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 400527c:	e0bffc17 	ldw	r2,-16(fp)
 4005280:	10c00c17 	ldw	r3,48(r2)
 4005284:	e0bffb17 	ldw	r2,-20(fp)
 4005288:	1885883a 	add	r2,r3,r2
 400528c:	1007883a 	mov	r3,r2
 4005290:	e0bffd17 	ldw	r2,-12(fp)
 4005294:	18800025 	stbio	r2,0(r3)
 4005298:	00001306 	br	40052e8 <alt_up_pixel_buffer_dma_draw+0x180>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 400529c:	e0bffc17 	ldw	r2,-16(fp)
 40052a0:	10800e17 	ldw	r2,56(r2)
 40052a4:	10800098 	cmpnei	r2,r2,2
 40052a8:	1000081e 	bne	r2,zero,40052cc <alt_up_pixel_buffer_dma_draw+0x164>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 40052ac:	e0bffc17 	ldw	r2,-16(fp)
 40052b0:	10c00c17 	ldw	r3,48(r2)
 40052b4:	e0bffb17 	ldw	r2,-20(fp)
 40052b8:	1885883a 	add	r2,r3,r2
 40052bc:	1007883a 	mov	r3,r2
 40052c0:	e0bffd17 	ldw	r2,-12(fp)
 40052c4:	1880002d 	sthio	r2,0(r3)
 40052c8:	00000706 	br	40052e8 <alt_up_pixel_buffer_dma_draw+0x180>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 40052cc:	e0bffc17 	ldw	r2,-16(fp)
 40052d0:	10c00c17 	ldw	r3,48(r2)
 40052d4:	e0bffb17 	ldw	r2,-20(fp)
 40052d8:	1885883a 	add	r2,r3,r2
 40052dc:	1007883a 	mov	r3,r2
 40052e0:	e0bffd17 	ldw	r2,-12(fp)
 40052e4:	18800035 	stwio	r2,0(r3)
	}

	return 0;
 40052e8:	0005883a 	mov	r2,zero
}
 40052ec:	e037883a 	mov	sp,fp
 40052f0:	df000017 	ldw	fp,0(sp)
 40052f4:	dec00104 	addi	sp,sp,4
 40052f8:	f800283a 	ret

040052fc <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
 40052fc:	defffd04 	addi	sp,sp,-12
 4005300:	df000215 	stw	fp,8(sp)
 4005304:	df000204 	addi	fp,sp,8
 4005308:	e13ffe15 	stw	r4,-8(fp)
 400530c:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
 4005310:	e0bffe17 	ldw	r2,-8(fp)
 4005314:	10800a17 	ldw	r2,40(r2)
 4005318:	10800104 	addi	r2,r2,4
 400531c:	1007883a 	mov	r3,r2
 4005320:	e0bfff17 	ldw	r2,-4(fp)
 4005324:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
 4005328:	e0bffe17 	ldw	r2,-8(fp)
 400532c:	10800a17 	ldw	r2,40(r2)
 4005330:	10800104 	addi	r2,r2,4
 4005334:	10800037 	ldwio	r2,0(r2)
 4005338:	1007883a 	mov	r3,r2
 400533c:	e0bffe17 	ldw	r2,-8(fp)
 4005340:	10c00c15 	stw	r3,48(r2)
	return 0;
 4005344:	0005883a 	mov	r2,zero
}
 4005348:	e037883a 	mov	sp,fp
 400534c:	df000017 	ldw	fp,0(sp)
 4005350:	dec00104 	addi	sp,sp,4
 4005354:	f800283a 	ret

04005358 <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
 4005358:	defffd04 	addi	sp,sp,-12
 400535c:	df000215 	stw	fp,8(sp)
 4005360:	dc000115 	stw	r16,4(sp)
 4005364:	df000204 	addi	fp,sp,8
 4005368:	e13ffe15 	stw	r4,-8(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
 400536c:	e0bffe17 	ldw	r2,-8(fp)
 4005370:	14000c17 	ldw	r16,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
 4005374:	e0bffe17 	ldw	r2,-8(fp)
 4005378:	10800a17 	ldw	r2,40(r2)
 400537c:	1007883a 	mov	r3,r2
 4005380:	00800044 	movi	r2,1
 4005384:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
 4005388:	e0bffe17 	ldw	r2,-8(fp)
 400538c:	10c00b17 	ldw	r3,44(r2)
 4005390:	e0bffe17 	ldw	r2,-8(fp)
 4005394:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
 4005398:	e0bffe17 	ldw	r2,-8(fp)
 400539c:	14000b15 	stw	r16,44(r2)
	return 0;
 40053a0:	0005883a 	mov	r2,zero
}
 40053a4:	e6ffff04 	addi	sp,fp,-4
 40053a8:	df000117 	ldw	fp,4(sp)
 40053ac:	dc000017 	ldw	r16,0(sp)
 40053b0:	dec00204 	addi	sp,sp,8
 40053b4:	f800283a 	ret

040053b8 <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
 40053b8:	defffe04 	addi	sp,sp,-8
 40053bc:	df000115 	stw	fp,4(sp)
 40053c0:	df000104 	addi	fp,sp,4
 40053c4:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
 40053c8:	e0bfff17 	ldw	r2,-4(fp)
 40053cc:	10800a17 	ldw	r2,40(r2)
 40053d0:	10800304 	addi	r2,r2,12
 40053d4:	10800037 	ldwio	r2,0(r2)
 40053d8:	1080004c 	andi	r2,r2,1
}
 40053dc:	e037883a 	mov	sp,fp
 40053e0:	df000017 	ldw	fp,0(sp)
 40053e4:	dec00104 	addi	sp,sp,4
 40053e8:	f800283a 	ret

040053ec <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
 40053ec:	defff704 	addi	sp,sp,-36
 40053f0:	df000815 	stw	fp,32(sp)
 40053f4:	dd400715 	stw	r21,28(sp)
 40053f8:	dd000615 	stw	r20,24(sp)
 40053fc:	dcc00515 	stw	r19,20(sp)
 4005400:	dc800415 	stw	r18,16(sp)
 4005404:	dc400315 	stw	r17,12(sp)
 4005408:	dc000215 	stw	r16,8(sp)
 400540c:	df000804 	addi	fp,sp,32
 4005410:	e13ff815 	stw	r4,-32(fp)
 4005414:	e17ff915 	stw	r5,-28(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 4005418:	e0bff917 	ldw	r2,-28(fp)
 400541c:	10800058 	cmpnei	r2,r2,1
 4005420:	1000031e 	bne	r2,zero,4005430 <alt_up_pixel_buffer_dma_clear_screen+0x44>
		addr = pixel_buffer->back_buffer_start_address;
 4005424:	e0bff817 	ldw	r2,-32(fp)
 4005428:	14400c17 	ldw	r17,48(r2)
 400542c:	00000206 	br	4005438 <alt_up_pixel_buffer_dma_clear_screen+0x4c>
	else
		addr = pixel_buffer->buffer_start_address;
 4005430:	e0bff817 	ldw	r2,-32(fp)
 4005434:	14400b17 	ldw	r17,44(r2)
	limit_x = pixel_buffer->x_resolution;
 4005438:	e0bff817 	ldw	r2,-32(fp)
 400543c:	14000f17 	ldw	r16,60(r2)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 4005440:	e0bff817 	ldw	r2,-32(fp)
 4005444:	10800e17 	ldw	r2,56(r2)
 4005448:	10800098 	cmpnei	r2,r2,2
 400544c:	1000031e 	bne	r2,zero,400545c <alt_up_pixel_buffer_dma_clear_screen+0x70>
		limit_x = limit_x << 1;
 4005450:	8405883a 	add	r2,r16,r16
 4005454:	1021883a 	mov	r16,r2
 4005458:	00000306 	br	4005468 <alt_up_pixel_buffer_dma_clear_screen+0x7c>
	} else {
		limit_x = limit_x << 2;
 400545c:	8405883a 	add	r2,r16,r16
 4005460:	1085883a 	add	r2,r2,r2
 4005464:	1021883a 	mov	r16,r2
	}	
	limit_y = pixel_buffer->y_resolution;
 4005468:	e0bff817 	ldw	r2,-32(fp)
 400546c:	14801017 	ldw	r18,64(r2)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 4005470:	e0bff817 	ldw	r2,-32(fp)
 4005474:	10800d17 	ldw	r2,52(r2)
 4005478:	1000111e 	bne	r2,zero,40054c0 <alt_up_pixel_buffer_dma_clear_screen+0xd4>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 400547c:	e0bff817 	ldw	r2,-32(fp)
 4005480:	15401317 	ldw	r21,76(r2)

		for (y = 0; y < limit_y; y++)
 4005484:	0029883a 	mov	r20,zero
 4005488:	00000b06 	br	40054b8 <alt_up_pixel_buffer_dma_clear_screen+0xcc>
		{
			for (x = 0; x < limit_x; x = x + 4)
 400548c:	0027883a 	mov	r19,zero
 4005490:	00000406 	br	40054a4 <alt_up_pixel_buffer_dma_clear_screen+0xb8>
			{
				IOWR_32DIRECT(addr, x, 0);
 4005494:	9c45883a 	add	r2,r19,r17
 4005498:	0007883a 	mov	r3,zero
 400549c:	10c00035 	stwio	r3,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
 40054a0:	9cc00104 	addi	r19,r19,4
 40054a4:	9c3ffb36 	bltu	r19,r16,4005494 <__alt_data_end+0xfc005494>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
 40054a8:	00800044 	movi	r2,1
 40054ac:	1544983a 	sll	r2,r2,r21
 40054b0:	88a3883a 	add	r17,r17,r2
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
 40054b4:	a5000044 	addi	r20,r20,1
 40054b8:	a4bff436 	bltu	r20,r18,400548c <__alt_data_end+0xfc00548c>
		for (x = 0; x < limit_y; x = x + 4)
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
 40054bc:	00000a06 	br	40054e8 <alt_up_pixel_buffer_dma_clear_screen+0xfc>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
 40054c0:	9425383a 	mul	r18,r18,r16

		for (x = 0; x < limit_y; x = x + 4)
 40054c4:	0021883a 	mov	r16,zero
 40054c8:	00000506 	br	40054e0 <alt_up_pixel_buffer_dma_clear_screen+0xf4>
		{
			IOWR_32DIRECT(addr, x, 0);
 40054cc:	8005883a 	mov	r2,r16
 40054d0:	1445883a 	add	r2,r2,r17
 40054d4:	0007883a 	mov	r3,zero
 40054d8:	10c00035 	stwio	r3,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
 40054dc:	84000104 	addi	r16,r16,4
 40054e0:	8005883a 	mov	r2,r16
 40054e4:	14bff936 	bltu	r2,r18,40054cc <__alt_data_end+0xfc0054cc>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
 40054e8:	0001883a 	nop
 40054ec:	e6fffa04 	addi	sp,fp,-24
 40054f0:	df000617 	ldw	fp,24(sp)
 40054f4:	dd400517 	ldw	r21,20(sp)
 40054f8:	dd000417 	ldw	r20,16(sp)
 40054fc:	dcc00317 	ldw	r19,12(sp)
 4005500:	dc800217 	ldw	r18,8(sp)
 4005504:	dc400117 	ldw	r17,4(sp)
 4005508:	dc000017 	ldw	r16,0(sp)
 400550c:	dec00704 	addi	sp,sp,28
 4005510:	f800283a 	ret

04005514 <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
 4005514:	defff304 	addi	sp,sp,-52
 4005518:	df000c15 	stw	fp,48(sp)
 400551c:	ddc00b15 	stw	r23,44(sp)
 4005520:	dd800a15 	stw	r22,40(sp)
 4005524:	dd400915 	stw	r21,36(sp)
 4005528:	dd000815 	stw	r20,32(sp)
 400552c:	dcc00715 	stw	r19,28(sp)
 4005530:	dc800615 	stw	r18,24(sp)
 4005534:	dc400515 	stw	r17,20(sp)
 4005538:	dc000415 	stw	r16,16(sp)
 400553c:	df000c04 	addi	fp,sp,48
 4005540:	e13ff415 	stw	r4,-48(fp)
 4005544:	e17ff515 	stw	r5,-44(fp)
 4005548:	e1bff615 	stw	r6,-40(fp)
 400554c:	e1fff715 	stw	r7,-36(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 4005550:	e0bff417 	ldw	r2,-48(fp)
 4005554:	14800f17 	ldw	r18,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 4005558:	e0bff417 	ldw	r2,-48(fp)
 400555c:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int l_x = x0;
 4005560:	e5bff517 	ldw	r22,-44(fp)
	register unsigned int r_x = x1;
 4005564:	e53ff717 	ldw	r20,-36(fp)
	register unsigned int t_y = y0;
 4005568:	e47ff617 	ldw	r17,-40(fp)
	register unsigned int b_y = y1;
 400556c:	e4c00117 	ldw	r19,4(fp)
	register unsigned int local_color = color;
 4005570:	e5c00217 	ldw	r23,8(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
 4005574:	a580032e 	bgeu	r20,r22,4005584 <alt_up_pixel_buffer_dma_draw_box+0x70>
	{
		temp = l_x;
 4005578:	b02b883a 	mov	r21,r22
		l_x = r_x;
 400557c:	a02d883a 	mov	r22,r20
		r_x = temp;
 4005580:	a829883a 	mov	r20,r21
	}
	if (t_y > b_y)
 4005584:	9c40032e 	bgeu	r19,r17,4005594 <alt_up_pixel_buffer_dma_draw_box+0x80>
	{
		temp = t_y;
 4005588:	882b883a 	mov	r21,r17
		t_y = b_y;
 400558c:	9823883a 	mov	r17,r19
		b_y = temp;
 4005590:	a827883a 	mov	r19,r21
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
 4005594:	b480892e 	bgeu	r22,r18,40057bc <alt_up_pixel_buffer_dma_draw_box+0x2a8>
 4005598:	8c00882e 	bgeu	r17,r16,40057bc <alt_up_pixel_buffer_dma_draw_box+0x2a8>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
 400559c:	a4800136 	bltu	r20,r18,40055a4 <alt_up_pixel_buffer_dma_draw_box+0x90>
	{
		r_x = limit_x - 1;
 40055a0:	953fffc4 	addi	r20,r18,-1
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
 40055a4:	9c000136 	bltu	r19,r16,40055ac <alt_up_pixel_buffer_dma_draw_box+0x98>
	{
		b_y = limit_y - 1;
 40055a8:	84ffffc4 	addi	r19,r16,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 40055ac:	e0800317 	ldw	r2,12(fp)
 40055b0:	10800058 	cmpnei	r2,r2,1
 40055b4:	1000031e 	bne	r2,zero,40055c4 <alt_up_pixel_buffer_dma_draw_box+0xb0>
		addr = pixel_buffer->back_buffer_start_address;
 40055b8:	e0bff417 	ldw	r2,-48(fp)
 40055bc:	14000c17 	ldw	r16,48(r2)
 40055c0:	00000206 	br	40055cc <alt_up_pixel_buffer_dma_draw_box+0xb8>
	else
		addr = pixel_buffer->buffer_start_address;
 40055c4:	e0bff417 	ldw	r2,-48(fp)
 40055c8:	14000b17 	ldw	r16,44(r2)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 40055cc:	e0bff417 	ldw	r2,-48(fp)
 40055d0:	10800d17 	ldw	r2,52(r2)
 40055d4:	10003c1e 	bne	r2,zero,40056c8 <alt_up_pixel_buffer_dma_draw_box+0x1b4>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 40055d8:	e0bff417 	ldw	r2,-48(fp)
 40055dc:	15401317 	ldw	r21,76(r2)
		addr = addr + (t_y << offset_y);
 40055e0:	8d44983a 	sll	r2,r17,r21
 40055e4:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 40055e8:	e0bff417 	ldw	r2,-48(fp)
 40055ec:	10800e17 	ldw	r2,56(r2)
 40055f0:	10800058 	cmpnei	r2,r2,1
 40055f4:	10000f1e 	bne	r2,zero,4005634 <alt_up_pixel_buffer_dma_draw_box+0x120>
			for (y = t_y; y <= b_y; y++)
 40055f8:	8825883a 	mov	r18,r17
 40055fc:	00000b06 	br	400562c <alt_up_pixel_buffer_dma_draw_box+0x118>
			{
				for (x = l_x; x <= r_x; x++)
 4005600:	b023883a 	mov	r17,r22
 4005604:	00000406 	br	4005618 <alt_up_pixel_buffer_dma_draw_box+0x104>
				{
					IOWR_8DIRECT(addr, x, local_color);
 4005608:	8c05883a 	add	r2,r17,r16
 400560c:	b807883a 	mov	r3,r23
 4005610:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 4005614:	8c400044 	addi	r17,r17,1
 4005618:	a47ffb2e 	bgeu	r20,r17,4005608 <__alt_data_end+0xfc005608>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
 400561c:	00800044 	movi	r2,1
 4005620:	1544983a 	sll	r2,r2,r21
 4005624:	80a1883a 	add	r16,r16,r2
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 4005628:	94800044 	addi	r18,r18,1
 400562c:	9cbff42e 	bgeu	r19,r18,4005600 <__alt_data_end+0xfc005600>
 4005630:	00006306 	br	40057c0 <alt_up_pixel_buffer_dma_draw_box+0x2ac>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 4005634:	e0bff417 	ldw	r2,-48(fp)
 4005638:	10800e17 	ldw	r2,56(r2)
 400563c:	10800098 	cmpnei	r2,r2,2
 4005640:	1000101e 	bne	r2,zero,4005684 <alt_up_pixel_buffer_dma_draw_box+0x170>
			for (y = t_y; y <= b_y; y++)
 4005644:	8825883a 	mov	r18,r17
 4005648:	00000c06 	br	400567c <alt_up_pixel_buffer_dma_draw_box+0x168>
			{
				for (x = l_x; x <= r_x; x++)
 400564c:	b023883a 	mov	r17,r22
 4005650:	00000506 	br	4005668 <alt_up_pixel_buffer_dma_draw_box+0x154>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
 4005654:	8c45883a 	add	r2,r17,r17
 4005658:	1405883a 	add	r2,r2,r16
 400565c:	b807883a 	mov	r3,r23
 4005660:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 4005664:	8c400044 	addi	r17,r17,1
 4005668:	a47ffa2e 	bgeu	r20,r17,4005654 <__alt_data_end+0xfc005654>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
 400566c:	00800044 	movi	r2,1
 4005670:	1544983a 	sll	r2,r2,r21
 4005674:	80a1883a 	add	r16,r16,r2
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 4005678:	94800044 	addi	r18,r18,1
 400567c:	9cbff32e 	bgeu	r19,r18,400564c <__alt_data_end+0xfc00564c>
 4005680:	00004f06 	br	40057c0 <alt_up_pixel_buffer_dma_draw_box+0x2ac>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 4005684:	8825883a 	mov	r18,r17
 4005688:	00000d06 	br	40056c0 <alt_up_pixel_buffer_dma_draw_box+0x1ac>
			{
				for (x = l_x; x <= r_x; x++)
 400568c:	b023883a 	mov	r17,r22
 4005690:	00000606 	br	40056ac <alt_up_pixel_buffer_dma_draw_box+0x198>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
 4005694:	8c45883a 	add	r2,r17,r17
 4005698:	1085883a 	add	r2,r2,r2
 400569c:	1405883a 	add	r2,r2,r16
 40056a0:	b807883a 	mov	r3,r23
 40056a4:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 40056a8:	8c400044 	addi	r17,r17,1
 40056ac:	a47ff92e 	bgeu	r20,r17,4005694 <__alt_data_end+0xfc005694>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
 40056b0:	00800044 	movi	r2,1
 40056b4:	1544983a 	sll	r2,r2,r21
 40056b8:	80a1883a 	add	r16,r16,r2
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 40056bc:	94800044 	addi	r18,r18,1
 40056c0:	9cbff22e 	bgeu	r19,r18,400568c <__alt_data_end+0xfc00568c>
 40056c4:	00003e06 	br	40057c0 <alt_up_pixel_buffer_dma_draw_box+0x2ac>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 40056c8:	e0bff417 	ldw	r2,-48(fp)
 40056cc:	10800e17 	ldw	r2,56(r2)
 40056d0:	10800058 	cmpnei	r2,r2,1
 40056d4:	10000f1e 	bne	r2,zero,4005714 <alt_up_pixel_buffer_dma_draw_box+0x200>
			addr = addr + t_y * limit_x;
 40056d8:	8c85383a 	mul	r2,r17,r18
 40056dc:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 40056e0:	882b883a 	mov	r21,r17
 40056e4:	00000906 	br	400570c <alt_up_pixel_buffer_dma_draw_box+0x1f8>
			{
				for (x = l_x; x <= r_x; x++)
 40056e8:	b023883a 	mov	r17,r22
 40056ec:	00000406 	br	4005700 <alt_up_pixel_buffer_dma_draw_box+0x1ec>
				{
					IOWR_8DIRECT(addr, x, local_color);
 40056f0:	8c05883a 	add	r2,r17,r16
 40056f4:	b807883a 	mov	r3,r23
 40056f8:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 40056fc:	8c400044 	addi	r17,r17,1
 4005700:	a47ffb2e 	bgeu	r20,r17,40056f0 <__alt_data_end+0xfc0056f0>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
 4005704:	84a1883a 	add	r16,r16,r18
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 4005708:	ad400044 	addi	r21,r21,1
 400570c:	9d7ff62e 	bgeu	r19,r21,40056e8 <__alt_data_end+0xfc0056e8>
 4005710:	00002b06 	br	40057c0 <alt_up_pixel_buffer_dma_draw_box+0x2ac>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 4005714:	e0bff417 	ldw	r2,-48(fp)
 4005718:	10800e17 	ldw	r2,56(r2)
 400571c:	10800098 	cmpnei	r2,r2,2
 4005720:	1000121e 	bne	r2,zero,400576c <alt_up_pixel_buffer_dma_draw_box+0x258>
			limit_x = limit_x << 1;
 4005724:	9485883a 	add	r2,r18,r18
 4005728:	1025883a 	mov	r18,r2
			addr = addr + t_y * limit_x;
 400572c:	8c85383a 	mul	r2,r17,r18
 4005730:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 4005734:	882b883a 	mov	r21,r17
 4005738:	00000a06 	br	4005764 <alt_up_pixel_buffer_dma_draw_box+0x250>
			{
				for (x = l_x; x <= r_x; x++)
 400573c:	b023883a 	mov	r17,r22
 4005740:	00000506 	br	4005758 <alt_up_pixel_buffer_dma_draw_box+0x244>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
 4005744:	8c45883a 	add	r2,r17,r17
 4005748:	1405883a 	add	r2,r2,r16
 400574c:	b807883a 	mov	r3,r23
 4005750:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 4005754:	8c400044 	addi	r17,r17,1
 4005758:	a47ffa2e 	bgeu	r20,r17,4005744 <__alt_data_end+0xfc005744>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
 400575c:	84a1883a 	add	r16,r16,r18
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 4005760:	ad400044 	addi	r21,r21,1
 4005764:	9d7ff52e 	bgeu	r19,r21,400573c <__alt_data_end+0xfc00573c>
 4005768:	00001506 	br	40057c0 <alt_up_pixel_buffer_dma_draw_box+0x2ac>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
 400576c:	9485883a 	add	r2,r18,r18
 4005770:	1085883a 	add	r2,r2,r2
 4005774:	1025883a 	mov	r18,r2
			addr = addr + t_y * limit_x;
 4005778:	8c85383a 	mul	r2,r17,r18
 400577c:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 4005780:	882b883a 	mov	r21,r17
 4005784:	00000b06 	br	40057b4 <alt_up_pixel_buffer_dma_draw_box+0x2a0>
			{
				for (x = l_x; x <= r_x; x++)
 4005788:	b023883a 	mov	r17,r22
 400578c:	00000606 	br	40057a8 <alt_up_pixel_buffer_dma_draw_box+0x294>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
 4005790:	8c45883a 	add	r2,r17,r17
 4005794:	1085883a 	add	r2,r2,r2
 4005798:	1405883a 	add	r2,r2,r16
 400579c:	b807883a 	mov	r3,r23
 40057a0:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 40057a4:	8c400044 	addi	r17,r17,1
 40057a8:	a47ff92e 	bgeu	r20,r17,4005790 <__alt_data_end+0xfc005790>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
 40057ac:	84a1883a 	add	r16,r16,r18
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 40057b0:	ad400044 	addi	r21,r21,1
 40057b4:	9d7ff42e 	bgeu	r19,r21,4005788 <__alt_data_end+0xfc005788>
 40057b8:	00000106 	br	40057c0 <alt_up_pixel_buffer_dma_draw_box+0x2ac>
		b_y = temp;
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 40057bc:	0001883a 	nop
				}
				addr = addr + limit_x;
			}
		}
	}
}
 40057c0:	e6fff804 	addi	sp,fp,-32
 40057c4:	df000817 	ldw	fp,32(sp)
 40057c8:	ddc00717 	ldw	r23,28(sp)
 40057cc:	dd800617 	ldw	r22,24(sp)
 40057d0:	dd400517 	ldw	r21,20(sp)
 40057d4:	dd000417 	ldw	r20,16(sp)
 40057d8:	dcc00317 	ldw	r19,12(sp)
 40057dc:	dc800217 	ldw	r18,8(sp)
 40057e0:	dc400117 	ldw	r17,4(sp)
 40057e4:	dc000017 	ldw	r16,0(sp)
 40057e8:	dec00904 	addi	sp,sp,36
 40057ec:	f800283a 	ret

040057f0 <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
 40057f0:	defff404 	addi	sp,sp,-48
 40057f4:	df000b15 	stw	fp,44(sp)
 40057f8:	dd800a15 	stw	r22,40(sp)
 40057fc:	dd400915 	stw	r21,36(sp)
 4005800:	dd000815 	stw	r20,32(sp)
 4005804:	dcc00715 	stw	r19,28(sp)
 4005808:	dc800615 	stw	r18,24(sp)
 400580c:	dc400515 	stw	r17,20(sp)
 4005810:	dc000415 	stw	r16,16(sp)
 4005814:	df000b04 	addi	fp,sp,44
 4005818:	e13ff515 	stw	r4,-44(fp)
 400581c:	e17ff615 	stw	r5,-40(fp)
 4005820:	e1bff715 	stw	r6,-36(fp)
 4005824:	e1fff815 	stw	r7,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 4005828:	e0bff517 	ldw	r2,-44(fp)
 400582c:	14800f17 	ldw	r18,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 4005830:	e0bff517 	ldw	r2,-44(fp)
 4005834:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int l_x = x0;
 4005838:	e47ff617 	ldw	r17,-40(fp)
	register unsigned int r_x = x1;
 400583c:	e4fff717 	ldw	r19,-36(fp)
	register unsigned int line_y = y;
 4005840:	e53ff817 	ldw	r20,-32(fp)
	register unsigned int local_color = color;
 4005844:	e5400117 	ldw	r21,4(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
 4005848:	9c40032e 	bgeu	r19,r17,4005858 <alt_up_pixel_buffer_dma_draw_hline+0x68>
	{
		temp = l_x;
 400584c:	882d883a 	mov	r22,r17
		l_x = r_x;
 4005850:	9823883a 	mov	r17,r19
		r_x = temp;
 4005854:	b027883a 	mov	r19,r22
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
 4005858:	8c805d2e 	bgeu	r17,r18,40059d0 <alt_up_pixel_buffer_dma_draw_hline+0x1e0>
 400585c:	a4005c2e 	bgeu	r20,r16,40059d0 <alt_up_pixel_buffer_dma_draw_hline+0x1e0>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
 4005860:	9c800136 	bltu	r19,r18,4005868 <alt_up_pixel_buffer_dma_draw_hline+0x78>
	{
		r_x = limit_x - 1;
 4005864:	94ffffc4 	addi	r19,r18,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 4005868:	e0800217 	ldw	r2,8(fp)
 400586c:	10800058 	cmpnei	r2,r2,1
 4005870:	1000031e 	bne	r2,zero,4005880 <alt_up_pixel_buffer_dma_draw_hline+0x90>
		addr = pixel_buffer->back_buffer_start_address;
 4005874:	e0bff517 	ldw	r2,-44(fp)
 4005878:	14000c17 	ldw	r16,48(r2)
 400587c:	00000206 	br	4005888 <alt_up_pixel_buffer_dma_draw_hline+0x98>
	else
		addr = pixel_buffer->buffer_start_address;
 4005880:	e0bff517 	ldw	r2,-44(fp)
 4005884:	14000b17 	ldw	r16,44(r2)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 4005888:	e0bff517 	ldw	r2,-44(fp)
 400588c:	10800d17 	ldw	r2,52(r2)
 4005890:	1000231e 	bne	r2,zero,4005920 <alt_up_pixel_buffer_dma_draw_hline+0x130>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 4005894:	e0bff517 	ldw	r2,-44(fp)
 4005898:	14801317 	ldw	r18,76(r2)
		addr = addr + (line_y << offset_y);
 400589c:	a484983a 	sll	r2,r20,r18
 40058a0:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 40058a4:	e0bff517 	ldw	r2,-44(fp)
 40058a8:	10800e17 	ldw	r2,56(r2)
 40058ac:	10800058 	cmpnei	r2,r2,1
 40058b0:	1000071e 	bne	r2,zero,40058d0 <alt_up_pixel_buffer_dma_draw_hline+0xe0>
			for (x = l_x; x <= r_x; x++)
 40058b4:	00000406 	br	40058c8 <alt_up_pixel_buffer_dma_draw_hline+0xd8>
			{
				IOWR_8DIRECT(addr, x, local_color);
 40058b8:	8c05883a 	add	r2,r17,r16
 40058bc:	a807883a 	mov	r3,r21
 40058c0:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
 40058c4:	8c400044 	addi	r17,r17,1
 40058c8:	9c7ffb2e 	bgeu	r19,r17,40058b8 <__alt_data_end+0xfc0058b8>
 40058cc:	00004106 	br	40059d4 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 40058d0:	e0bff517 	ldw	r2,-44(fp)
 40058d4:	10800e17 	ldw	r2,56(r2)
 40058d8:	10800098 	cmpnei	r2,r2,2
 40058dc:	10000e1e 	bne	r2,zero,4005918 <alt_up_pixel_buffer_dma_draw_hline+0x128>
			for (x = l_x; x <= r_x; x++)
 40058e0:	00000506 	br	40058f8 <alt_up_pixel_buffer_dma_draw_hline+0x108>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
 40058e4:	8c45883a 	add	r2,r17,r17
 40058e8:	1405883a 	add	r2,r2,r16
 40058ec:	a807883a 	mov	r3,r21
 40058f0:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
 40058f4:	8c400044 	addi	r17,r17,1
 40058f8:	9c7ffa2e 	bgeu	r19,r17,40058e4 <__alt_data_end+0xfc0058e4>
 40058fc:	00003506 	br	40059d4 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
 4005900:	8c45883a 	add	r2,r17,r17
 4005904:	1085883a 	add	r2,r2,r2
 4005908:	1405883a 	add	r2,r2,r16
 400590c:	a807883a 	mov	r3,r21
 4005910:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
 4005914:	8c400044 	addi	r17,r17,1
 4005918:	9c7ff92e 	bgeu	r19,r17,4005900 <__alt_data_end+0xfc005900>
 400591c:	00002d06 	br	40059d4 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 4005920:	e0bff517 	ldw	r2,-44(fp)
 4005924:	10800e17 	ldw	r2,56(r2)
 4005928:	10800058 	cmpnei	r2,r2,1
 400592c:	1000091e 	bne	r2,zero,4005954 <alt_up_pixel_buffer_dma_draw_hline+0x164>
			addr = addr + line_y * limit_x;
 4005930:	a485383a 	mul	r2,r20,r18
 4005934:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
 4005938:	00000406 	br	400594c <alt_up_pixel_buffer_dma_draw_hline+0x15c>
			{
				IOWR_8DIRECT(addr, x, local_color);
 400593c:	8c05883a 	add	r2,r17,r16
 4005940:	a807883a 	mov	r3,r21
 4005944:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 4005948:	8c400044 	addi	r17,r17,1
 400594c:	9c7ffb2e 	bgeu	r19,r17,400593c <__alt_data_end+0xfc00593c>
 4005950:	00002006 	br	40059d4 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 4005954:	e0bff517 	ldw	r2,-44(fp)
 4005958:	10800e17 	ldw	r2,56(r2)
 400595c:	10800098 	cmpnei	r2,r2,2
 4005960:	10000c1e 	bne	r2,zero,4005994 <alt_up_pixel_buffer_dma_draw_hline+0x1a4>
			limit_x = limit_x << 1;
 4005964:	9485883a 	add	r2,r18,r18
 4005968:	1025883a 	mov	r18,r2
			addr = addr + line_y * limit_x;
 400596c:	a485383a 	mul	r2,r20,r18
 4005970:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
 4005974:	00000506 	br	400598c <alt_up_pixel_buffer_dma_draw_hline+0x19c>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
 4005978:	8c45883a 	add	r2,r17,r17
 400597c:	1405883a 	add	r2,r2,r16
 4005980:	a807883a 	mov	r3,r21
 4005984:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 4005988:	8c400044 	addi	r17,r17,1
 400598c:	9c7ffa2e 	bgeu	r19,r17,4005978 <__alt_data_end+0xfc005978>
 4005990:	00001006 	br	40059d4 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
 4005994:	9485883a 	add	r2,r18,r18
 4005998:	1085883a 	add	r2,r2,r2
 400599c:	1025883a 	mov	r18,r2
			addr = addr + line_y * limit_x;
 40059a0:	a485383a 	mul	r2,r20,r18
 40059a4:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
 40059a8:	00000606 	br	40059c4 <alt_up_pixel_buffer_dma_draw_hline+0x1d4>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
 40059ac:	8c45883a 	add	r2,r17,r17
 40059b0:	1085883a 	add	r2,r2,r2
 40059b4:	1405883a 	add	r2,r2,r16
 40059b8:	a807883a 	mov	r3,r21
 40059bc:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 40059c0:	8c400044 	addi	r17,r17,1
 40059c4:	9c7ff92e 	bgeu	r19,r17,40059ac <__alt_data_end+0xfc0059ac>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
 40059c8:	84a1883a 	add	r16,r16,r18
 40059cc:	00000106 	br	40059d4 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
		r_x = temp;
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 40059d0:	0001883a 	nop
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
 40059d4:	e6fff904 	addi	sp,fp,-28
 40059d8:	df000717 	ldw	fp,28(sp)
 40059dc:	dd800617 	ldw	r22,24(sp)
 40059e0:	dd400517 	ldw	r21,20(sp)
 40059e4:	dd000417 	ldw	r20,16(sp)
 40059e8:	dcc00317 	ldw	r19,12(sp)
 40059ec:	dc800217 	ldw	r18,8(sp)
 40059f0:	dc400117 	ldw	r17,4(sp)
 40059f4:	dc000017 	ldw	r16,0(sp)
 40059f8:	dec00804 	addi	sp,sp,32
 40059fc:	f800283a 	ret

04005a00 <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
 4005a00:	defff404 	addi	sp,sp,-48
 4005a04:	df000b15 	stw	fp,44(sp)
 4005a08:	dd800a15 	stw	r22,40(sp)
 4005a0c:	dd400915 	stw	r21,36(sp)
 4005a10:	dd000815 	stw	r20,32(sp)
 4005a14:	dcc00715 	stw	r19,28(sp)
 4005a18:	dc800615 	stw	r18,24(sp)
 4005a1c:	dc400515 	stw	r17,20(sp)
 4005a20:	dc000415 	stw	r16,16(sp)
 4005a24:	df000b04 	addi	fp,sp,44
 4005a28:	e13ff515 	stw	r4,-44(fp)
 4005a2c:	e17ff615 	stw	r5,-40(fp)
 4005a30:	e1bff715 	stw	r6,-36(fp)
 4005a34:	e1fff815 	stw	r7,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 4005a38:	e0bff517 	ldw	r2,-44(fp)
 4005a3c:	14400f17 	ldw	r17,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 4005a40:	e0bff517 	ldw	r2,-44(fp)
 4005a44:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int line_x = x;
 4005a48:	e4bff617 	ldw	r18,-40(fp)
	register unsigned int t_y = y0;
 4005a4c:	e53ff717 	ldw	r20,-36(fp)
	register unsigned int b_y = y1;
 4005a50:	e4fff817 	ldw	r19,-32(fp)
	register unsigned int local_color = color;
 4005a54:	e5800117 	ldw	r22,4(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
 4005a58:	9d00032e 	bgeu	r19,r20,4005a68 <alt_up_pixel_buffer_dma_draw_vline+0x68>
	{
		temp = t_y;
 4005a5c:	a02b883a 	mov	r21,r20
		t_y = b_y;
 4005a60:	9829883a 	mov	r20,r19
		b_y = temp;
 4005a64:	a827883a 	mov	r19,r21
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
 4005a68:	94406c2e 	bgeu	r18,r17,4005c1c <alt_up_pixel_buffer_dma_draw_vline+0x21c>
 4005a6c:	a4006b2e 	bgeu	r20,r16,4005c1c <alt_up_pixel_buffer_dma_draw_vline+0x21c>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
 4005a70:	9c000136 	bltu	r19,r16,4005a78 <alt_up_pixel_buffer_dma_draw_vline+0x78>
	{
		b_y = limit_y - 1;
 4005a74:	84ffffc4 	addi	r19,r16,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 4005a78:	e0800217 	ldw	r2,8(fp)
 4005a7c:	10800058 	cmpnei	r2,r2,1
 4005a80:	1000031e 	bne	r2,zero,4005a90 <alt_up_pixel_buffer_dma_draw_vline+0x90>
		addr = pixel_buffer->back_buffer_start_address;
 4005a84:	e0bff517 	ldw	r2,-44(fp)
 4005a88:	14000c17 	ldw	r16,48(r2)
 4005a8c:	00000206 	br	4005a98 <alt_up_pixel_buffer_dma_draw_vline+0x98>
	else
		addr = pixel_buffer->buffer_start_address;
 4005a90:	e0bff517 	ldw	r2,-44(fp)
 4005a94:	14000b17 	ldw	r16,44(r2)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 4005a98:	e0bff517 	ldw	r2,-44(fp)
 4005a9c:	10800d17 	ldw	r2,52(r2)
 4005aa0:	1000301e 	bne	r2,zero,4005b64 <alt_up_pixel_buffer_dma_draw_vline+0x164>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 4005aa4:	e0bff517 	ldw	r2,-44(fp)
 4005aa8:	15401317 	ldw	r21,76(r2)
		addr = addr + (t_y << offset_y);
 4005aac:	a544983a 	sll	r2,r20,r21
 4005ab0:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 4005ab4:	e0bff517 	ldw	r2,-44(fp)
 4005ab8:	10800e17 	ldw	r2,56(r2)
 4005abc:	10800058 	cmpnei	r2,r2,1
 4005ac0:	10000b1e 	bne	r2,zero,4005af0 <alt_up_pixel_buffer_dma_draw_vline+0xf0>
			for (y = t_y; y <= b_y; y++)
 4005ac4:	a023883a 	mov	r17,r20
 4005ac8:	00000706 	br	4005ae8 <alt_up_pixel_buffer_dma_draw_vline+0xe8>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
 4005acc:	9405883a 	add	r2,r18,r16
 4005ad0:	b007883a 	mov	r3,r22
 4005ad4:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
 4005ad8:	00800044 	movi	r2,1
 4005adc:	1544983a 	sll	r2,r2,r21
 4005ae0:	80a1883a 	add	r16,r16,r2
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 4005ae4:	8c400044 	addi	r17,r17,1
 4005ae8:	9c7ff82e 	bgeu	r19,r17,4005acc <__alt_data_end+0xfc005acc>
 4005aec:	00004c06 	br	4005c20 <alt_up_pixel_buffer_dma_draw_vline+0x220>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 4005af0:	e0bff517 	ldw	r2,-44(fp)
 4005af4:	10800e17 	ldw	r2,56(r2)
 4005af8:	10800098 	cmpnei	r2,r2,2
 4005afc:	10000c1e 	bne	r2,zero,4005b30 <alt_up_pixel_buffer_dma_draw_vline+0x130>
			for (y = t_y; y <= b_y; y++)
 4005b00:	a023883a 	mov	r17,r20
 4005b04:	00000806 	br	4005b28 <alt_up_pixel_buffer_dma_draw_vline+0x128>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
 4005b08:	9485883a 	add	r2,r18,r18
 4005b0c:	1405883a 	add	r2,r2,r16
 4005b10:	b007883a 	mov	r3,r22
 4005b14:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
 4005b18:	00800044 	movi	r2,1
 4005b1c:	1544983a 	sll	r2,r2,r21
 4005b20:	80a1883a 	add	r16,r16,r2
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 4005b24:	8c400044 	addi	r17,r17,1
 4005b28:	9c7ff72e 	bgeu	r19,r17,4005b08 <__alt_data_end+0xfc005b08>
 4005b2c:	00003c06 	br	4005c20 <alt_up_pixel_buffer_dma_draw_vline+0x220>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 4005b30:	a023883a 	mov	r17,r20
 4005b34:	00000906 	br	4005b5c <alt_up_pixel_buffer_dma_draw_vline+0x15c>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
 4005b38:	9485883a 	add	r2,r18,r18
 4005b3c:	1085883a 	add	r2,r2,r2
 4005b40:	1405883a 	add	r2,r2,r16
 4005b44:	b007883a 	mov	r3,r22
 4005b48:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
 4005b4c:	00800044 	movi	r2,1
 4005b50:	1544983a 	sll	r2,r2,r21
 4005b54:	80a1883a 	add	r16,r16,r2
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 4005b58:	8c400044 	addi	r17,r17,1
 4005b5c:	9c7ff62e 	bgeu	r19,r17,4005b38 <__alt_data_end+0xfc005b38>
 4005b60:	00002f06 	br	4005c20 <alt_up_pixel_buffer_dma_draw_vline+0x220>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 4005b64:	e0bff517 	ldw	r2,-44(fp)
 4005b68:	10800e17 	ldw	r2,56(r2)
 4005b6c:	10800058 	cmpnei	r2,r2,1
 4005b70:	10000a1e 	bne	r2,zero,4005b9c <alt_up_pixel_buffer_dma_draw_vline+0x19c>
			addr = addr + t_y * limit_x;
 4005b74:	a445383a 	mul	r2,r20,r17
 4005b78:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 4005b7c:	00000506 	br	4005b94 <alt_up_pixel_buffer_dma_draw_vline+0x194>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
 4005b80:	9405883a 	add	r2,r18,r16
 4005b84:	b007883a 	mov	r3,r22
 4005b88:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
 4005b8c:	8461883a 	add	r16,r16,r17
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 4005b90:	a5000044 	addi	r20,r20,1
 4005b94:	9d3ffa2e 	bgeu	r19,r20,4005b80 <__alt_data_end+0xfc005b80>
 4005b98:	00002106 	br	4005c20 <alt_up_pixel_buffer_dma_draw_vline+0x220>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 4005b9c:	e0bff517 	ldw	r2,-44(fp)
 4005ba0:	10800e17 	ldw	r2,56(r2)
 4005ba4:	10800098 	cmpnei	r2,r2,2
 4005ba8:	10000d1e 	bne	r2,zero,4005be0 <alt_up_pixel_buffer_dma_draw_vline+0x1e0>
			limit_x = limit_x << 1;
 4005bac:	8c45883a 	add	r2,r17,r17
 4005bb0:	1023883a 	mov	r17,r2
			addr = addr + t_y * limit_x;
 4005bb4:	a445383a 	mul	r2,r20,r17
 4005bb8:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 4005bbc:	00000606 	br	4005bd8 <alt_up_pixel_buffer_dma_draw_vline+0x1d8>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
 4005bc0:	9485883a 	add	r2,r18,r18
 4005bc4:	1405883a 	add	r2,r2,r16
 4005bc8:	b007883a 	mov	r3,r22
 4005bcc:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
 4005bd0:	8461883a 	add	r16,r16,r17
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 4005bd4:	a5000044 	addi	r20,r20,1
 4005bd8:	9d3ff92e 	bgeu	r19,r20,4005bc0 <__alt_data_end+0xfc005bc0>
 4005bdc:	00001006 	br	4005c20 <alt_up_pixel_buffer_dma_draw_vline+0x220>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
 4005be0:	8c45883a 	add	r2,r17,r17
 4005be4:	1085883a 	add	r2,r2,r2
 4005be8:	1023883a 	mov	r17,r2
			addr = addr + t_y * limit_x;
 4005bec:	a445383a 	mul	r2,r20,r17
 4005bf0:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 4005bf4:	00000706 	br	4005c14 <alt_up_pixel_buffer_dma_draw_vline+0x214>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
 4005bf8:	9485883a 	add	r2,r18,r18
 4005bfc:	1085883a 	add	r2,r2,r2
 4005c00:	1405883a 	add	r2,r2,r16
 4005c04:	b007883a 	mov	r3,r22
 4005c08:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
 4005c0c:	8461883a 	add	r16,r16,r17
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 4005c10:	a5000044 	addi	r20,r20,1
 4005c14:	9d3ff82e 	bgeu	r19,r20,4005bf8 <__alt_data_end+0xfc005bf8>
 4005c18:	00000106 	br	4005c20 <alt_up_pixel_buffer_dma_draw_vline+0x220>
		b_y = temp;
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 4005c1c:	0001883a 	nop
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
 4005c20:	e6fff904 	addi	sp,fp,-28
 4005c24:	df000717 	ldw	fp,28(sp)
 4005c28:	dd800617 	ldw	r22,24(sp)
 4005c2c:	dd400517 	ldw	r21,20(sp)
 4005c30:	dd000417 	ldw	r20,16(sp)
 4005c34:	dcc00317 	ldw	r19,12(sp)
 4005c38:	dc800217 	ldw	r18,8(sp)
 4005c3c:	dc400117 	ldw	r17,4(sp)
 4005c40:	dc000017 	ldw	r16,0(sp)
 4005c44:	dec00804 	addi	sp,sp,32
 4005c48:	f800283a 	ret

04005c4c <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
 4005c4c:	defff804 	addi	sp,sp,-32
 4005c50:	dfc00715 	stw	ra,28(sp)
 4005c54:	df000615 	stw	fp,24(sp)
 4005c58:	df000604 	addi	fp,sp,24
 4005c5c:	e13ffc15 	stw	r4,-16(fp)
 4005c60:	e17ffd15 	stw	r5,-12(fp)
 4005c64:	e1bffe15 	stw	r6,-8(fp)
 4005c68:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
 4005c6c:	e0800417 	ldw	r2,16(fp)
 4005c70:	d8800115 	stw	r2,4(sp)
 4005c74:	e0800317 	ldw	r2,12(fp)
 4005c78:	d8800015 	stw	r2,0(sp)
 4005c7c:	e1fffe17 	ldw	r7,-8(fp)
 4005c80:	e1bfff17 	ldw	r6,-4(fp)
 4005c84:	e17ffd17 	ldw	r5,-12(fp)
 4005c88:	e13ffc17 	ldw	r4,-16(fp)
 4005c8c:	40057f00 	call	40057f0 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
 4005c90:	e0800417 	ldw	r2,16(fp)
 4005c94:	d8800115 	stw	r2,4(sp)
 4005c98:	e0800317 	ldw	r2,12(fp)
 4005c9c:	d8800015 	stw	r2,0(sp)
 4005ca0:	e1c00217 	ldw	r7,8(fp)
 4005ca4:	e1bfff17 	ldw	r6,-4(fp)
 4005ca8:	e17ffd17 	ldw	r5,-12(fp)
 4005cac:	e13ffc17 	ldw	r4,-16(fp)
 4005cb0:	40057f00 	call	40057f0 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
 4005cb4:	e0800417 	ldw	r2,16(fp)
 4005cb8:	d8800115 	stw	r2,4(sp)
 4005cbc:	e0800317 	ldw	r2,12(fp)
 4005cc0:	d8800015 	stw	r2,0(sp)
 4005cc4:	e1c00217 	ldw	r7,8(fp)
 4005cc8:	e1bffe17 	ldw	r6,-8(fp)
 4005ccc:	e17ffd17 	ldw	r5,-12(fp)
 4005cd0:	e13ffc17 	ldw	r4,-16(fp)
 4005cd4:	4005a000 	call	4005a00 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
 4005cd8:	e0800417 	ldw	r2,16(fp)
 4005cdc:	d8800115 	stw	r2,4(sp)
 4005ce0:	e0800317 	ldw	r2,12(fp)
 4005ce4:	d8800015 	stw	r2,0(sp)
 4005ce8:	e1c00217 	ldw	r7,8(fp)
 4005cec:	e1bffe17 	ldw	r6,-8(fp)
 4005cf0:	e17fff17 	ldw	r5,-4(fp)
 4005cf4:	e13ffc17 	ldw	r4,-16(fp)
 4005cf8:	4005a000 	call	4005a00 <alt_up_pixel_buffer_dma_draw_vline>
}
 4005cfc:	0001883a 	nop
 4005d00:	e037883a 	mov	sp,fp
 4005d04:	dfc00117 	ldw	ra,4(sp)
 4005d08:	df000017 	ldw	fp,0(sp)
 4005d0c:	dec00204 	addi	sp,sp,8
 4005d10:	f800283a 	ret

04005d14 <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
 4005d14:	deffff04 	addi	sp,sp,-4
 4005d18:	df000015 	stw	fp,0(sp)
 4005d1c:	d839883a 	mov	fp,sp
 4005d20:	2005883a 	mov	r2,r4
 4005d24:	3007883a 	mov	r3,r6
 4005d28:	3809883a 	mov	r4,r7
 4005d2c:	e1800117 	ldw	r6,4(fp)
 4005d30:	e1c00217 	ldw	r7,8(fp)
	if (mode == 0)
 4005d34:	3800051e 	bne	r7,zero,4005d4c <helper_plot_pixel+0x38>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
 4005d38:	2909383a 	mul	r4,r5,r4
 4005d3c:	20c7883a 	add	r3,r4,r3
 4005d40:	1885883a 	add	r2,r3,r2
 4005d44:	11800025 	stbio	r6,0(r2)
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
}
 4005d48:	00000e06 	br	4005d84 <helper_plot_pixel+0x70>
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
 4005d4c:	39c00058 	cmpnei	r7,r7,1
 4005d50:	3800061e 	bne	r7,zero,4005d6c <helper_plot_pixel+0x58>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
 4005d54:	2909383a 	mul	r4,r5,r4
 4005d58:	20c7883a 	add	r3,r4,r3
 4005d5c:	18c7883a 	add	r3,r3,r3
 4005d60:	1885883a 	add	r2,r3,r2
 4005d64:	1180002d 	sthio	r6,0(r2)
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
}
 4005d68:	00000606 	br	4005d84 <helper_plot_pixel+0x70>
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
 4005d6c:	2909383a 	mul	r4,r5,r4
 4005d70:	20c7883a 	add	r3,r4,r3
 4005d74:	18c7883a 	add	r3,r3,r3
 4005d78:	18c7883a 	add	r3,r3,r3
 4005d7c:	1885883a 	add	r2,r3,r2
 4005d80:	11800035 	stwio	r6,0(r2)
}
 4005d84:	0001883a 	nop
 4005d88:	e037883a 	mov	sp,fp
 4005d8c:	df000017 	ldw	fp,0(sp)
 4005d90:	dec00104 	addi	sp,sp,4
 4005d94:	f800283a 	ret

04005d98 <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
 4005d98:	deffeb04 	addi	sp,sp,-84
 4005d9c:	dfc01415 	stw	ra,80(sp)
 4005da0:	df001315 	stw	fp,76(sp)
 4005da4:	ddc01215 	stw	r23,72(sp)
 4005da8:	dd801115 	stw	r22,68(sp)
 4005dac:	dd401015 	stw	r21,64(sp)
 4005db0:	dd000f15 	stw	r20,60(sp)
 4005db4:	dcc00e15 	stw	r19,56(sp)
 4005db8:	dc800d15 	stw	r18,52(sp)
 4005dbc:	dc400c15 	stw	r17,48(sp)
 4005dc0:	dc000b15 	stw	r16,44(sp)
 4005dc4:	df001304 	addi	fp,sp,76
 4005dc8:	e13fef15 	stw	r4,-68(fp)
 4005dcc:	e17ff015 	stw	r5,-64(fp)
 4005dd0:	e1bff115 	stw	r6,-60(fp)
 4005dd4:	e1fff215 	stw	r7,-56(fp)
	register int x_0 = x0;
 4005dd8:	e47ff017 	ldw	r17,-64(fp)
	register int y_0 = y0;
 4005ddc:	e4fff117 	ldw	r19,-60(fp)
	register int x_1 = x1;
 4005de0:	e4bff217 	ldw	r18,-56(fp)
	register int y_1 = y1;
 4005de4:	e5000217 	ldw	r20,8(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
 4005de8:	a4c5c83a 	sub	r2,r20,r19
 4005dec:	1000010e 	bge	r2,zero,4005df4 <alt_up_pixel_buffer_dma_draw_line+0x5c>
 4005df0:	0085c83a 	sub	r2,zero,r2
 4005df4:	1007883a 	mov	r3,r2
 4005df8:	9445c83a 	sub	r2,r18,r17
 4005dfc:	1000010e 	bge	r2,zero,4005e04 <alt_up_pixel_buffer_dma_draw_line+0x6c>
 4005e00:	0085c83a 	sub	r2,zero,r2
 4005e04:	10c4803a 	cmplt	r2,r2,r3
 4005e08:	e0bff305 	stb	r2,-52(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
 4005e0c:	e0bfef17 	ldw	r2,-68(fp)
 4005e10:	10800e17 	ldw	r2,56(r2)
 4005e14:	10800060 	cmpeqi	r2,r2,1
 4005e18:	1000081e 	bne	r2,zero,4005e3c <alt_up_pixel_buffer_dma_draw_line+0xa4>
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
 4005e1c:	e0bfef17 	ldw	r2,-68(fp)
 4005e20:	10800e17 	ldw	r2,56(r2)
 4005e24:	10800098 	cmpnei	r2,r2,2
 4005e28:	1000021e 	bne	r2,zero,4005e34 <alt_up_pixel_buffer_dma_draw_line+0x9c>
 4005e2c:	00800044 	movi	r2,1
 4005e30:	00000306 	br	4005e40 <alt_up_pixel_buffer_dma_draw_line+0xa8>
 4005e34:	00800084 	movi	r2,2
 4005e38:	00000106 	br	4005e40 <alt_up_pixel_buffer_dma_draw_line+0xa8>
	register int y_0 = y0;
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
 4005e3c:	0005883a 	mov	r2,zero
 4005e40:	e0bff415 	stw	r2,-48(fp)
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
	register int line_color = color;
 4005e44:	e0800317 	ldw	r2,12(fp)
 4005e48:	e0bff515 	stw	r2,-44(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
 4005e4c:	e0bfef17 	ldw	r2,-68(fp)
 4005e50:	10800d17 	ldw	r2,52(r2)
 4005e54:	1000071e 	bne	r2,zero,4005e74 <alt_up_pixel_buffer_dma_draw_line+0xdc>
 4005e58:	e0bfef17 	ldw	r2,-68(fp)
 4005e5c:	10801317 	ldw	r2,76(r2)
 4005e60:	e0fff417 	ldw	r3,-48(fp)
 4005e64:	10c5c83a 	sub	r2,r2,r3
 4005e68:	00c00044 	movi	r3,1
 4005e6c:	1884983a 	sll	r2,r3,r2
 4005e70:	00000206 	br	4005e7c <alt_up_pixel_buffer_dma_draw_line+0xe4>
 4005e74:	e0bfef17 	ldw	r2,-68(fp)
 4005e78:	10800f17 	ldw	r2,60(r2)
 4005e7c:	e0bff615 	stw	r2,-40(fp)

	if (backbuffer == 1)
 4005e80:	e0800417 	ldw	r2,16(fp)
 4005e84:	10800058 	cmpnei	r2,r2,1
 4005e88:	1000031e 	bne	r2,zero,4005e98 <alt_up_pixel_buffer_dma_draw_line+0x100>
		buffer_start = pixel_buffer->back_buffer_start_address;
 4005e8c:	e0bfef17 	ldw	r2,-68(fp)
 4005e90:	15c00c17 	ldw	r23,48(r2)
 4005e94:	00000206 	br	4005ea0 <alt_up_pixel_buffer_dma_draw_line+0x108>
	else
		buffer_start = pixel_buffer->buffer_start_address;
 4005e98:	e0bfef17 	ldw	r2,-68(fp)
 4005e9c:	15c00b17 	ldw	r23,44(r2)

	/* Preprocessing inputs */
	if (steep > 0) {
 4005ea0:	e0bff307 	ldb	r2,-52(fp)
 4005ea4:	0080060e 	bge	zero,r2,4005ec0 <alt_up_pixel_buffer_dma_draw_line+0x128>
		// Swap x_0 and y_0
		error = x_0;
 4005ea8:	8821883a 	mov	r16,r17
		x_0 = y_0;
 4005eac:	9823883a 	mov	r17,r19
		y_0 = error;
 4005eb0:	8027883a 	mov	r19,r16
		// Swap x_1 and y_1
		error = x_1;
 4005eb4:	9021883a 	mov	r16,r18
		x_1 = y_1;
 4005eb8:	a025883a 	mov	r18,r20
		y_1 = error;
 4005ebc:	8029883a 	mov	r20,r16
	}
	if (x_0 > x_1) {
 4005ec0:	9440060e 	bge	r18,r17,4005edc <alt_up_pixel_buffer_dma_draw_line+0x144>
		// Swap x_0 and x_1
		error = x_0;
 4005ec4:	8821883a 	mov	r16,r17
		x_0 = x_1;
 4005ec8:	9023883a 	mov	r17,r18
		x_1 = error;
 4005ecc:	8025883a 	mov	r18,r16
		// Swap y_0 and y_1
		error = y_0;
 4005ed0:	9821883a 	mov	r16,r19
		y_0 = y_1;
 4005ed4:	a027883a 	mov	r19,r20
		y_1 = error;
 4005ed8:	8029883a 	mov	r20,r16
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
 4005edc:	946bc83a 	sub	r21,r18,r17
	deltay = ABS(y_1 - y_0);
 4005ee0:	a4c5c83a 	sub	r2,r20,r19
 4005ee4:	1000010e 	bge	r2,zero,4005eec <alt_up_pixel_buffer_dma_draw_line+0x154>
 4005ee8:	0085c83a 	sub	r2,zero,r2
 4005eec:	e0bff715 	stw	r2,-36(fp)
	error = -(deltax / 2); 
 4005ef0:	a804d7fa 	srli	r2,r21,31
 4005ef4:	1545883a 	add	r2,r2,r21
 4005ef8:	1005d07a 	srai	r2,r2,1
 4005efc:	00a1c83a 	sub	r16,zero,r2
	y = y_0;
 4005f00:	982d883a 	mov	r22,r19
	if (y_0 < y_1)
 4005f04:	9d00020e 	bge	r19,r20,4005f10 <alt_up_pixel_buffer_dma_draw_line+0x178>
		ystep = 1;
 4005f08:	04c00044 	movi	r19,1
 4005f0c:	00000106 	br	4005f14 <alt_up_pixel_buffer_dma_draw_line+0x17c>
	else
		ystep = -1;
 4005f10:	04ffffc4 	movi	r19,-1

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
 4005f14:	e0bff307 	ldb	r2,-52(fp)
 4005f18:	10800058 	cmpnei	r2,r2,1
 4005f1c:	1000211e 	bne	r2,zero,4005fa4 <alt_up_pixel_buffer_dma_draw_line+0x20c>
	{
		for (x=x_0; x <= x_1; x++) {
 4005f20:	00000f06 	br	4005f60 <alt_up_pixel_buffer_dma_draw_line+0x1c8>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
 4005f24:	e0bff417 	ldw	r2,-48(fp)
 4005f28:	d8800115 	stw	r2,4(sp)
 4005f2c:	e0bff517 	ldw	r2,-44(fp)
 4005f30:	d8800015 	stw	r2,0(sp)
 4005f34:	880f883a 	mov	r7,r17
 4005f38:	b00d883a 	mov	r6,r22
 4005f3c:	e17ff617 	ldw	r5,-40(fp)
 4005f40:	b809883a 	mov	r4,r23
 4005f44:	4005d140 	call	4005d14 <helper_plot_pixel>
			error = error + deltay;
 4005f48:	e0bff717 	ldw	r2,-36(fp)
 4005f4c:	80a1883a 	add	r16,r16,r2
			if (error > 0) {
 4005f50:	0400020e 	bge	zero,r16,4005f5c <alt_up_pixel_buffer_dma_draw_line+0x1c4>
				y = y + ystep;
 4005f54:	b4ed883a 	add	r22,r22,r19
				error = error - deltax;
 4005f58:	8561c83a 	sub	r16,r16,r21

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
 4005f5c:	8c400044 	addi	r17,r17,1
 4005f60:	947ff00e 	bge	r18,r17,4005f24 <__alt_data_end+0xfc005f24>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
 4005f64:	00001006 	br	4005fa8 <alt_up_pixel_buffer_dma_draw_line+0x210>
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
 4005f68:	e0bff417 	ldw	r2,-48(fp)
 4005f6c:	d8800115 	stw	r2,4(sp)
 4005f70:	e0bff517 	ldw	r2,-44(fp)
 4005f74:	d8800015 	stw	r2,0(sp)
 4005f78:	b00f883a 	mov	r7,r22
 4005f7c:	880d883a 	mov	r6,r17
 4005f80:	e17ff617 	ldw	r5,-40(fp)
 4005f84:	b809883a 	mov	r4,r23
 4005f88:	4005d140 	call	4005d14 <helper_plot_pixel>
			error = error + deltay;
 4005f8c:	e0bff717 	ldw	r2,-36(fp)
 4005f90:	80a1883a 	add	r16,r16,r2
			if (error > 0) {
 4005f94:	0400020e 	bge	zero,r16,4005fa0 <alt_up_pixel_buffer_dma_draw_line+0x208>
				y = y + ystep;
 4005f98:	b4ed883a 	add	r22,r22,r19
				error = error - deltax;
 4005f9c:	8561c83a 	sub	r16,r16,r21
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
 4005fa0:	8c400044 	addi	r17,r17,1
 4005fa4:	947ff00e 	bge	r18,r17,4005f68 <__alt_data_end+0xfc005f68>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
 4005fa8:	0001883a 	nop
 4005fac:	e6fff804 	addi	sp,fp,-32
 4005fb0:	dfc00917 	ldw	ra,36(sp)
 4005fb4:	df000817 	ldw	fp,32(sp)
 4005fb8:	ddc00717 	ldw	r23,28(sp)
 4005fbc:	dd800617 	ldw	r22,24(sp)
 4005fc0:	dd400517 	ldw	r21,20(sp)
 4005fc4:	dd000417 	ldw	r20,16(sp)
 4005fc8:	dcc00317 	ldw	r19,12(sp)
 4005fcc:	dc800217 	ldw	r18,8(sp)
 4005fd0:	dc400117 	ldw	r17,4(sp)
 4005fd4:	dc000017 	ldw	r16,0(sp)
 4005fd8:	dec00a04 	addi	sp,sp,40
 4005fdc:	f800283a 	ret

04005fe0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 4005fe0:	defff504 	addi	sp,sp,-44
 4005fe4:	df000a15 	stw	fp,40(sp)
 4005fe8:	df000a04 	addi	fp,sp,40
 4005fec:	e13ffc15 	stw	r4,-16(fp)
 4005ff0:	e17ffd15 	stw	r5,-12(fp)
 4005ff4:	e1bffe15 	stw	r6,-8(fp)
 4005ff8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 4005ffc:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4006000:	d0a6f417 	ldw	r2,-25648(gp)
  
  if (alt_ticks_per_second ())
 4006004:	10003c26 	beq	r2,zero,40060f8 <alt_alarm_start+0x118>
  {
    if (alarm)
 4006008:	e0bffc17 	ldw	r2,-16(fp)
 400600c:	10003826 	beq	r2,zero,40060f0 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 4006010:	e0bffc17 	ldw	r2,-16(fp)
 4006014:	e0fffe17 	ldw	r3,-8(fp)
 4006018:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 400601c:	e0bffc17 	ldw	r2,-16(fp)
 4006020:	e0ffff17 	ldw	r3,-4(fp)
 4006024:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4006028:	0005303a 	rdctl	r2,status
 400602c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4006030:	e0fff917 	ldw	r3,-28(fp)
 4006034:	00bfff84 	movi	r2,-2
 4006038:	1884703a 	and	r2,r3,r2
 400603c:	1001703a 	wrctl	status,r2
  
  return context;
 4006040:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 4006044:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 4006048:	d0a6f517 	ldw	r2,-25644(gp)
      
      current_nticks = alt_nticks();
 400604c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 4006050:	e0fffd17 	ldw	r3,-12(fp)
 4006054:	e0bff617 	ldw	r2,-40(fp)
 4006058:	1885883a 	add	r2,r3,r2
 400605c:	10c00044 	addi	r3,r2,1
 4006060:	e0bffc17 	ldw	r2,-16(fp)
 4006064:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 4006068:	e0bffc17 	ldw	r2,-16(fp)
 400606c:	10c00217 	ldw	r3,8(r2)
 4006070:	e0bff617 	ldw	r2,-40(fp)
 4006074:	1880042e 	bgeu	r3,r2,4006088 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 4006078:	e0bffc17 	ldw	r2,-16(fp)
 400607c:	00c00044 	movi	r3,1
 4006080:	10c00405 	stb	r3,16(r2)
 4006084:	00000206 	br	4006090 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 4006088:	e0bffc17 	ldw	r2,-16(fp)
 400608c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 4006090:	e0bffc17 	ldw	r2,-16(fp)
 4006094:	d0e00c04 	addi	r3,gp,-32720
 4006098:	e0fffa15 	stw	r3,-24(fp)
 400609c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 40060a0:	e0bffb17 	ldw	r2,-20(fp)
 40060a4:	e0fffa17 	ldw	r3,-24(fp)
 40060a8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 40060ac:	e0bffa17 	ldw	r2,-24(fp)
 40060b0:	10c00017 	ldw	r3,0(r2)
 40060b4:	e0bffb17 	ldw	r2,-20(fp)
 40060b8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 40060bc:	e0bffa17 	ldw	r2,-24(fp)
 40060c0:	10800017 	ldw	r2,0(r2)
 40060c4:	e0fffb17 	ldw	r3,-20(fp)
 40060c8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 40060cc:	e0bffa17 	ldw	r2,-24(fp)
 40060d0:	e0fffb17 	ldw	r3,-20(fp)
 40060d4:	10c00015 	stw	r3,0(r2)
 40060d8:	e0bff817 	ldw	r2,-32(fp)
 40060dc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40060e0:	e0bff717 	ldw	r2,-36(fp)
 40060e4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 40060e8:	0005883a 	mov	r2,zero
 40060ec:	00000306 	br	40060fc <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 40060f0:	00bffa84 	movi	r2,-22
 40060f4:	00000106 	br	40060fc <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 40060f8:	00bfde84 	movi	r2,-134
  }
}
 40060fc:	e037883a 	mov	sp,fp
 4006100:	df000017 	ldw	fp,0(sp)
 4006104:	dec00104 	addi	sp,sp,4
 4006108:	f800283a 	ret

0400610c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 400610c:	defffb04 	addi	sp,sp,-20
 4006110:	df000415 	stw	fp,16(sp)
 4006114:	df000404 	addi	fp,sp,16
 4006118:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 400611c:	008000c4 	movi	r2,3
 4006120:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 4006124:	e0fffd17 	ldw	r3,-12(fp)
 4006128:	008003f4 	movhi	r2,15
 400612c:	10909004 	addi	r2,r2,16960
 4006130:	1887383a 	mul	r3,r3,r2
 4006134:	0080bef4 	movhi	r2,763
 4006138:	10bc2004 	addi	r2,r2,-3968
 400613c:	10c7203a 	divu	r3,r2,r3
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 4006140:	00a00034 	movhi	r2,32768
 4006144:	10bfffc4 	addi	r2,r2,-1
 4006148:	10c5203a 	divu	r2,r2,r3
 400614c:	e0ffff17 	ldw	r3,-4(fp)
 4006150:	1885203a 	divu	r2,r3,r2
 4006154:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 4006158:	e0bffe17 	ldw	r2,-8(fp)
 400615c:	10002526 	beq	r2,zero,40061f4 <alt_busy_sleep+0xe8>
  {
    for(i=0;i<big_loops;i++)
 4006160:	e03ffc15 	stw	zero,-16(fp)
 4006164:	00001406 	br	40061b8 <alt_busy_sleep+0xac>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 4006168:	00a00034 	movhi	r2,32768
 400616c:	10bfffc4 	addi	r2,r2,-1
 4006170:	10bfffc4 	addi	r2,r2,-1
 4006174:	103ffe1e 	bne	r2,zero,4006170 <__alt_data_end+0xfc006170>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 4006178:	e0fffd17 	ldw	r3,-12(fp)
 400617c:	008003f4 	movhi	r2,15
 4006180:	10909004 	addi	r2,r2,16960
 4006184:	1887383a 	mul	r3,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 4006188:	0080bef4 	movhi	r2,763
 400618c:	10bc2004 	addi	r2,r2,-3968
 4006190:	10c7203a 	divu	r3,r2,r3
 4006194:	00a00034 	movhi	r2,32768
 4006198:	10bfffc4 	addi	r2,r2,-1
 400619c:	10c5203a 	divu	r2,r2,r3
 40061a0:	e0ffff17 	ldw	r3,-4(fp)
 40061a4:	1885c83a 	sub	r2,r3,r2
 40061a8:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 40061ac:	e0bffc17 	ldw	r2,-16(fp)
 40061b0:	10800044 	addi	r2,r2,1
 40061b4:	e0bffc15 	stw	r2,-16(fp)
 40061b8:	e0fffc17 	ldw	r3,-16(fp)
 40061bc:	e0bffe17 	ldw	r2,-8(fp)
 40061c0:	18bfe916 	blt	r3,r2,4006168 <__alt_data_end+0xfc006168>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 40061c4:	e0fffd17 	ldw	r3,-12(fp)
 40061c8:	008003f4 	movhi	r2,15
 40061cc:	10909004 	addi	r2,r2,16960
 40061d0:	1887383a 	mul	r3,r3,r2
 40061d4:	0080bef4 	movhi	r2,763
 40061d8:	10bc2004 	addi	r2,r2,-3968
 40061dc:	10c7203a 	divu	r3,r2,r3
 40061e0:	e0bfff17 	ldw	r2,-4(fp)
 40061e4:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 40061e8:	10bfffc4 	addi	r2,r2,-1
 40061ec:	103ffe1e 	bne	r2,zero,40061e8 <__alt_data_end+0xfc0061e8>
 40061f0:	00000b06 	br	4006220 <alt_busy_sleep+0x114>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 40061f4:	e0fffd17 	ldw	r3,-12(fp)
 40061f8:	008003f4 	movhi	r2,15
 40061fc:	10909004 	addi	r2,r2,16960
 4006200:	1887383a 	mul	r3,r3,r2
 4006204:	0080bef4 	movhi	r2,763
 4006208:	10bc2004 	addi	r2,r2,-3968
 400620c:	10c7203a 	divu	r3,r2,r3
 4006210:	e0bfff17 	ldw	r2,-4(fp)
 4006214:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 4006218:	10bfffc4 	addi	r2,r2,-1
 400621c:	00bffe16 	blt	zero,r2,4006218 <__alt_data_end+0xfc006218>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 4006220:	0005883a 	mov	r2,zero
}
 4006224:	e037883a 	mov	sp,fp
 4006228:	df000017 	ldw	fp,0(sp)
 400622c:	dec00104 	addi	sp,sp,4
 4006230:	f800283a 	ret

04006234 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 4006234:	defffe04 	addi	sp,sp,-8
 4006238:	df000115 	stw	fp,4(sp)
 400623c:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 4006240:	e03fff15 	stw	zero,-4(fp)
 4006244:	00000506 	br	400625c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 4006248:	e0bfff17 	ldw	r2,-4(fp)
 400624c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 4006250:	e0bfff17 	ldw	r2,-4(fp)
 4006254:	10800804 	addi	r2,r2,32
 4006258:	e0bfff15 	stw	r2,-4(fp)
 400625c:	e0bfff17 	ldw	r2,-4(fp)
 4006260:	10840030 	cmpltui	r2,r2,4096
 4006264:	103ff81e 	bne	r2,zero,4006248 <__alt_data_end+0xfc006248>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 4006268:	0001883a 	nop
 400626c:	e037883a 	mov	sp,fp
 4006270:	df000017 	ldw	fp,0(sp)
 4006274:	dec00104 	addi	sp,sp,4
 4006278:	f800283a 	ret

0400627c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400627c:	defffe04 	addi	sp,sp,-8
 4006280:	dfc00115 	stw	ra,4(sp)
 4006284:	df000015 	stw	fp,0(sp)
 4006288:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400628c:	d0a00917 	ldw	r2,-32732(gp)
 4006290:	10000326 	beq	r2,zero,40062a0 <alt_get_errno+0x24>
 4006294:	d0a00917 	ldw	r2,-32732(gp)
 4006298:	103ee83a 	callr	r2
 400629c:	00000106 	br	40062a4 <alt_get_errno+0x28>
 40062a0:	d0a6ef04 	addi	r2,gp,-25668
}
 40062a4:	e037883a 	mov	sp,fp
 40062a8:	dfc00117 	ldw	ra,4(sp)
 40062ac:	df000017 	ldw	fp,0(sp)
 40062b0:	dec00204 	addi	sp,sp,8
 40062b4:	f800283a 	ret

040062b8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 40062b8:	defffa04 	addi	sp,sp,-24
 40062bc:	dfc00515 	stw	ra,20(sp)
 40062c0:	df000415 	stw	fp,16(sp)
 40062c4:	df000404 	addi	fp,sp,16
 40062c8:	e13ffe15 	stw	r4,-8(fp)
 40062cc:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 40062d0:	e0bffe17 	ldw	r2,-8(fp)
 40062d4:	10000326 	beq	r2,zero,40062e4 <alt_dev_llist_insert+0x2c>
 40062d8:	e0bffe17 	ldw	r2,-8(fp)
 40062dc:	10800217 	ldw	r2,8(r2)
 40062e0:	1000061e 	bne	r2,zero,40062fc <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 40062e4:	400627c0 	call	400627c <alt_get_errno>
 40062e8:	1007883a 	mov	r3,r2
 40062ec:	00800584 	movi	r2,22
 40062f0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 40062f4:	00bffa84 	movi	r2,-22
 40062f8:	00001306 	br	4006348 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 40062fc:	e0bffe17 	ldw	r2,-8(fp)
 4006300:	e0ffff17 	ldw	r3,-4(fp)
 4006304:	e0fffc15 	stw	r3,-16(fp)
 4006308:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 400630c:	e0bffd17 	ldw	r2,-12(fp)
 4006310:	e0fffc17 	ldw	r3,-16(fp)
 4006314:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 4006318:	e0bffc17 	ldw	r2,-16(fp)
 400631c:	10c00017 	ldw	r3,0(r2)
 4006320:	e0bffd17 	ldw	r2,-12(fp)
 4006324:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4006328:	e0bffc17 	ldw	r2,-16(fp)
 400632c:	10800017 	ldw	r2,0(r2)
 4006330:	e0fffd17 	ldw	r3,-12(fp)
 4006334:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 4006338:	e0bffc17 	ldw	r2,-16(fp)
 400633c:	e0fffd17 	ldw	r3,-12(fp)
 4006340:	10c00015 	stw	r3,0(r2)

  return 0;  
 4006344:	0005883a 	mov	r2,zero
}
 4006348:	e037883a 	mov	sp,fp
 400634c:	dfc00117 	ldw	ra,4(sp)
 4006350:	df000017 	ldw	fp,0(sp)
 4006354:	dec00204 	addi	sp,sp,8
 4006358:	f800283a 	ret

0400635c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 400635c:	defffd04 	addi	sp,sp,-12
 4006360:	dfc00215 	stw	ra,8(sp)
 4006364:	df000115 	stw	fp,4(sp)
 4006368:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 400636c:	00810034 	movhi	r2,1024
 4006370:	109cc004 	addi	r2,r2,29440
 4006374:	e0bfff15 	stw	r2,-4(fp)
 4006378:	00000606 	br	4006394 <_do_ctors+0x38>
        (*ctor) (); 
 400637c:	e0bfff17 	ldw	r2,-4(fp)
 4006380:	10800017 	ldw	r2,0(r2)
 4006384:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4006388:	e0bfff17 	ldw	r2,-4(fp)
 400638c:	10bfff04 	addi	r2,r2,-4
 4006390:	e0bfff15 	stw	r2,-4(fp)
 4006394:	e0ffff17 	ldw	r3,-4(fp)
 4006398:	00810034 	movhi	r2,1024
 400639c:	109cc104 	addi	r2,r2,29444
 40063a0:	18bff62e 	bgeu	r3,r2,400637c <__alt_data_end+0xfc00637c>
        (*ctor) (); 
}
 40063a4:	0001883a 	nop
 40063a8:	e037883a 	mov	sp,fp
 40063ac:	dfc00117 	ldw	ra,4(sp)
 40063b0:	df000017 	ldw	fp,0(sp)
 40063b4:	dec00204 	addi	sp,sp,8
 40063b8:	f800283a 	ret

040063bc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 40063bc:	defffd04 	addi	sp,sp,-12
 40063c0:	dfc00215 	stw	ra,8(sp)
 40063c4:	df000115 	stw	fp,4(sp)
 40063c8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 40063cc:	00810034 	movhi	r2,1024
 40063d0:	109cc004 	addi	r2,r2,29440
 40063d4:	e0bfff15 	stw	r2,-4(fp)
 40063d8:	00000606 	br	40063f4 <_do_dtors+0x38>
        (*dtor) (); 
 40063dc:	e0bfff17 	ldw	r2,-4(fp)
 40063e0:	10800017 	ldw	r2,0(r2)
 40063e4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 40063e8:	e0bfff17 	ldw	r2,-4(fp)
 40063ec:	10bfff04 	addi	r2,r2,-4
 40063f0:	e0bfff15 	stw	r2,-4(fp)
 40063f4:	e0ffff17 	ldw	r3,-4(fp)
 40063f8:	00810034 	movhi	r2,1024
 40063fc:	109cc104 	addi	r2,r2,29444
 4006400:	18bff62e 	bgeu	r3,r2,40063dc <__alt_data_end+0xfc0063dc>
        (*dtor) (); 
}
 4006404:	0001883a 	nop
 4006408:	e037883a 	mov	sp,fp
 400640c:	dfc00117 	ldw	ra,4(sp)
 4006410:	df000017 	ldw	fp,0(sp)
 4006414:	dec00204 	addi	sp,sp,8
 4006418:	f800283a 	ret

0400641c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 400641c:	defffa04 	addi	sp,sp,-24
 4006420:	dfc00515 	stw	ra,20(sp)
 4006424:	df000415 	stw	fp,16(sp)
 4006428:	df000404 	addi	fp,sp,16
 400642c:	e13ffe15 	stw	r4,-8(fp)
 4006430:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 4006434:	e0bfff17 	ldw	r2,-4(fp)
 4006438:	10800017 	ldw	r2,0(r2)
 400643c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 4006440:	e13ffe17 	ldw	r4,-8(fp)
 4006444:	400095c0 	call	400095c <strlen>
 4006448:	10800044 	addi	r2,r2,1
 400644c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4006450:	00000d06 	br	4006488 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 4006454:	e0bffc17 	ldw	r2,-16(fp)
 4006458:	10800217 	ldw	r2,8(r2)
 400645c:	e0fffd17 	ldw	r3,-12(fp)
 4006460:	180d883a 	mov	r6,r3
 4006464:	e17ffe17 	ldw	r5,-8(fp)
 4006468:	1009883a 	mov	r4,r2
 400646c:	4006ee00 	call	4006ee0 <memcmp>
 4006470:	1000021e 	bne	r2,zero,400647c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 4006474:	e0bffc17 	ldw	r2,-16(fp)
 4006478:	00000706 	br	4006498 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 400647c:	e0bffc17 	ldw	r2,-16(fp)
 4006480:	10800017 	ldw	r2,0(r2)
 4006484:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4006488:	e0fffc17 	ldw	r3,-16(fp)
 400648c:	e0bfff17 	ldw	r2,-4(fp)
 4006490:	18bff01e 	bne	r3,r2,4006454 <__alt_data_end+0xfc006454>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 4006494:	0005883a 	mov	r2,zero
}
 4006498:	e037883a 	mov	sp,fp
 400649c:	dfc00117 	ldw	ra,4(sp)
 40064a0:	df000017 	ldw	fp,0(sp)
 40064a4:	dec00204 	addi	sp,sp,8
 40064a8:	f800283a 	ret

040064ac <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 40064ac:	defffe04 	addi	sp,sp,-8
 40064b0:	dfc00115 	stw	ra,4(sp)
 40064b4:	df000015 	stw	fp,0(sp)
 40064b8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 40064bc:	01480004 	movi	r5,8192
 40064c0:	0009883a 	mov	r4,zero
 40064c4:	4006d680 	call	4006d68 <alt_icache_flush>
#endif
}
 40064c8:	0001883a 	nop
 40064cc:	e037883a 	mov	sp,fp
 40064d0:	dfc00117 	ldw	ra,4(sp)
 40064d4:	df000017 	ldw	fp,0(sp)
 40064d8:	dec00204 	addi	sp,sp,8
 40064dc:	f800283a 	ret

040064e0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 40064e0:	defff904 	addi	sp,sp,-28
 40064e4:	dfc00615 	stw	ra,24(sp)
 40064e8:	df000515 	stw	fp,20(sp)
 40064ec:	df000504 	addi	fp,sp,20
 40064f0:	e13ffc15 	stw	r4,-16(fp)
 40064f4:	e17ffd15 	stw	r5,-12(fp)
 40064f8:	e1bffe15 	stw	r6,-8(fp)
 40064fc:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 4006500:	e1bfff17 	ldw	r6,-4(fp)
 4006504:	e17ffe17 	ldw	r5,-8(fp)
 4006508:	e13ffd17 	ldw	r4,-12(fp)
 400650c:	40068a00 	call	40068a0 <open>
 4006510:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 4006514:	e0bffb17 	ldw	r2,-20(fp)
 4006518:	10001c16 	blt	r2,zero,400658c <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 400651c:	00810034 	movhi	r2,1024
 4006520:	109f6204 	addi	r2,r2,32136
 4006524:	e0fffb17 	ldw	r3,-20(fp)
 4006528:	18c00324 	muli	r3,r3,12
 400652c:	10c5883a 	add	r2,r2,r3
 4006530:	10c00017 	ldw	r3,0(r2)
 4006534:	e0bffc17 	ldw	r2,-16(fp)
 4006538:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 400653c:	00810034 	movhi	r2,1024
 4006540:	109f6204 	addi	r2,r2,32136
 4006544:	e0fffb17 	ldw	r3,-20(fp)
 4006548:	18c00324 	muli	r3,r3,12
 400654c:	10c5883a 	add	r2,r2,r3
 4006550:	10800104 	addi	r2,r2,4
 4006554:	10c00017 	ldw	r3,0(r2)
 4006558:	e0bffc17 	ldw	r2,-16(fp)
 400655c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 4006560:	00810034 	movhi	r2,1024
 4006564:	109f6204 	addi	r2,r2,32136
 4006568:	e0fffb17 	ldw	r3,-20(fp)
 400656c:	18c00324 	muli	r3,r3,12
 4006570:	10c5883a 	add	r2,r2,r3
 4006574:	10800204 	addi	r2,r2,8
 4006578:	10c00017 	ldw	r3,0(r2)
 400657c:	e0bffc17 	ldw	r2,-16(fp)
 4006580:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 4006584:	e13ffb17 	ldw	r4,-20(fp)
 4006588:	4003c380 	call	4003c38 <alt_release_fd>
  }
} 
 400658c:	0001883a 	nop
 4006590:	e037883a 	mov	sp,fp
 4006594:	dfc00117 	ldw	ra,4(sp)
 4006598:	df000017 	ldw	fp,0(sp)
 400659c:	dec00204 	addi	sp,sp,8
 40065a0:	f800283a 	ret

040065a4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 40065a4:	defffb04 	addi	sp,sp,-20
 40065a8:	dfc00415 	stw	ra,16(sp)
 40065ac:	df000315 	stw	fp,12(sp)
 40065b0:	df000304 	addi	fp,sp,12
 40065b4:	e13ffd15 	stw	r4,-12(fp)
 40065b8:	e17ffe15 	stw	r5,-8(fp)
 40065bc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 40065c0:	01c07fc4 	movi	r7,511
 40065c4:	01800044 	movi	r6,1
 40065c8:	e17ffd17 	ldw	r5,-12(fp)
 40065cc:	01010034 	movhi	r4,1024
 40065d0:	211f6504 	addi	r4,r4,32148
 40065d4:	40064e00 	call	40064e0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 40065d8:	01c07fc4 	movi	r7,511
 40065dc:	000d883a 	mov	r6,zero
 40065e0:	e17ffe17 	ldw	r5,-8(fp)
 40065e4:	01010034 	movhi	r4,1024
 40065e8:	211f6204 	addi	r4,r4,32136
 40065ec:	40064e00 	call	40064e0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 40065f0:	01c07fc4 	movi	r7,511
 40065f4:	01800044 	movi	r6,1
 40065f8:	e17fff17 	ldw	r5,-4(fp)
 40065fc:	01010034 	movhi	r4,1024
 4006600:	211f6804 	addi	r4,r4,32160
 4006604:	40064e00 	call	40064e0 <alt_open_fd>
}  
 4006608:	0001883a 	nop
 400660c:	e037883a 	mov	sp,fp
 4006610:	dfc00117 	ldw	ra,4(sp)
 4006614:	df000017 	ldw	fp,0(sp)
 4006618:	dec00204 	addi	sp,sp,8
 400661c:	f800283a 	ret

04006620 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 4006620:	defff004 	addi	sp,sp,-64
 4006624:	df000f15 	stw	fp,60(sp)
 4006628:	df000f04 	addi	fp,sp,60
 400662c:	e13ffd15 	stw	r4,-12(fp)
 4006630:	e17ffe15 	stw	r5,-8(fp)
 4006634:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
 4006638:	00bffa84 	movi	r2,-22
 400663c:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 4006640:	e0bffd17 	ldw	r2,-12(fp)
 4006644:	10800828 	cmpgeui	r2,r2,32
 4006648:	1000501e 	bne	r2,zero,400678c <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400664c:	0005303a 	rdctl	r2,status
 4006650:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4006654:	e0fff617 	ldw	r3,-40(fp)
 4006658:	00bfff84 	movi	r2,-2
 400665c:	1884703a 	and	r2,r3,r2
 4006660:	1001703a 	wrctl	status,r2
  
  return context;
 4006664:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
 4006668:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
 400666c:	00810074 	movhi	r2,1025
 4006670:	10ab1e04 	addi	r2,r2,-21384
 4006674:	e0fffd17 	ldw	r3,-12(fp)
 4006678:	180690fa 	slli	r3,r3,3
 400667c:	10c5883a 	add	r2,r2,r3
 4006680:	e0ffff17 	ldw	r3,-4(fp)
 4006684:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
 4006688:	00810074 	movhi	r2,1025
 400668c:	10ab1e04 	addi	r2,r2,-21384
 4006690:	e0fffd17 	ldw	r3,-12(fp)
 4006694:	180690fa 	slli	r3,r3,3
 4006698:	10c5883a 	add	r2,r2,r3
 400669c:	10800104 	addi	r2,r2,4
 40066a0:	e0fffe17 	ldw	r3,-8(fp)
 40066a4:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 40066a8:	e0bfff17 	ldw	r2,-4(fp)
 40066ac:	10001926 	beq	r2,zero,4006714 <alt_irq_register+0xf4>
 40066b0:	e0bffd17 	ldw	r2,-12(fp)
 40066b4:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40066b8:	0005303a 	rdctl	r2,status
 40066bc:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40066c0:	e0fff717 	ldw	r3,-36(fp)
 40066c4:	00bfff84 	movi	r2,-2
 40066c8:	1884703a 	and	r2,r3,r2
 40066cc:	1001703a 	wrctl	status,r2
  
  return context;
 40066d0:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 40066d4:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
 40066d8:	00c00044 	movi	r3,1
 40066dc:	e0bff217 	ldw	r2,-56(fp)
 40066e0:	1884983a 	sll	r2,r3,r2
 40066e4:	1007883a 	mov	r3,r2
 40066e8:	d0a6f317 	ldw	r2,-25652(gp)
 40066ec:	1884b03a 	or	r2,r3,r2
 40066f0:	d0a6f315 	stw	r2,-25652(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 40066f4:	d0a6f317 	ldw	r2,-25652(gp)
 40066f8:	100170fa 	wrctl	ienable,r2
 40066fc:	e0bff817 	ldw	r2,-32(fp)
 4006700:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4006704:	e0bff917 	ldw	r2,-28(fp)
 4006708:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 400670c:	0005883a 	mov	r2,zero
 4006710:	00001906 	br	4006778 <alt_irq_register+0x158>
 4006714:	e0bffd17 	ldw	r2,-12(fp)
 4006718:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400671c:	0005303a 	rdctl	r2,status
 4006720:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4006724:	e0fffa17 	ldw	r3,-24(fp)
 4006728:	00bfff84 	movi	r2,-2
 400672c:	1884703a 	and	r2,r3,r2
 4006730:	1001703a 	wrctl	status,r2
  
  return context;
 4006734:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4006738:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
 400673c:	00c00044 	movi	r3,1
 4006740:	e0bff417 	ldw	r2,-48(fp)
 4006744:	1884983a 	sll	r2,r3,r2
 4006748:	0084303a 	nor	r2,zero,r2
 400674c:	1007883a 	mov	r3,r2
 4006750:	d0a6f317 	ldw	r2,-25652(gp)
 4006754:	1884703a 	and	r2,r3,r2
 4006758:	d0a6f315 	stw	r2,-25652(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 400675c:	d0a6f317 	ldw	r2,-25652(gp)
 4006760:	100170fa 	wrctl	ienable,r2
 4006764:	e0bffb17 	ldw	r2,-20(fp)
 4006768:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400676c:	e0bffc17 	ldw	r2,-16(fp)
 4006770:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4006774:	0005883a 	mov	r2,zero
 4006778:	e0bff115 	stw	r2,-60(fp)
 400677c:	e0bff317 	ldw	r2,-52(fp)
 4006780:	e0bff515 	stw	r2,-44(fp)
 4006784:	e0bff517 	ldw	r2,-44(fp)
 4006788:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
 400678c:	e0bff117 	ldw	r2,-60(fp)
}
 4006790:	e037883a 	mov	sp,fp
 4006794:	df000017 	ldw	fp,0(sp)
 4006798:	dec00104 	addi	sp,sp,4
 400679c:	f800283a 	ret

040067a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40067a0:	defffe04 	addi	sp,sp,-8
 40067a4:	dfc00115 	stw	ra,4(sp)
 40067a8:	df000015 	stw	fp,0(sp)
 40067ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40067b0:	d0a00917 	ldw	r2,-32732(gp)
 40067b4:	10000326 	beq	r2,zero,40067c4 <alt_get_errno+0x24>
 40067b8:	d0a00917 	ldw	r2,-32732(gp)
 40067bc:	103ee83a 	callr	r2
 40067c0:	00000106 	br	40067c8 <alt_get_errno+0x28>
 40067c4:	d0a6ef04 	addi	r2,gp,-25668
}
 40067c8:	e037883a 	mov	sp,fp
 40067cc:	dfc00117 	ldw	ra,4(sp)
 40067d0:	df000017 	ldw	fp,0(sp)
 40067d4:	dec00204 	addi	sp,sp,8
 40067d8:	f800283a 	ret

040067dc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 40067dc:	defffd04 	addi	sp,sp,-12
 40067e0:	df000215 	stw	fp,8(sp)
 40067e4:	df000204 	addi	fp,sp,8
 40067e8:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 40067ec:	e0bfff17 	ldw	r2,-4(fp)
 40067f0:	10800217 	ldw	r2,8(r2)
 40067f4:	10d00034 	orhi	r3,r2,16384
 40067f8:	e0bfff17 	ldw	r2,-4(fp)
 40067fc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4006800:	e03ffe15 	stw	zero,-8(fp)
 4006804:	00001d06 	br	400687c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4006808:	00810034 	movhi	r2,1024
 400680c:	109f6204 	addi	r2,r2,32136
 4006810:	e0fffe17 	ldw	r3,-8(fp)
 4006814:	18c00324 	muli	r3,r3,12
 4006818:	10c5883a 	add	r2,r2,r3
 400681c:	10c00017 	ldw	r3,0(r2)
 4006820:	e0bfff17 	ldw	r2,-4(fp)
 4006824:	10800017 	ldw	r2,0(r2)
 4006828:	1880111e 	bne	r3,r2,4006870 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 400682c:	00810034 	movhi	r2,1024
 4006830:	109f6204 	addi	r2,r2,32136
 4006834:	e0fffe17 	ldw	r3,-8(fp)
 4006838:	18c00324 	muli	r3,r3,12
 400683c:	10c5883a 	add	r2,r2,r3
 4006840:	10800204 	addi	r2,r2,8
 4006844:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4006848:	1000090e 	bge	r2,zero,4006870 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 400684c:	e0bffe17 	ldw	r2,-8(fp)
 4006850:	10c00324 	muli	r3,r2,12
 4006854:	00810034 	movhi	r2,1024
 4006858:	109f6204 	addi	r2,r2,32136
 400685c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 4006860:	e0bfff17 	ldw	r2,-4(fp)
 4006864:	18800226 	beq	r3,r2,4006870 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 4006868:	00bffcc4 	movi	r2,-13
 400686c:	00000806 	br	4006890 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4006870:	e0bffe17 	ldw	r2,-8(fp)
 4006874:	10800044 	addi	r2,r2,1
 4006878:	e0bffe15 	stw	r2,-8(fp)
 400687c:	d0a00817 	ldw	r2,-32736(gp)
 4006880:	1007883a 	mov	r3,r2
 4006884:	e0bffe17 	ldw	r2,-8(fp)
 4006888:	18bfdf2e 	bgeu	r3,r2,4006808 <__alt_data_end+0xfc006808>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 400688c:	0005883a 	mov	r2,zero
}
 4006890:	e037883a 	mov	sp,fp
 4006894:	df000017 	ldw	fp,0(sp)
 4006898:	dec00104 	addi	sp,sp,4
 400689c:	f800283a 	ret

040068a0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 40068a0:	defff604 	addi	sp,sp,-40
 40068a4:	dfc00915 	stw	ra,36(sp)
 40068a8:	df000815 	stw	fp,32(sp)
 40068ac:	df000804 	addi	fp,sp,32
 40068b0:	e13ffd15 	stw	r4,-12(fp)
 40068b4:	e17ffe15 	stw	r5,-8(fp)
 40068b8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 40068bc:	00bfffc4 	movi	r2,-1
 40068c0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 40068c4:	00bffb44 	movi	r2,-19
 40068c8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 40068cc:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 40068d0:	d1600604 	addi	r5,gp,-32744
 40068d4:	e13ffd17 	ldw	r4,-12(fp)
 40068d8:	400641c0 	call	400641c <alt_find_dev>
 40068dc:	e0bff815 	stw	r2,-32(fp)
 40068e0:	e0bff817 	ldw	r2,-32(fp)
 40068e4:	1000051e 	bne	r2,zero,40068fc <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 40068e8:	e13ffd17 	ldw	r4,-12(fp)
 40068ec:	4006bbc0 	call	4006bbc <alt_find_file>
 40068f0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 40068f4:	00800044 	movi	r2,1
 40068f8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 40068fc:	e0bff817 	ldw	r2,-32(fp)
 4006900:	10002926 	beq	r2,zero,40069a8 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 4006904:	e13ff817 	ldw	r4,-32(fp)
 4006908:	4006cc40 	call	4006cc4 <alt_get_fd>
 400690c:	e0bff915 	stw	r2,-28(fp)
 4006910:	e0bff917 	ldw	r2,-28(fp)
 4006914:	1000030e 	bge	r2,zero,4006924 <open+0x84>
    {
      status = index;
 4006918:	e0bff917 	ldw	r2,-28(fp)
 400691c:	e0bffa15 	stw	r2,-24(fp)
 4006920:	00002306 	br	40069b0 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 4006924:	e0bff917 	ldw	r2,-28(fp)
 4006928:	10c00324 	muli	r3,r2,12
 400692c:	00810034 	movhi	r2,1024
 4006930:	109f6204 	addi	r2,r2,32136
 4006934:	1885883a 	add	r2,r3,r2
 4006938:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 400693c:	e0fffe17 	ldw	r3,-8(fp)
 4006940:	00900034 	movhi	r2,16384
 4006944:	10bfffc4 	addi	r2,r2,-1
 4006948:	1886703a 	and	r3,r3,r2
 400694c:	e0bffc17 	ldw	r2,-16(fp)
 4006950:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 4006954:	e0bffb17 	ldw	r2,-20(fp)
 4006958:	1000051e 	bne	r2,zero,4006970 <open+0xd0>
 400695c:	e13ffc17 	ldw	r4,-16(fp)
 4006960:	40067dc0 	call	40067dc <alt_file_locked>
 4006964:	e0bffa15 	stw	r2,-24(fp)
 4006968:	e0bffa17 	ldw	r2,-24(fp)
 400696c:	10001016 	blt	r2,zero,40069b0 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 4006970:	e0bff817 	ldw	r2,-32(fp)
 4006974:	10800317 	ldw	r2,12(r2)
 4006978:	10000826 	beq	r2,zero,400699c <open+0xfc>
 400697c:	e0bff817 	ldw	r2,-32(fp)
 4006980:	10800317 	ldw	r2,12(r2)
 4006984:	e1ffff17 	ldw	r7,-4(fp)
 4006988:	e1bffe17 	ldw	r6,-8(fp)
 400698c:	e17ffd17 	ldw	r5,-12(fp)
 4006990:	e13ffc17 	ldw	r4,-16(fp)
 4006994:	103ee83a 	callr	r2
 4006998:	00000106 	br	40069a0 <open+0x100>
 400699c:	0005883a 	mov	r2,zero
 40069a0:	e0bffa15 	stw	r2,-24(fp)
 40069a4:	00000206 	br	40069b0 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 40069a8:	00bffb44 	movi	r2,-19
 40069ac:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 40069b0:	e0bffa17 	ldw	r2,-24(fp)
 40069b4:	1000090e 	bge	r2,zero,40069dc <open+0x13c>
  {
    alt_release_fd (index);  
 40069b8:	e13ff917 	ldw	r4,-28(fp)
 40069bc:	4003c380 	call	4003c38 <alt_release_fd>
    ALT_ERRNO = -status;
 40069c0:	40067a00 	call	40067a0 <alt_get_errno>
 40069c4:	1007883a 	mov	r3,r2
 40069c8:	e0bffa17 	ldw	r2,-24(fp)
 40069cc:	0085c83a 	sub	r2,zero,r2
 40069d0:	18800015 	stw	r2,0(r3)
    return -1;
 40069d4:	00bfffc4 	movi	r2,-1
 40069d8:	00000106 	br	40069e0 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 40069dc:	e0bff917 	ldw	r2,-28(fp)
}
 40069e0:	e037883a 	mov	sp,fp
 40069e4:	dfc00117 	ldw	ra,4(sp)
 40069e8:	df000017 	ldw	fp,0(sp)
 40069ec:	dec00204 	addi	sp,sp,8
 40069f0:	f800283a 	ret

040069f4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 40069f4:	defffa04 	addi	sp,sp,-24
 40069f8:	df000515 	stw	fp,20(sp)
 40069fc:	df000504 	addi	fp,sp,20
 4006a00:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4006a04:	0005303a 	rdctl	r2,status
 4006a08:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4006a0c:	e0fffc17 	ldw	r3,-16(fp)
 4006a10:	00bfff84 	movi	r2,-2
 4006a14:	1884703a 	and	r2,r3,r2
 4006a18:	1001703a 	wrctl	status,r2
  
  return context;
 4006a1c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 4006a20:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 4006a24:	e0bfff17 	ldw	r2,-4(fp)
 4006a28:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 4006a2c:	e0bffd17 	ldw	r2,-12(fp)
 4006a30:	10800017 	ldw	r2,0(r2)
 4006a34:	e0fffd17 	ldw	r3,-12(fp)
 4006a38:	18c00117 	ldw	r3,4(r3)
 4006a3c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 4006a40:	e0bffd17 	ldw	r2,-12(fp)
 4006a44:	10800117 	ldw	r2,4(r2)
 4006a48:	e0fffd17 	ldw	r3,-12(fp)
 4006a4c:	18c00017 	ldw	r3,0(r3)
 4006a50:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 4006a54:	e0bffd17 	ldw	r2,-12(fp)
 4006a58:	e0fffd17 	ldw	r3,-12(fp)
 4006a5c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 4006a60:	e0bffd17 	ldw	r2,-12(fp)
 4006a64:	e0fffd17 	ldw	r3,-12(fp)
 4006a68:	10c00015 	stw	r3,0(r2)
 4006a6c:	e0bffb17 	ldw	r2,-20(fp)
 4006a70:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4006a74:	e0bffe17 	ldw	r2,-8(fp)
 4006a78:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 4006a7c:	0001883a 	nop
 4006a80:	e037883a 	mov	sp,fp
 4006a84:	df000017 	ldw	fp,0(sp)
 4006a88:	dec00104 	addi	sp,sp,4
 4006a8c:	f800283a 	ret

04006a90 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 4006a90:	defffb04 	addi	sp,sp,-20
 4006a94:	dfc00415 	stw	ra,16(sp)
 4006a98:	df000315 	stw	fp,12(sp)
 4006a9c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 4006aa0:	d0a00c17 	ldw	r2,-32720(gp)
 4006aa4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 4006aa8:	d0a6f517 	ldw	r2,-25644(gp)
 4006aac:	10800044 	addi	r2,r2,1
 4006ab0:	d0a6f515 	stw	r2,-25644(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4006ab4:	00002e06 	br	4006b70 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 4006ab8:	e0bffd17 	ldw	r2,-12(fp)
 4006abc:	10800017 	ldw	r2,0(r2)
 4006ac0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 4006ac4:	e0bffd17 	ldw	r2,-12(fp)
 4006ac8:	10800403 	ldbu	r2,16(r2)
 4006acc:	10803fcc 	andi	r2,r2,255
 4006ad0:	10000426 	beq	r2,zero,4006ae4 <alt_tick+0x54>
 4006ad4:	d0a6f517 	ldw	r2,-25644(gp)
 4006ad8:	1000021e 	bne	r2,zero,4006ae4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 4006adc:	e0bffd17 	ldw	r2,-12(fp)
 4006ae0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 4006ae4:	e0bffd17 	ldw	r2,-12(fp)
 4006ae8:	10800217 	ldw	r2,8(r2)
 4006aec:	d0e6f517 	ldw	r3,-25644(gp)
 4006af0:	18801d36 	bltu	r3,r2,4006b68 <alt_tick+0xd8>
 4006af4:	e0bffd17 	ldw	r2,-12(fp)
 4006af8:	10800403 	ldbu	r2,16(r2)
 4006afc:	10803fcc 	andi	r2,r2,255
 4006b00:	1000191e 	bne	r2,zero,4006b68 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 4006b04:	e0bffd17 	ldw	r2,-12(fp)
 4006b08:	10800317 	ldw	r2,12(r2)
 4006b0c:	e0fffd17 	ldw	r3,-12(fp)
 4006b10:	18c00517 	ldw	r3,20(r3)
 4006b14:	1809883a 	mov	r4,r3
 4006b18:	103ee83a 	callr	r2
 4006b1c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 4006b20:	e0bfff17 	ldw	r2,-4(fp)
 4006b24:	1000031e 	bne	r2,zero,4006b34 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 4006b28:	e13ffd17 	ldw	r4,-12(fp)
 4006b2c:	40069f40 	call	40069f4 <alt_alarm_stop>
 4006b30:	00000d06 	br	4006b68 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 4006b34:	e0bffd17 	ldw	r2,-12(fp)
 4006b38:	10c00217 	ldw	r3,8(r2)
 4006b3c:	e0bfff17 	ldw	r2,-4(fp)
 4006b40:	1887883a 	add	r3,r3,r2
 4006b44:	e0bffd17 	ldw	r2,-12(fp)
 4006b48:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 4006b4c:	e0bffd17 	ldw	r2,-12(fp)
 4006b50:	10c00217 	ldw	r3,8(r2)
 4006b54:	d0a6f517 	ldw	r2,-25644(gp)
 4006b58:	1880032e 	bgeu	r3,r2,4006b68 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 4006b5c:	e0bffd17 	ldw	r2,-12(fp)
 4006b60:	00c00044 	movi	r3,1
 4006b64:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 4006b68:	e0bffe17 	ldw	r2,-8(fp)
 4006b6c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4006b70:	e0fffd17 	ldw	r3,-12(fp)
 4006b74:	d0a00c04 	addi	r2,gp,-32720
 4006b78:	18bfcf1e 	bne	r3,r2,4006ab8 <__alt_data_end+0xfc006ab8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 4006b7c:	0001883a 	nop
}
 4006b80:	0001883a 	nop
 4006b84:	e037883a 	mov	sp,fp
 4006b88:	dfc00117 	ldw	ra,4(sp)
 4006b8c:	df000017 	ldw	fp,0(sp)
 4006b90:	dec00204 	addi	sp,sp,8
 4006b94:	f800283a 	ret

04006b98 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 4006b98:	deffff04 	addi	sp,sp,-4
 4006b9c:	df000015 	stw	fp,0(sp)
 4006ba0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 4006ba4:	000170fa 	wrctl	ienable,zero
}
 4006ba8:	0001883a 	nop
 4006bac:	e037883a 	mov	sp,fp
 4006bb0:	df000017 	ldw	fp,0(sp)
 4006bb4:	dec00104 	addi	sp,sp,4
 4006bb8:	f800283a 	ret

04006bbc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 4006bbc:	defffb04 	addi	sp,sp,-20
 4006bc0:	dfc00415 	stw	ra,16(sp)
 4006bc4:	df000315 	stw	fp,12(sp)
 4006bc8:	df000304 	addi	fp,sp,12
 4006bcc:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 4006bd0:	d0a00417 	ldw	r2,-32752(gp)
 4006bd4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4006bd8:	00003106 	br	4006ca0 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 4006bdc:	e0bffd17 	ldw	r2,-12(fp)
 4006be0:	10800217 	ldw	r2,8(r2)
 4006be4:	1009883a 	mov	r4,r2
 4006be8:	400095c0 	call	400095c <strlen>
 4006bec:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 4006bf0:	e0bffd17 	ldw	r2,-12(fp)
 4006bf4:	10c00217 	ldw	r3,8(r2)
 4006bf8:	e0bffe17 	ldw	r2,-8(fp)
 4006bfc:	10bfffc4 	addi	r2,r2,-1
 4006c00:	1885883a 	add	r2,r3,r2
 4006c04:	10800003 	ldbu	r2,0(r2)
 4006c08:	10803fcc 	andi	r2,r2,255
 4006c0c:	1080201c 	xori	r2,r2,128
 4006c10:	10bfe004 	addi	r2,r2,-128
 4006c14:	10800bd8 	cmpnei	r2,r2,47
 4006c18:	1000031e 	bne	r2,zero,4006c28 <alt_find_file+0x6c>
    {
      len -= 1;
 4006c1c:	e0bffe17 	ldw	r2,-8(fp)
 4006c20:	10bfffc4 	addi	r2,r2,-1
 4006c24:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4006c28:	e0bffe17 	ldw	r2,-8(fp)
 4006c2c:	e0ffff17 	ldw	r3,-4(fp)
 4006c30:	1885883a 	add	r2,r3,r2
 4006c34:	10800003 	ldbu	r2,0(r2)
 4006c38:	10803fcc 	andi	r2,r2,255
 4006c3c:	1080201c 	xori	r2,r2,128
 4006c40:	10bfe004 	addi	r2,r2,-128
 4006c44:	10800be0 	cmpeqi	r2,r2,47
 4006c48:	1000081e 	bne	r2,zero,4006c6c <alt_find_file+0xb0>
 4006c4c:	e0bffe17 	ldw	r2,-8(fp)
 4006c50:	e0ffff17 	ldw	r3,-4(fp)
 4006c54:	1885883a 	add	r2,r3,r2
 4006c58:	10800003 	ldbu	r2,0(r2)
 4006c5c:	10803fcc 	andi	r2,r2,255
 4006c60:	1080201c 	xori	r2,r2,128
 4006c64:	10bfe004 	addi	r2,r2,-128
 4006c68:	10000a1e 	bne	r2,zero,4006c94 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 4006c6c:	e0bffd17 	ldw	r2,-12(fp)
 4006c70:	10800217 	ldw	r2,8(r2)
 4006c74:	e0fffe17 	ldw	r3,-8(fp)
 4006c78:	180d883a 	mov	r6,r3
 4006c7c:	e17fff17 	ldw	r5,-4(fp)
 4006c80:	1009883a 	mov	r4,r2
 4006c84:	4006ee00 	call	4006ee0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4006c88:	1000021e 	bne	r2,zero,4006c94 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 4006c8c:	e0bffd17 	ldw	r2,-12(fp)
 4006c90:	00000706 	br	4006cb0 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 4006c94:	e0bffd17 	ldw	r2,-12(fp)
 4006c98:	10800017 	ldw	r2,0(r2)
 4006c9c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4006ca0:	e0fffd17 	ldw	r3,-12(fp)
 4006ca4:	d0a00404 	addi	r2,gp,-32752
 4006ca8:	18bfcc1e 	bne	r3,r2,4006bdc <__alt_data_end+0xfc006bdc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 4006cac:	0005883a 	mov	r2,zero
}
 4006cb0:	e037883a 	mov	sp,fp
 4006cb4:	dfc00117 	ldw	ra,4(sp)
 4006cb8:	df000017 	ldw	fp,0(sp)
 4006cbc:	dec00204 	addi	sp,sp,8
 4006cc0:	f800283a 	ret

04006cc4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 4006cc4:	defffc04 	addi	sp,sp,-16
 4006cc8:	df000315 	stw	fp,12(sp)
 4006ccc:	df000304 	addi	fp,sp,12
 4006cd0:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 4006cd4:	00bffa04 	movi	r2,-24
 4006cd8:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4006cdc:	e03ffd15 	stw	zero,-12(fp)
 4006ce0:	00001906 	br	4006d48 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
 4006ce4:	00810034 	movhi	r2,1024
 4006ce8:	109f6204 	addi	r2,r2,32136
 4006cec:	e0fffd17 	ldw	r3,-12(fp)
 4006cf0:	18c00324 	muli	r3,r3,12
 4006cf4:	10c5883a 	add	r2,r2,r3
 4006cf8:	10800017 	ldw	r2,0(r2)
 4006cfc:	10000f1e 	bne	r2,zero,4006d3c <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
 4006d00:	00810034 	movhi	r2,1024
 4006d04:	109f6204 	addi	r2,r2,32136
 4006d08:	e0fffd17 	ldw	r3,-12(fp)
 4006d0c:	18c00324 	muli	r3,r3,12
 4006d10:	10c5883a 	add	r2,r2,r3
 4006d14:	e0ffff17 	ldw	r3,-4(fp)
 4006d18:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 4006d1c:	d0e00817 	ldw	r3,-32736(gp)
 4006d20:	e0bffd17 	ldw	r2,-12(fp)
 4006d24:	1880020e 	bge	r3,r2,4006d30 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
 4006d28:	e0bffd17 	ldw	r2,-12(fp)
 4006d2c:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
 4006d30:	e0bffd17 	ldw	r2,-12(fp)
 4006d34:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 4006d38:	00000606 	br	4006d54 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4006d3c:	e0bffd17 	ldw	r2,-12(fp)
 4006d40:	10800044 	addi	r2,r2,1
 4006d44:	e0bffd15 	stw	r2,-12(fp)
 4006d48:	e0bffd17 	ldw	r2,-12(fp)
 4006d4c:	10800810 	cmplti	r2,r2,32
 4006d50:	103fe41e 	bne	r2,zero,4006ce4 <__alt_data_end+0xfc006ce4>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 4006d54:	e0bffe17 	ldw	r2,-8(fp)
}
 4006d58:	e037883a 	mov	sp,fp
 4006d5c:	df000017 	ldw	fp,0(sp)
 4006d60:	dec00104 	addi	sp,sp,4
 4006d64:	f800283a 	ret

04006d68 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 4006d68:	defffb04 	addi	sp,sp,-20
 4006d6c:	df000415 	stw	fp,16(sp)
 4006d70:	df000404 	addi	fp,sp,16
 4006d74:	e13ffe15 	stw	r4,-8(fp)
 4006d78:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 4006d7c:	e0bfff17 	ldw	r2,-4(fp)
 4006d80:	10880070 	cmpltui	r2,r2,8193
 4006d84:	1000021e 	bne	r2,zero,4006d90 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 4006d88:	00880004 	movi	r2,8192
 4006d8c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 4006d90:	e0fffe17 	ldw	r3,-8(fp)
 4006d94:	e0bfff17 	ldw	r2,-4(fp)
 4006d98:	1885883a 	add	r2,r3,r2
 4006d9c:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 4006da0:	e0bffe17 	ldw	r2,-8(fp)
 4006da4:	e0bffc15 	stw	r2,-16(fp)
 4006da8:	00000506 	br	4006dc0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 4006dac:	e0bffc17 	ldw	r2,-16(fp)
 4006db0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 4006db4:	e0bffc17 	ldw	r2,-16(fp)
 4006db8:	10800804 	addi	r2,r2,32
 4006dbc:	e0bffc15 	stw	r2,-16(fp)
 4006dc0:	e0fffc17 	ldw	r3,-16(fp)
 4006dc4:	e0bffd17 	ldw	r2,-12(fp)
 4006dc8:	18bff836 	bltu	r3,r2,4006dac <__alt_data_end+0xfc006dac>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 4006dcc:	e0bffe17 	ldw	r2,-8(fp)
 4006dd0:	108007cc 	andi	r2,r2,31
 4006dd4:	10000226 	beq	r2,zero,4006de0 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 4006dd8:	e0bffc17 	ldw	r2,-16(fp)
 4006ddc:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 4006de0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 4006de4:	0001883a 	nop
 4006de8:	e037883a 	mov	sp,fp
 4006dec:	df000017 	ldw	fp,0(sp)
 4006df0:	dec00104 	addi	sp,sp,4
 4006df4:	f800283a 	ret

04006df8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 4006df8:	defffe04 	addi	sp,sp,-8
 4006dfc:	df000115 	stw	fp,4(sp)
 4006e00:	df000104 	addi	fp,sp,4
 4006e04:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 4006e08:	e0bfff17 	ldw	r2,-4(fp)
 4006e0c:	10bffe84 	addi	r2,r2,-6
 4006e10:	10c00428 	cmpgeui	r3,r2,16
 4006e14:	18001a1e 	bne	r3,zero,4006e80 <alt_exception_cause_generated_bad_addr+0x88>
 4006e18:	100690ba 	slli	r3,r2,2
 4006e1c:	00810034 	movhi	r2,1024
 4006e20:	109b8c04 	addi	r2,r2,28208
 4006e24:	1885883a 	add	r2,r3,r2
 4006e28:	10800017 	ldw	r2,0(r2)
 4006e2c:	1000683a 	jmp	r2
 4006e30:	04006e70 	cmpltui	r16,zero,441
 4006e34:	04006e70 	cmpltui	r16,zero,441
 4006e38:	04006e80 	call	4006e8 <__alt_mem_ram+0x4006e8>
 4006e3c:	04006e80 	call	4006e8 <__alt_mem_ram+0x4006e8>
 4006e40:	04006e80 	call	4006e8 <__alt_mem_ram+0x4006e8>
 4006e44:	04006e70 	cmpltui	r16,zero,441
 4006e48:	04006e78 	rdprs	r16,zero,441
 4006e4c:	04006e80 	call	4006e8 <__alt_mem_ram+0x4006e8>
 4006e50:	04006e70 	cmpltui	r16,zero,441
 4006e54:	04006e70 	cmpltui	r16,zero,441
 4006e58:	04006e80 	call	4006e8 <__alt_mem_ram+0x4006e8>
 4006e5c:	04006e70 	cmpltui	r16,zero,441
 4006e60:	04006e78 	rdprs	r16,zero,441
 4006e64:	04006e80 	call	4006e8 <__alt_mem_ram+0x4006e8>
 4006e68:	04006e80 	call	4006e8 <__alt_mem_ram+0x4006e8>
 4006e6c:	04006e70 	cmpltui	r16,zero,441
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 4006e70:	00800044 	movi	r2,1
 4006e74:	00000306 	br	4006e84 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 4006e78:	0005883a 	mov	r2,zero
 4006e7c:	00000106 	br	4006e84 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 4006e80:	0005883a 	mov	r2,zero
  }
}
 4006e84:	e037883a 	mov	sp,fp
 4006e88:	df000017 	ldw	fp,0(sp)
 4006e8c:	dec00104 	addi	sp,sp,4
 4006e90:	f800283a 	ret

04006e94 <atexit>:
 4006e94:	200b883a 	mov	r5,r4
 4006e98:	000f883a 	mov	r7,zero
 4006e9c:	000d883a 	mov	r6,zero
 4006ea0:	0009883a 	mov	r4,zero
 4006ea4:	40070381 	jmpi	4007038 <__register_exitproc>

04006ea8 <exit>:
 4006ea8:	defffe04 	addi	sp,sp,-8
 4006eac:	000b883a 	mov	r5,zero
 4006eb0:	dc000015 	stw	r16,0(sp)
 4006eb4:	dfc00115 	stw	ra,4(sp)
 4006eb8:	2021883a 	mov	r16,r4
 4006ebc:	40071500 	call	4007150 <__call_exitprocs>
 4006ec0:	00810074 	movhi	r2,1025
 4006ec4:	10a41d04 	addi	r2,r2,-28556
 4006ec8:	11000017 	ldw	r4,0(r2)
 4006ecc:	20800f17 	ldw	r2,60(r4)
 4006ed0:	10000126 	beq	r2,zero,4006ed8 <exit+0x30>
 4006ed4:	103ee83a 	callr	r2
 4006ed8:	8009883a 	mov	r4,r16
 4006edc:	40072d00 	call	40072d0 <_exit>

04006ee0 <memcmp>:
 4006ee0:	01c000c4 	movi	r7,3
 4006ee4:	3980192e 	bgeu	r7,r6,4006f4c <memcmp+0x6c>
 4006ee8:	2144b03a 	or	r2,r4,r5
 4006eec:	11c4703a 	and	r2,r2,r7
 4006ef0:	10000f26 	beq	r2,zero,4006f30 <memcmp+0x50>
 4006ef4:	20800003 	ldbu	r2,0(r4)
 4006ef8:	28c00003 	ldbu	r3,0(r5)
 4006efc:	10c0151e 	bne	r2,r3,4006f54 <memcmp+0x74>
 4006f00:	31bfff84 	addi	r6,r6,-2
 4006f04:	01ffffc4 	movi	r7,-1
 4006f08:	00000406 	br	4006f1c <memcmp+0x3c>
 4006f0c:	20800003 	ldbu	r2,0(r4)
 4006f10:	28c00003 	ldbu	r3,0(r5)
 4006f14:	31bfffc4 	addi	r6,r6,-1
 4006f18:	10c00e1e 	bne	r2,r3,4006f54 <memcmp+0x74>
 4006f1c:	21000044 	addi	r4,r4,1
 4006f20:	29400044 	addi	r5,r5,1
 4006f24:	31fff91e 	bne	r6,r7,4006f0c <__alt_data_end+0xfc006f0c>
 4006f28:	0005883a 	mov	r2,zero
 4006f2c:	f800283a 	ret
 4006f30:	20c00017 	ldw	r3,0(r4)
 4006f34:	28800017 	ldw	r2,0(r5)
 4006f38:	18bfee1e 	bne	r3,r2,4006ef4 <__alt_data_end+0xfc006ef4>
 4006f3c:	31bfff04 	addi	r6,r6,-4
 4006f40:	21000104 	addi	r4,r4,4
 4006f44:	29400104 	addi	r5,r5,4
 4006f48:	39bff936 	bltu	r7,r6,4006f30 <__alt_data_end+0xfc006f30>
 4006f4c:	303fe91e 	bne	r6,zero,4006ef4 <__alt_data_end+0xfc006ef4>
 4006f50:	003ff506 	br	4006f28 <__alt_data_end+0xfc006f28>
 4006f54:	10c5c83a 	sub	r2,r2,r3
 4006f58:	f800283a 	ret

04006f5c <strcmp>:
 4006f5c:	2144b03a 	or	r2,r4,r5
 4006f60:	108000cc 	andi	r2,r2,3
 4006f64:	1000171e 	bne	r2,zero,4006fc4 <strcmp+0x68>
 4006f68:	20800017 	ldw	r2,0(r4)
 4006f6c:	28c00017 	ldw	r3,0(r5)
 4006f70:	10c0141e 	bne	r2,r3,4006fc4 <strcmp+0x68>
 4006f74:	027fbff4 	movhi	r9,65279
 4006f78:	4a7fbfc4 	addi	r9,r9,-257
 4006f7c:	0086303a 	nor	r3,zero,r2
 4006f80:	02202074 	movhi	r8,32897
 4006f84:	1245883a 	add	r2,r2,r9
 4006f88:	42202004 	addi	r8,r8,-32640
 4006f8c:	10c4703a 	and	r2,r2,r3
 4006f90:	1204703a 	and	r2,r2,r8
 4006f94:	10000226 	beq	r2,zero,4006fa0 <strcmp+0x44>
 4006f98:	00002306 	br	4007028 <strcmp+0xcc>
 4006f9c:	1000221e 	bne	r2,zero,4007028 <strcmp+0xcc>
 4006fa0:	21000104 	addi	r4,r4,4
 4006fa4:	20c00017 	ldw	r3,0(r4)
 4006fa8:	29400104 	addi	r5,r5,4
 4006fac:	29800017 	ldw	r6,0(r5)
 4006fb0:	1a4f883a 	add	r7,r3,r9
 4006fb4:	00c4303a 	nor	r2,zero,r3
 4006fb8:	3884703a 	and	r2,r7,r2
 4006fbc:	1204703a 	and	r2,r2,r8
 4006fc0:	19bff626 	beq	r3,r6,4006f9c <__alt_data_end+0xfc006f9c>
 4006fc4:	20800003 	ldbu	r2,0(r4)
 4006fc8:	10c03fcc 	andi	r3,r2,255
 4006fcc:	18c0201c 	xori	r3,r3,128
 4006fd0:	18ffe004 	addi	r3,r3,-128
 4006fd4:	18000c26 	beq	r3,zero,4007008 <strcmp+0xac>
 4006fd8:	29800007 	ldb	r6,0(r5)
 4006fdc:	19800326 	beq	r3,r6,4006fec <strcmp+0x90>
 4006fe0:	00001306 	br	4007030 <strcmp+0xd4>
 4006fe4:	29800007 	ldb	r6,0(r5)
 4006fe8:	11800b1e 	bne	r2,r6,4007018 <strcmp+0xbc>
 4006fec:	21000044 	addi	r4,r4,1
 4006ff0:	20c00003 	ldbu	r3,0(r4)
 4006ff4:	29400044 	addi	r5,r5,1
 4006ff8:	18803fcc 	andi	r2,r3,255
 4006ffc:	1080201c 	xori	r2,r2,128
 4007000:	10bfe004 	addi	r2,r2,-128
 4007004:	103ff71e 	bne	r2,zero,4006fe4 <__alt_data_end+0xfc006fe4>
 4007008:	0007883a 	mov	r3,zero
 400700c:	28800003 	ldbu	r2,0(r5)
 4007010:	1885c83a 	sub	r2,r3,r2
 4007014:	f800283a 	ret
 4007018:	28800003 	ldbu	r2,0(r5)
 400701c:	18c03fcc 	andi	r3,r3,255
 4007020:	1885c83a 	sub	r2,r3,r2
 4007024:	f800283a 	ret
 4007028:	0005883a 	mov	r2,zero
 400702c:	f800283a 	ret
 4007030:	10c03fcc 	andi	r3,r2,255
 4007034:	003ff506 	br	400700c <__alt_data_end+0xfc00700c>

04007038 <__register_exitproc>:
 4007038:	defffa04 	addi	sp,sp,-24
 400703c:	dc000315 	stw	r16,12(sp)
 4007040:	04010074 	movhi	r16,1025
 4007044:	84241d04 	addi	r16,r16,-28556
 4007048:	80c00017 	ldw	r3,0(r16)
 400704c:	dc400415 	stw	r17,16(sp)
 4007050:	dfc00515 	stw	ra,20(sp)
 4007054:	18805217 	ldw	r2,328(r3)
 4007058:	2023883a 	mov	r17,r4
 400705c:	10003726 	beq	r2,zero,400713c <__register_exitproc+0x104>
 4007060:	10c00117 	ldw	r3,4(r2)
 4007064:	010007c4 	movi	r4,31
 4007068:	20c00e16 	blt	r4,r3,40070a4 <__register_exitproc+0x6c>
 400706c:	1a000044 	addi	r8,r3,1
 4007070:	8800221e 	bne	r17,zero,40070fc <__register_exitproc+0xc4>
 4007074:	18c00084 	addi	r3,r3,2
 4007078:	18c7883a 	add	r3,r3,r3
 400707c:	18c7883a 	add	r3,r3,r3
 4007080:	12000115 	stw	r8,4(r2)
 4007084:	10c7883a 	add	r3,r2,r3
 4007088:	19400015 	stw	r5,0(r3)
 400708c:	0005883a 	mov	r2,zero
 4007090:	dfc00517 	ldw	ra,20(sp)
 4007094:	dc400417 	ldw	r17,16(sp)
 4007098:	dc000317 	ldw	r16,12(sp)
 400709c:	dec00604 	addi	sp,sp,24
 40070a0:	f800283a 	ret
 40070a4:	00800034 	movhi	r2,0
 40070a8:	10800004 	addi	r2,r2,0
 40070ac:	10002626 	beq	r2,zero,4007148 <__register_exitproc+0x110>
 40070b0:	01006404 	movi	r4,400
 40070b4:	d9400015 	stw	r5,0(sp)
 40070b8:	d9800115 	stw	r6,4(sp)
 40070bc:	d9c00215 	stw	r7,8(sp)
 40070c0:	00000000 	call	0 <__alt_mem_ram>
 40070c4:	d9400017 	ldw	r5,0(sp)
 40070c8:	d9800117 	ldw	r6,4(sp)
 40070cc:	d9c00217 	ldw	r7,8(sp)
 40070d0:	10001d26 	beq	r2,zero,4007148 <__register_exitproc+0x110>
 40070d4:	81000017 	ldw	r4,0(r16)
 40070d8:	10000115 	stw	zero,4(r2)
 40070dc:	02000044 	movi	r8,1
 40070e0:	22405217 	ldw	r9,328(r4)
 40070e4:	0007883a 	mov	r3,zero
 40070e8:	12400015 	stw	r9,0(r2)
 40070ec:	20805215 	stw	r2,328(r4)
 40070f0:	10006215 	stw	zero,392(r2)
 40070f4:	10006315 	stw	zero,396(r2)
 40070f8:	883fde26 	beq	r17,zero,4007074 <__alt_data_end+0xfc007074>
 40070fc:	18c9883a 	add	r4,r3,r3
 4007100:	2109883a 	add	r4,r4,r4
 4007104:	1109883a 	add	r4,r2,r4
 4007108:	21802215 	stw	r6,136(r4)
 400710c:	01800044 	movi	r6,1
 4007110:	12406217 	ldw	r9,392(r2)
 4007114:	30cc983a 	sll	r6,r6,r3
 4007118:	4992b03a 	or	r9,r9,r6
 400711c:	12406215 	stw	r9,392(r2)
 4007120:	21c04215 	stw	r7,264(r4)
 4007124:	01000084 	movi	r4,2
 4007128:	893fd21e 	bne	r17,r4,4007074 <__alt_data_end+0xfc007074>
 400712c:	11006317 	ldw	r4,396(r2)
 4007130:	218cb03a 	or	r6,r4,r6
 4007134:	11806315 	stw	r6,396(r2)
 4007138:	003fce06 	br	4007074 <__alt_data_end+0xfc007074>
 400713c:	18805304 	addi	r2,r3,332
 4007140:	18805215 	stw	r2,328(r3)
 4007144:	003fc606 	br	4007060 <__alt_data_end+0xfc007060>
 4007148:	00bfffc4 	movi	r2,-1
 400714c:	003fd006 	br	4007090 <__alt_data_end+0xfc007090>

04007150 <__call_exitprocs>:
 4007150:	defff504 	addi	sp,sp,-44
 4007154:	df000915 	stw	fp,36(sp)
 4007158:	dd400615 	stw	r21,24(sp)
 400715c:	dc800315 	stw	r18,12(sp)
 4007160:	dfc00a15 	stw	ra,40(sp)
 4007164:	ddc00815 	stw	r23,32(sp)
 4007168:	dd800715 	stw	r22,28(sp)
 400716c:	dd000515 	stw	r20,20(sp)
 4007170:	dcc00415 	stw	r19,16(sp)
 4007174:	dc400215 	stw	r17,8(sp)
 4007178:	dc000115 	stw	r16,4(sp)
 400717c:	d9000015 	stw	r4,0(sp)
 4007180:	2839883a 	mov	fp,r5
 4007184:	04800044 	movi	r18,1
 4007188:	057fffc4 	movi	r21,-1
 400718c:	00810074 	movhi	r2,1025
 4007190:	10a41d04 	addi	r2,r2,-28556
 4007194:	12000017 	ldw	r8,0(r2)
 4007198:	45005217 	ldw	r20,328(r8)
 400719c:	44c05204 	addi	r19,r8,328
 40071a0:	a0001c26 	beq	r20,zero,4007214 <__call_exitprocs+0xc4>
 40071a4:	a0800117 	ldw	r2,4(r20)
 40071a8:	15ffffc4 	addi	r23,r2,-1
 40071ac:	b8000d16 	blt	r23,zero,40071e4 <__call_exitprocs+0x94>
 40071b0:	14000044 	addi	r16,r2,1
 40071b4:	8421883a 	add	r16,r16,r16
 40071b8:	8421883a 	add	r16,r16,r16
 40071bc:	84402004 	addi	r17,r16,128
 40071c0:	a463883a 	add	r17,r20,r17
 40071c4:	a421883a 	add	r16,r20,r16
 40071c8:	e0001e26 	beq	fp,zero,4007244 <__call_exitprocs+0xf4>
 40071cc:	80804017 	ldw	r2,256(r16)
 40071d0:	e0801c26 	beq	fp,r2,4007244 <__call_exitprocs+0xf4>
 40071d4:	bdffffc4 	addi	r23,r23,-1
 40071d8:	843fff04 	addi	r16,r16,-4
 40071dc:	8c7fff04 	addi	r17,r17,-4
 40071e0:	bd7ff91e 	bne	r23,r21,40071c8 <__alt_data_end+0xfc0071c8>
 40071e4:	00800034 	movhi	r2,0
 40071e8:	10800004 	addi	r2,r2,0
 40071ec:	10000926 	beq	r2,zero,4007214 <__call_exitprocs+0xc4>
 40071f0:	a0800117 	ldw	r2,4(r20)
 40071f4:	1000301e 	bne	r2,zero,40072b8 <__call_exitprocs+0x168>
 40071f8:	a0800017 	ldw	r2,0(r20)
 40071fc:	10003226 	beq	r2,zero,40072c8 <__call_exitprocs+0x178>
 4007200:	a009883a 	mov	r4,r20
 4007204:	98800015 	stw	r2,0(r19)
 4007208:	00000000 	call	0 <__alt_mem_ram>
 400720c:	9d000017 	ldw	r20,0(r19)
 4007210:	a03fe41e 	bne	r20,zero,40071a4 <__alt_data_end+0xfc0071a4>
 4007214:	dfc00a17 	ldw	ra,40(sp)
 4007218:	df000917 	ldw	fp,36(sp)
 400721c:	ddc00817 	ldw	r23,32(sp)
 4007220:	dd800717 	ldw	r22,28(sp)
 4007224:	dd400617 	ldw	r21,24(sp)
 4007228:	dd000517 	ldw	r20,20(sp)
 400722c:	dcc00417 	ldw	r19,16(sp)
 4007230:	dc800317 	ldw	r18,12(sp)
 4007234:	dc400217 	ldw	r17,8(sp)
 4007238:	dc000117 	ldw	r16,4(sp)
 400723c:	dec00b04 	addi	sp,sp,44
 4007240:	f800283a 	ret
 4007244:	a0800117 	ldw	r2,4(r20)
 4007248:	80c00017 	ldw	r3,0(r16)
 400724c:	10bfffc4 	addi	r2,r2,-1
 4007250:	15c01426 	beq	r2,r23,40072a4 <__call_exitprocs+0x154>
 4007254:	80000015 	stw	zero,0(r16)
 4007258:	183fde26 	beq	r3,zero,40071d4 <__alt_data_end+0xfc0071d4>
 400725c:	95c8983a 	sll	r4,r18,r23
 4007260:	a0806217 	ldw	r2,392(r20)
 4007264:	a5800117 	ldw	r22,4(r20)
 4007268:	2084703a 	and	r2,r4,r2
 400726c:	10000b26 	beq	r2,zero,400729c <__call_exitprocs+0x14c>
 4007270:	a0806317 	ldw	r2,396(r20)
 4007274:	2088703a 	and	r4,r4,r2
 4007278:	20000c1e 	bne	r4,zero,40072ac <__call_exitprocs+0x15c>
 400727c:	89400017 	ldw	r5,0(r17)
 4007280:	d9000017 	ldw	r4,0(sp)
 4007284:	183ee83a 	callr	r3
 4007288:	a0800117 	ldw	r2,4(r20)
 400728c:	15bfbf1e 	bne	r2,r22,400718c <__alt_data_end+0xfc00718c>
 4007290:	98800017 	ldw	r2,0(r19)
 4007294:	153fcf26 	beq	r2,r20,40071d4 <__alt_data_end+0xfc0071d4>
 4007298:	003fbc06 	br	400718c <__alt_data_end+0xfc00718c>
 400729c:	183ee83a 	callr	r3
 40072a0:	003ff906 	br	4007288 <__alt_data_end+0xfc007288>
 40072a4:	a5c00115 	stw	r23,4(r20)
 40072a8:	003feb06 	br	4007258 <__alt_data_end+0xfc007258>
 40072ac:	89000017 	ldw	r4,0(r17)
 40072b0:	183ee83a 	callr	r3
 40072b4:	003ff406 	br	4007288 <__alt_data_end+0xfc007288>
 40072b8:	a0800017 	ldw	r2,0(r20)
 40072bc:	a027883a 	mov	r19,r20
 40072c0:	1029883a 	mov	r20,r2
 40072c4:	003fb606 	br	40071a0 <__alt_data_end+0xfc0071a0>
 40072c8:	0005883a 	mov	r2,zero
 40072cc:	003ffb06 	br	40072bc <__alt_data_end+0xfc0072bc>

040072d0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 40072d0:	defffd04 	addi	sp,sp,-12
 40072d4:	df000215 	stw	fp,8(sp)
 40072d8:	df000204 	addi	fp,sp,8
 40072dc:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 40072e0:	0001883a 	nop
 40072e4:	e0bfff17 	ldw	r2,-4(fp)
 40072e8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 40072ec:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 40072f0:	10000226 	beq	r2,zero,40072fc <_exit+0x2c>
    ALT_SIM_FAIL();
 40072f4:	002af070 	cmpltui	zero,zero,43969
 40072f8:	00000106 	br	4007300 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 40072fc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 4007300:	003fff06 	br	4007300 <__alt_data_end+0xfc007300>
