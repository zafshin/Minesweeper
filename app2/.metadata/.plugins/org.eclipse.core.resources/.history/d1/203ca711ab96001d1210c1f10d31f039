#include "renderer.h"
Renderer::Renderer(){
	  charBuffer = alt_up_char_buffer_open_dev("/dev/charbuff");
	  if ( charBuffer == NULL)
		  log += "Error: could not open character buffer device \n";
	  	else
	  		log += "Opened character buffer device \n";
	  pixelBuffer = alt_up_pixel_buffer_dma_open_dev ("/dev/pixelbuff");
	  if ( pixelBuffer == NULL){
		  log += "Error: could not open pixel buffer device \n";
	  }
	  	else
	  	log += "Opened pixel buffer device \n";
	  gyro = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi_0");
}
void Renderer::Render(){
	int len = graphicBuffer.size();
	int lenT = textBuffer.size();
	unsigned char color = 0;
	unsigned char posX = 0;
	unsigned char posY = 0;
	unsigned char sizX = 0;
	unsigned char sizY = 0;

	alt_up_pixel_buffer_dma_clear_screen(pixelBuffer,1);
		usleep(10000);


	alt_up_char_buffer_clear(charBuffer);
	for(int i = 0; i < lenT; i++){
		graphicObj* tmp = &textBuffer[i];
		switch(tmp->typee){
			case 2:
					posX = (tmp->position.x+1) * 40;
					posY = (-tmp->position.y+1) * 30;
					alt_up_char_buffer_string(charBuffer, tmp->text.text.c_str(), posX, posY);
					break;
		}
	}

	for(int i = 0; i < len; i++){
		graphicObj* tmp = &graphicBuffer[i];
		switch(tmp->typee){
		case 0:
			color = 0;
			color = (((unsigned char)(tmp->color.R * 7)) << 5);
			color = color | (((unsigned char)(tmp->color.G * 7)) << 2);
			color = color | (unsigned char)(tmp->color.B * 3);
			posX = (tmp->position.x * 80)  + 80;
			posY = ((-tmp->position.y) * 60)  + 60;
			sizX = (tmp->size.x * 160);
			sizY = (tmp->size.y * 120);
			alt_up_pixel_buffer_dma_draw_box(pixelBuffer,posX,posY,posX + sizX,posY + sizY,color,1);
			break;
		case 1:
			color = 0;
			color = ((unsigned char)(tmp->color.R * 7) << 5);
			color = color | ((unsigned char)(tmp->color.G * 7) << 2);
			color = color | (unsigned char)(tmp->color.B * 3);

			break;

//		case 2:
//			posX = (tmp->position.x+1) * 40;
//			posY = (-tmp->position.y+1) * 30;
//			alt_up_char_buffer_string(charBuffer, tmp->text.text.c_str(), posX, posY);
//			break;
		}
		alt_up_pixel_buffer_dma_swap_buffers(pixelBuffer);

	}
	while(alt_up_pixel_buffer_dma_check_swap_buffers_status(pixelBuffer)== 1){
		usleep(1000);
	}
	alt_up_pixel_buffer_dma_clear_screen(pixelBuffer,1);
	usleep(1000000);


}
void Renderer::addObj(graphicObj obj){
	if((obj.typee == box)|(obj.typee == line))
		graphicBuffer.push_back(obj);
	else
		textBuffer.push_back(obj);
	}

float Renderer::getGX(){
	alt_up_accelerometer_spi_read_x_axis(gyro, &xAccel);
	return (float)xAccel /128.0;
}
float Renderer::getGY(){
	alt_up_accelerometer_spi_read_y_axis(gyro, &yAccel);
	return (float)yAccel /128.0;
}
graphicObj* Renderer::getPtrBuffer(int index){
	return &graphicBuffer[index];
}
graphicObj* Renderer::getPtrTBuffer(int index){
	return &textBuffer[index];
}
int Renderer::bufferSize(){
	return graphicBuffer.size();

}
graphicObj* Renderer::getLastPtrBuffer(){
	if(graphicBuffer.size()== 0)
		return NULL;
	return &graphicBuffer[graphicBuffer.size()-1];
}
graphicObj* Renderer::getLastPtrTBuffer(){
	if(textBuffer.size()== 0)
		return NULL;
	return &textBuffer[textBuffer.size()-1];
}
