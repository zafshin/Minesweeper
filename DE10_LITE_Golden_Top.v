// ============================================================================
//   Ver  :| Author					:| Mod. Date :| Changes Made:
//   V1.1 :| Alexandra Du			:| 06/01/2016:| Added Verilog file
// ============================================================================


//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================


module DE10_LITE_Golden_Top(
		input 				 MAX10_CLK1_50,
		output   [3:0]     VGA_R,VGA_G,VGA_B,
		output VGA_HS,VGA_VS,
		input		[9:0]     SW,
		output   [9:0]     LEDR,
		input    [1:0]     KEY,
		output   [7:0]     HEX0,HEX1,HEX2,HEX3,HEX4,HEX5,
      output             DRAM_CLK,
      output             DRAM_CKE,
      output   [12: 0]   DRAM_ADDR,
      output   [ 1: 0]   DRAM_BA,
      inout    [15: 0]   DRAM_DQ,
      output             DRAM_LDQM,
      output             DRAM_UDQM,
      output             DRAM_CS_N,
      output             DRAM_WE_N,
      output             DRAM_CAS_N,
      output             DRAM_RAS_N,
		output 				 GSENSOR_CS_N,
		output				 GSENSOR_SCLK,
		inout					 GSENSOR_SDI,
		inout					 GSENSOR_SDO,
		input		[1:0]		 GSENSOR_INT
);
wire [3:0] w0,w1,w2,w3,w4,w5;

seg_decoder d0(w0,HEX0);
seg_decoder d1(w1,HEX1);
seg_decoder d2(w2,HEX2);
seg_decoder d3(w3,HEX3);
seg_decoder d4(w4,HEX4);
seg_decoder d5(w5,HEX5);


soc1 u1(
	.clk_clk(MAX10_CLK1_50), 
	.reset_reset_n(KEY[0]),
		.sdram_clk_clk(DRAM_CLK),                  //               clk_sdram.clk
	   .sdram_wire_addr(DRAM_ADDR),                //              sdram_wire.addr
		.sdram_wire_ba(DRAM_BA),                  //                        .ba
		.sdram_wire_cas_n(DRAM_CAS_N),               //                        .cas_n
		.sdram_wire_cke(DRAM_CKE),                 //                        .cke
		.sdram_wire_cs_n(DRAM_CS_N),                //                        .cs_n
		.sdram_wire_dq(DRAM_DQ),                  //                        .dq
		.sdram_wire_dqm({DRAM_UDQM,DRAM_LDQM}),                 //                        .dqm
		.sdram_wire_ras_n(DRAM_RAS_N),               //                        .ras_n
		.sdram_wire_we_n(DRAM_WE_N),
		.vga_out_CLK(),
		.vga_out_HS(VGA_HS),
		.vga_out_VS(VGA_VS),
		.vga_out_BLANK(),
		.vga_out_SYNC(),
		.vga_out_R(VGA_R),
		.vga_out_B(VGA_B),
		.vga_out_G(VGA_G),
		.accelerometer_spi_I2C_SDAT(GSENSOR_SDI),
		.accelerometer_spi_I2C_SCLK(GSENSOR_SCLK),
		.accelerometer_spi_G_SENSOR_CS_N(GSENSOR_CS_N),
		.accelerometer_spi_G_SENSOR_INT(GSENSOR_INT[0]),
		.sw_export(SW),
		.ledr_export(LEDR),
		.key_export(KEY),
		.hex0_export(w0),
		.hex1_export(w1),
		.hex2_export(w2),
		.hex3_export(w3),
		.hex4_export(w4),
		.hex5_export(w5)
	);

endmodule

module seg_decoder(
input  wire [3:0] a, //data in a
output wire [7:0] out //carry output
);
reg [7:0] tmp = 8'hFF;
assign out = ~tmp;
 always @ (a) begin  
    case(a)  
      4'h0: tmp = 8'h3F;  
      4'h1: tmp = 8'h06;  
      4'h2: tmp = 8'h5B; 
		4'h3: tmp = 8'h4F; 
		4'h4: tmp = 8'h66; 
		4'h5: tmp = 8'h6D; 
		4'h6: tmp = 8'h7D; 
		4'h7: tmp = 8'h07; 
		4'h8: tmp = 8'h7F; 
		4'h9: tmp = 8'h6F; 
		4'ha: tmp = 8'h77; 
		4'hb: tmp = 8'h7C; 
		4'hc: tmp = 8'h39; 
		4'hd: tmp = 8'h5E; 
		4'he: tmp = 8'h79; 	
		4'hf: tmp = 8'h71; 
    endcase  
  end
  
endmodule
